{"file_contents":{"app/(tabs)/inventory/_layout.tsx":{"content":"import { Stack } from 'expo-router';\n\nexport default function InventoryStack() {\n    return (\n        <Stack screenOptions={{ headerShown: false }}>\n            <Stack.Screen name='index' />\n            <Stack.Screen name='category' />\n        </Stack>\n    );\n}\n","size_bytes":262},"db/models/roles.ts":{"content":"import { Model, Relation } from '@nozbe/watermelondb';\nimport { field, relation, text, writer } from '@nozbe/watermelondb/decorators';\nimport Business from './business';\n\nexport default class Role extends Model {\n    static table = 'roles';\n    static associations = {\n        businesses: { type: 'belongs_to' as const, key: 'business_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @text('name') name!: string;\n    @field('permissions') permissions!: string;\n    @field('deleted') deleted!: boolean;\n\n    @relation('businesses', 'business_id') business!: Relation<Business>;\n\n    @writer async markAsDeleted() {\n        await this.update((r) => {\n            r.deleted = true;\n        });\n    }\n}\n","size_bytes":716},"components/credit/transaction/forms/MakePaymentForm.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { CheckCircle } from 'lucide-react-native';\nimport { PaymentMethodSelector } from '../PaymentMethodSelector';\nimport { ActionButton } from '@/components/ui/ActionButton';\n\ninterface MakePaymentFormProps {\n\tpaymentAmount: string;\n\tonPaymentAmountChange: (amount: string) => void;\n\tpaymentMethod: string;\n\tonPaymentMethodChange: (method: string) => void;\n\tonSubmit: () => void;\n}\n\nexport const MakePaymentForm: React.FC<MakePaymentFormProps> = ({\n\tpaymentAmount,\n\tonPaymentAmountChange,\n\tpaymentMethod,\n\tonPaymentMethodChange,\n\tonSubmit,\n}) => {\n\tconst canSubmit = paymentAmount && paymentMethod;\n\n\treturn (\n\t\t<View className='mx-4 mt-6 mb-4 bg-white rounded-xl p-4 shadow-sm'>\n\t\t\t<Text className='text-lg font-semibold mb-4'>Make Payment</Text>\n\n\t\t\t{/* Payment Amount */}\n\t\t\t<View className='mb-4'>\n\t\t\t\t<Text className='text-sm text-gray-600 mb-2'>Payment Amount</Text>\n\t\t\t\t<View className='flex-row items-center bg-gray-100 rounded-lg px-4 py-3'>\n\t\t\t\t\t<Text className='text-gray-600 text-base'>$</Text>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tclassName='flex-1 ml-2 text-base'\n\t\t\t\t\t\tplaceholder='0.00'\n\t\t\t\t\t\tvalue={paymentAmount}\n\t\t\t\t\t\tonChangeText={onPaymentAmountChange}\n\t\t\t\t\t\tkeyboardType='decimal-pad'\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t</View>\n\n\t\t\t<PaymentMethodSelector\n\t\t\t\tselectedMethod={paymentMethod as any}\n\t\t\t\tonSelectMethod={onPaymentMethodChange}\n\t\t\t/>\n\n\t\t\t{/* Submit Button */}\n\t\t\t{canSubmit && (\n\t\t\t\t<ActionButton\n\t\t\t\t\ttext='Record Payment'\n\t\t\t\t\ticon={CheckCircle}\n\t\t\t\t\tonPress={onSubmit}\n\t\t\t\t\tvariant='primary'\n\t\t\t\t\tsize='md'\n\t\t\t\t\tfullWidth\n\t\t\t\t\tclassName='mt-2 bg-green-600'\n\t\t\t\t/>\n\t\t\t)}\n\t\t</View>\n\t);\n};\n","size_bytes":1681},"db/models/customers.ts":{"content":"import { Model, Query, Relation } from '@nozbe/watermelondb';\nimport {\n    children,\n    date,\n    field,\n    text,\n    writer,\n    readonly,\n    relation,\n} from '@nozbe/watermelondb/decorators';\nimport Sale from './sales';\nimport Business from './business';\n\nexport default class Customer extends Model {\n    static table = 'customers';\n    static associations = {\n        sales: { type: 'has_many' as const, foreignKey: 'customer_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('business_id') businessId!: string;\n    @text('name') name!: string;\n    @text('phone') phone!: string;\n    @text('email') email!: string;\n    @field('credit_limit') creditLimit!: number;\n    @field('current_balance') currentBalance!: number;\n    @field('reputation_score') reputationScore!: number;\n    @readonly @date('created_at') createdAt!: Date;\n    @readonly @date('updated_at') updatedAt!: Date;\n    @field('deleted') deleted!: boolean;\n\n    @relation('businesses', 'business_id') business!: Relation<Business>;\n    @children('sales') sales!: Query<Sale>;\n\n    @writer async markAsDeleted() {\n        await this.update((c) => {\n            c.deleted = true;\n        });\n    }\n}\n","size_bytes":1192},"db/schema.ts":{"content":"import { appSchema, tableSchema } from '@nozbe/watermelondb';\n\nexport default appSchema({\n    version: 1,\n    tables: [\n        tableSchema({\n            name: 'sessions',\n            columns: [\n                { name: 'session_id', type: 'string', isIndexed: true }, // text UNIQUE\n                { name: 'user_id', type: 'string', isIndexed: true }, // foreign key to users(id)\n                { name: 'created_at', type: 'number' }, // session creation timestamp\n                { name: 'is_active', type: 'boolean' }, // whether session is active\n            ],\n        }),\n        tableSchema({\n            name: 'users',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'email', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'name', type: 'string', isOptional: true },\n                { name: 'phone', type: 'string', isOptional: true },\n                { name: 'password_hash', type: 'string', isOptional: true },\n                { name: 'pin_hash', type: 'string', isOptional: true },\n                { name: 'created_at', type: 'number' }, // store as timestamp (ms)\n                { name: 'updated_at', type: 'number' }, // store as timestamp (ms)\n                { name: 'deleted', type: 'boolean', isOptional: true },\n                { name: 'is_owner', type: 'boolean', isOptional: true },\n            ],\n        }),\n        tableSchema({\n            name: 'businesses',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'name', type: 'string' }, // NOT NULL\n                { name: 'business_type', type: 'string', isOptional: true },\n                { name: 'owner_id', type: 'string', isIndexed: true }, // foreign key to app_users(id)\n                { name: 'created_at', type: 'number' }, // store as timestamp (ms)\n                { name: 'updated_at', type: 'number' }, // store as timestamp (ms)\n                { name: 'deleted', type: 'boolean', isOptional: true },\n            ],\n        }),\n        tableSchema({\n            name: 'stores',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'business_id', type: 'string', isIndexed: true }, // foreign key to businesses(id)\n                { name: 'name', type: 'string' }, // NOT NULL\n                { name: 'address', type: 'string', isOptional: true },\n                { name: 'phone', type: 'string', isOptional: true },\n                { name: 'email', type: 'string', isOptional: true },\n                { name: 'manager_id', type: 'string', isOptional: true, isIndexed: true }, // foreign key to app_users(id)\n                { name: 'status', type: 'string', isOptional: true }, // default 'active' (handle in app logic)\n                { name: 'currency', type: 'string', isOptional: true }, // default 'KES'\n                { name: 'created_at', type: 'number' }, // timestamp (ms)\n                { name: 'updated_at', type: 'number' }, // timestamp (ms)\n                { name: 'deleted', type: 'boolean', isOptional: true },\n            ],\n        }),\n\n        // Roles table\n        tableSchema({\n            name: 'roles',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'business_id', type: 'string', isIndexed: true }, // FK -> businesses(id)\n                { name: 'name', type: 'string' }, // NOT NULL\n                { name: 'permissions', type: 'string', isOptional: true }, // store JSON as string\n                { name: 'deleted', type: 'boolean', isOptional: true },\n            ],\n        }),\n\n        // Staff table\n        tableSchema({\n            name: 'staff',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'user_id', type: 'string', isIndexed: true }, // FK -> app_users(id)\n                { name: 'store_id', type: 'string', isIndexed: true }, // FK -> stores(id)\n                { name: 'role_id', type: 'string', isIndexed: true }, // FK -> roles(id)\n                { name: 'assigned_at', type: 'number', isOptional: true }, // timestamp (ms)\n                { name: 'deleted', type: 'boolean', isOptional: true },\n            ],\n        }),\n\n        // Categories table\n        tableSchema({\n            name: 'categories',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'business_id', type: 'string', isIndexed: true }, // FK -> businesses(id)\n                { name: 'name', type: 'string' }, // NOT NULL\n                { name: 'icon', type: 'string', isOptional: true },\n                { name: 'color', type: 'string', isOptional: true },\n                { name: 'created_at', type: 'number' }, // timestamp (ms)\n                { name: 'deleted', type: 'boolean', isOptional: true },\n            ],\n        }),\n\n        // Products table\n        tableSchema({\n            name: 'products',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'business_id', type: 'string', isIndexed: true }, // FK -> businesses(id)\n                { name: 'category_id', type: 'string', isIndexed: true }, // FK -> categories(id)\n                { name: 'name', type: 'string' }, // NOT NULL\n                { name: 'cost', type: 'number', isOptional: true },\n                { name: 'barcode', type: 'string', isOptional: true, isIndexed: true },\n                { name: 'description', type: 'string', isOptional: true },\n                { name: 'unit', type: 'string', isOptional: true },\n                { name: 'status', type: 'string', isOptional: true },\n                { name: 'created_at', type: 'number' },\n                { name: 'updated_at', type: 'number' },\n                { name: 'deleted', type: 'boolean', isOptional: true },\n            ],\n        }),\n\n        // Inventory table\n        tableSchema({\n            name: 'inventory',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'product_id', type: 'string', isIndexed: true }, // FK -> products(id)\n                { name: 'store_id', type: 'string', isIndexed: true }, // FK -> stores(id)\n                { name: 'quantity', type: 'number', isOptional: true },\n                { name: 'min_stock', type: 'number', isOptional: true },\n                { name: 'max_stock', type: 'number', isOptional: true },\n                { name: 'price', type: 'number', isOptional: true },\n                { name: 'whole_sale_price', type: 'number', isOptional: true },\n                { name: 'weighted_avg_cost', type: 'number', isOptional: true },\n                { name: 'last_purchase_price', type: 'number', isOptional: true },\n                { name: 'location', type: 'string', isOptional: true },\n                { name: 'last_updated', type: 'number', isOptional: true },\n                { name: 'deleted', type: 'boolean', isOptional: true },\n            ],\n        }),\n\n        // Customers table\n        tableSchema({\n            name: 'customers',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'business_id', type: 'string', isIndexed: true }, // FK -> businesses(id)\n                { name: 'name', type: 'string' }, // NOT NULL\n                { name: 'phone', type: 'string', isOptional: true, isIndexed: true },\n                { name: 'email', type: 'string', isOptional: true },\n                { name: 'credit_limit', type: 'number', isOptional: true },\n                { name: 'current_balance', type: 'number', isOptional: true },\n                { name: 'reputation_score', type: 'number', isOptional: true },\n                { name: 'created_at', type: 'number' },\n                { name: 'updated_at', type: 'number' },\n                { name: 'deleted', type: 'boolean', isOptional: true },\n            ],\n        }),\n\n        // Sales table\n        tableSchema({\n            name: 'sales',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'store_id', type: 'string', isIndexed: true }, // FK -> stores(id)\n                { name: 'user_id', type: 'string', isIndexed: true }, // FK -> app_users(id)\n                { name: 'customer_id', type: 'string', isOptional: true, isIndexed: true }, // FK -> customers(id)\n                { name: 'total_amount', type: 'number' },\n                { name: 'discount_amount', type: 'number', isOptional: true },\n                { name: 'discount_percentage', type: 'number', isOptional: true },\n                { name: 'subtotal', type: 'number' },\n                { name: 'payment_method', type: 'string', isOptional: true },\n                { name: 'on_credit', type: 'boolean', isOptional: true },\n                { name: 'status', type: 'string', isOptional: true },\n                { name: 'created_at', type: 'number' },\n                { name: 'updated_at', type: 'number' },\n            ],\n        }),\n\n        // Sales items table\n        tableSchema({\n            name: 'sales_items',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true }, // text UNIQUE\n                { name: 'sale_id', type: 'string', isIndexed: true }, // FK -> sales(id)\n                { name: 'product_id', type: 'string', isIndexed: true }, // FK -> products(id)\n                { name: 'quantity', type: 'number' },\n                { name: 'unit_price', type: 'number' },\n                { name: 'total_price', type: 'number' },\n            ],\n        }),\n\n        // Inventory batches table - tracks all inventory movements\n        tableSchema({\n            name: 'inventory_batches',\n            columns: [\n                { name: 'external_id', type: 'string', isOptional: true, isIndexed: true },\n                { name: 'inventory_id', type: 'string', isIndexed: true }, // FK -> inventory(id)\n                { name: 'product_id', type: 'string', isIndexed: true }, // FK -> products(id)\n                { name: 'store_id', type: 'string', isIndexed: true }, // FK -> stores(id)\n                { name: 'user_id', type: 'string', isIndexed: true }, // FK -> users(id) - who made the change\n                { name: 'quantity_change', type: 'number' }, // positive for additions, negative for deductions\n                { name: 'quantity_before', type: 'number' }, // quantity before change\n                { name: 'quantity_after', type: 'number' }, // quantity after change\n                { name: 'cost_per_unit', type: 'number', isOptional: true }, // cost at time of batch\n                { name: 'batch_type', type: 'string' }, // 'purchase', 'sale', 'adjustment', 'return', 'damage'\n                { name: 'reference_id', type: 'string', isOptional: true, isIndexed: true }, // sale_id or purchase_id\n                { name: 'notes', type: 'string', isOptional: true },\n                { name: 'created_at', type: 'number' },\n            ],\n        }),\n    ],\n});\n","size_bytes":11559},"babel.config.js":{"content":"module.exports = function (api) {\n    api.cache(true);\n    let plugins = [\n        ['@babel/plugin-proposal-decorators', { legacy: true }],\n        ['@babel/plugin-proposal-class-properties', { loose: true }]\n    ];\n\n    return {\n        presets: [['babel-preset-expo', { jsxImportSource: 'nativewind' }], 'nativewind/babel'],\n\n        plugins,\n    };\n};\n","size_bytes":355},"components/account/history/HistoryTab.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { router } from 'expo-router';\nimport { TransactionHistoryItem } from './TransactionHistoryItem';\n\ninterface HistoryTabProps {\n    transactions?: {\n        id: string;\n        orderNumber: number;\n        date: Date;\n        amount: number;\n    }[];\n}\n\nexport const HistoryTab: React.FC<HistoryTabProps> = ({ transactions }) => {\n    // Mock data if not provided\n    const mockTransactions =\n        transactions ||\n        [1, 2, 3, 4, 5].map((item) => ({\n            id: `txn-${item}`,\n            orderNumber: 1000 + item,\n            date: new Date(),\n            amount: Math.random() * 50 + 10,\n        }));\n\n    const handleTransactionPress = (transaction: any) => {\n        console.log('Navigate to transaction:', transaction.id);\n        // router.push({\n        //   pathname: '/sales/transaction-detail',\n        //   params: {\n        //     transactionId: transaction.id,\n        //     orderNumber: transaction.orderNumber.toString()\n        //   }\n        // });\n    };\n\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <Text className='mb-4 font-semibold text-gray-900'>Recent Transactions</Text>\n            <View className='space-y-3'>\n                {mockTransactions.map((transaction) => (\n                    <TransactionHistoryItem\n                        key={transaction.id}\n                        transaction={transaction}\n                        onPress={handleTransactionPress}\n                    />\n                ))}\n            </View>\n        </View>\n    );\n};\n","size_bytes":1616},"hooks/useInventoryFilters.ts":{"content":"import { FilterState } from '@/types';\nimport { useMemo, useState } from 'react';\n\nexport const useInventoryFilters = (inventoryData: any[]) => {\n    const [searchQuery, setSearchQuery] = useState('');\n    const [selectedCategory, setSelectedCategory] = useState('All');\n    const [selectedFilter, setSelectedFilter] = useState<keyof FilterState>('All');\n    const [isSearchFocused, setIsSearchFocused] = useState(false);\n\n    const filteredData = useMemo(() => {\n        return inventoryData.filter((item) => {\n            const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase());\n            const matchesCategory =\n                selectedCategory === 'All' || item.category === selectedCategory;\n\n            let matchesFilter = true;\n            if (selectedFilter === 'Low') {\n                matchesFilter = item.isLowStock;\n            } else if (selectedFilter === 'Out') {\n                matchesFilter = item.isOut;\n            } else if (selectedFilter === 'Ordered') {\n                matchesFilter = item.isOrdered;\n            }\n\n            return matchesSearch && matchesCategory && matchesFilter;\n        });\n    }, [inventoryData, searchQuery, selectedCategory, selectedFilter]);\n\n    const getFilterText = () => {\n        const count = filteredData.length;\n        if (selectedFilter === 'All') return `${count} items`;\n        if (selectedFilter === 'Low') return `${count} items (Low Stock)`;\n        if (selectedFilter === 'Out') return `${count} items (Out)`;\n        if (selectedFilter === 'Ordered') return `${count} items (Ordered)`;\n    };\n\n    const toggleFilter = (filter: keyof FilterState) => {\n        setSelectedFilter(selectedFilter === filter ? 'All' : filter);\n    };\n\n    return {\n        searchQuery,\n        setSearchQuery,\n        selectedCategory,\n        setSelectedCategory,\n        selectedFilter,\n        toggleFilter,\n        isSearchFocused,\n        setIsSearchFocused,\n        filteredData,\n        getFilterText,\n    };\n};\n","size_bytes":1998},"components/account/history/TransactionHistoryItem.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\n\ninterface Transaction {\n    id: string;\n    orderNumber: number;\n    date: Date;\n    amount: number;\n}\n\ninterface TransactionHistoryItemProps {\n    transaction: Transaction;\n    onPress?: (transaction: Transaction) => void;\n}\n\nexport const TransactionHistoryItem: React.FC<TransactionHistoryItemProps> = ({\n    transaction,\n    onPress,\n}) => {\n    const Component = onPress ? TouchableOpacity : View;\n\n    return (\n        <Component\n            className='flex-row justify-between items-center py-3 border-b border-gray-100'\n            onPress={() => onPress?.(transaction)}>\n            <View>\n                <Text className='font-medium text-gray-900'>Order #{transaction.orderNumber}</Text>\n                <Text className='text-xs text-gray-500 mt-1'>\n                    {transaction.date.toLocaleDateString()}{' '}\n                    {transaction.date.toLocaleTimeString([], {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    })}\n                </Text>\n            </View>\n            <Text className='font-semibold text-gray-900'>${transaction.amount.toFixed(2)}</Text>\n        </Component>\n    );\n};\n","size_bytes":1258},"components/ui/icon-symbol.tsx":{"content":"// Fallback for using MaterialIcons on Android and web.\n\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\nimport { SymbolViewProps, SymbolWeight } from 'expo-symbols';\nimport { ComponentProps } from 'react';\nimport { OpaqueColorValue, type StyleProp, type TextStyle } from 'react-native';\n\ntype IconMapping = Record<SymbolViewProps['name'], ComponentProps<typeof MaterialIcons>['name']>;\ntype IconSymbolName = keyof typeof MAPPING;\n\n/**\n * Add your SF Symbols to Material Icons mappings here.\n * - see Material Icons in the [Icons Directory](https://icons.expo.fyi).\n * - see SF Symbols in the [SF Symbols](https://developer.apple.com/sf-symbols/) app.\n */\n// prettier-ignore\nconst MAPPING = {\n  // Original icons\n  'house.fill': 'home',\n  'paperplane.fill': 'send',\n  'chevron.left.forwardslash.chevron.right': 'code',\n  'chevron.right': 'chevron-right',\n\n  // POS System icons\n  'magnifyingglass': 'search',\n  'cart': 'shopping-cart',\n  'cart.fill': 'shopping-cart',\n  'plus': 'add',\n  'plus.circle': 'add-circle',\n  'plus.circle.fill': 'add-circle',\n\n  // Tab navigation icons for POS\n  'creditcard': 'payment',\n  'creditcard.fill': 'payment',\n  'doc.text': 'description',\n  'doc.text.fill': 'description',\n  'cube.box': 'inventory',\n  'cube.box.fill': 'inventory',\n  'chart.bar': 'bar-chart',\n  'chart.bar.fill': 'bar-chart',\n  'chart.line.uptrend.xyaxis': 'trending-up',\n  'list.bullet': 'list',\n  'list.bullet.rectangle': 'list-alt',\n\n  // Additional useful POS icons\n  'dollarsign.circle': 'monetization-on',\n  'dollarsign.circle.fill': 'monetization-on',\n  'bag': 'shopping-bag',\n  'bag.fill': 'shopping-bag',\n  'receipt': 'receipt',\n  'printer': 'print',\n  'scanner': 'qr-code-scanner',\n  'creditcard.and.123': 'credit-card',\n  'banknote': 'money',\n  'person': 'person',\n  'person.fill': 'person',\n  'account.circle': 'account-circle',\n  'account.circle.fill': 'account-circle',\n  'gear': 'settings',\n  'gear.fill': 'settings',\n  'clock': 'schedule',\n  'clock.fill': 'schedule',\n  'checkmark.circle': 'check-circle',\n  'checkmark.circle.fill': 'check-circle',\n  'xmark.circle': 'cancel',\n  'xmark.circle.fill': 'cancel',\n  'info.circle': 'info',\n  'info.circle.fill': 'info',\n  'exclamationmark.triangle': 'warning',\n  'exclamationmark.triangle.fill': 'warning',\n} as unknown as IconMapping;\n\n/**\n * An icon component that uses native SF Symbols on iOS, and Material Icons on Android and web.\n * This ensures a consistent look across platforms, and optimal resource usage.\n * Icon `name`s are based on SF Symbols and require manual mapping to Material Icons.\n */\nexport function IconSymbol({\n\tname,\n\tsize = 24,\n\tcolor,\n\tstyle,\n}: {\n\tname: IconSymbolName;\n\tsize?: number;\n\tcolor: string | OpaqueColorValue;\n\tstyle?: StyleProp<TextStyle>;\n\tweight?: SymbolWeight;\n}) {\n\treturn <MaterialIcons color={color} size={size} name={MAPPING[name]} style={style} />;\n}\n","size_bytes":2878},"app/(tabs)/credit/credit-details.tsx":{"content":"import React from 'react';\nimport { ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router, useLocalSearchParams } from 'expo-router';\nimport { Customer } from '@/types';\n\nimport { MOCK_TRANSACTIONS } from '@/constants/transactions';\nimport { CustomerDetailHeader } from '@/components/credit/details/CustomerDetailHeader';\nimport { CreditOverviewCard } from '@/components/credit/details/CreditOverviewCard';\nimport { TransactionHistory } from '@/components/credit/transaction/TransactionHistory';\n\nconst CustomerCreditDetailScreen: React.FC = () => {\n\t// Get customer data from route params\n\tconst params = useLocalSearchParams();\n\n\t// Parse customer data from params\n\tconst customer: Customer = {\n\t\tid: params.customerId as string,\n\t\tfirstName: params.firstName as string,\n\t\tlastName: params.lastName as string,\n\t\tphoneNumber: params.phoneNumber as string,\n\t\tamount: parseFloat(params.amount as string),\n\t\tdueDate: params.dueDate as string,\n\t\trating: params.rating as 'Low' | 'Medium' | 'Good',\n\t\tdaysLeft: parseInt(params.daysLeft as string),\n\t};\n\n\tconst fullName = `${customer.firstName} ${customer.lastName}`;\n\n\t// Calculate totals from transactions\n\tconst totalCredits = MOCK_TRANSACTIONS.filter((t) => t.amount < 0).reduce(\n\t\t(sum, t) => sum + Math.abs(t.amount),\n\t\t0,\n\t);\n\n\tconst totalPayments = MOCK_TRANSACTIONS.filter((t) => t.amount > 0).reduce(\n\t\t(sum, t) => sum + t.amount,\n\t\t0,\n\t);\n\n\tconst handleBack = () => {\n\t\trouter.back();\n\t};\n\n\tconst handleDelete = () => {\n\t\tconsole.log('Delete customer:', customer.id);\n\t\t// Show confirmation dialog, then delete\n\t\t// TODO: Implement delete logic\n\t\trouter.back();\n\t};\n\n\tconst handleTransactionPress = (transaction: any) => {\n\t\t// Navigate to transaction detail screen\n\t\trouter.push({\n\t\t\tpathname: '/credit/credit-transaction',\n\t\t\tparams: {\n\t\t\t\ttransactionId: transaction.id,\n\t\t\t\ttype: transaction.type,\n\t\t\t\tdate: transaction.date,\n\t\t\t\tamount: transaction.amount.toString(),\n\t\t\t\tcustomerId: customer.id,\n\t\t\t\tcustomerName: fullName,\n\t\t\t},\n\t\t});\n\t};\n\n\treturn (\n\t\t<SafeAreaView className='flex-1 bg-gray-50'>\n\t\t\t<CustomerDetailHeader\n\t\t\t\tcustomerName={fullName}\n\t\t\t\tphoneNumber={customer.phoneNumber}\n\t\t\t\trating={customer.rating}\n\t\t\t\tonBack={handleBack}\n\t\t\t\tonDelete={handleDelete}\n\t\t\t/>\n\n\t\t\t<ScrollView className='flex-1'>\n\t\t\t\t<CreditOverviewCard\n\t\t\t\t\tcurrentBalance={customer.amount}\n\t\t\t\t\ttotalCredits={totalCredits}\n\t\t\t\t\ttotalPayments={totalPayments}\n\t\t\t\t\tdueDate={customer.dueDate}\n\t\t\t\t\tdaysLeft={customer.daysLeft}\n\t\t\t\t/>\n\n\t\t\t\t<TransactionHistory\n\t\t\t\t\ttransactions={MOCK_TRANSACTIONS}\n\t\t\t\t\tonTransactionPress={handleTransactionPress}\n\t\t\t\t/>\n\t\t\t</ScrollView>\n\t\t</SafeAreaView>\n\t);\n};\n\nexport default CustomerCreditDetailScreen;\n","size_bytes":2741},"db/index.ts":{"content":"import { Database } from '@nozbe/watermelondb';\nimport LokiJSAdapter from '@nozbe/watermelondb/adapters/lokijs';\n\nimport Business from './models/business';\nimport Category from './models/categories';\nimport Customer from './models/customers';\nimport Inventory from './models/inventory';\nimport InventoryBatch from './models/inventory_batches';\nimport Product from './models/products';\nimport Role from './models/roles';\nimport Sale from './models/sales';\nimport SaleItem from './models/sales_items';\nimport Session from './models/sessions';\nimport Staff from './models/staff';\nimport Store from './models/stores';\nimport User from './models/users';\nimport schema from './schema';\n\nexport {\n    Business,\n    Category,\n    Customer,\n    Inventory,\n    InventoryBatch,\n    Product,\n    Role,\n    Sale,\n    SaleItem,\n    Session,\n    Staff,\n    Store,\n    User,\n};\n\n// First, create the adapter to the underlying database:\nconst adapter = new LokiJSAdapter({\n    schema,\n    useWebWorker: false,\n    useIncrementalIndexedDB: true,\n    dbName: 'pos',\n    onSetUpError: (error) => {\n        console.error('Database setup failed', error);\n    },\n});\n\n// Then, make a Watermelon database from it\nexport const database = new Database({\n    adapter,\n    modelClasses: [\n        User,\n        Session,\n        Business,\n        Store,\n        Role,\n        Staff,\n        Category,\n        Product,\n        Inventory,\n        InventoryBatch,\n        Customer,\n        Sale,\n        SaleItem,\n    ],\n    // actionsEnabled: true,\n});\n\nexport const storeCollection = database.collections.get<Store>('stores');\nexport const userCollection = database.collections.get<User>('users');\nexport const sessionCollection = database.collections.get<Session>('sessions');\nexport const categoriesCollection = database.collections.get<Category>('categories');\nexport const salesCollection = database.collections.get<Sale>('sales');\nexport const saleItemsCollection = database.collections.get<SaleItem>('sales_items');\nexport const customersCollection = database.collections.get<Customer>('customers');\nexport const productsCollection = database.collections.get<Product>('products');\nexport const inventoryCollection = database.collections.get<Inventory>('inventory');\nexport const inventoryBatchesCollection =\n    database.collections.get<InventoryBatch>('inventory_batches');\nexport const staffCollection = database.collections.get<Staff>('staff');\nexport const businessCollection = database.collections.get<Business>('businesses');\nexport const roleCollection = database.collections.get<Role>('roles');\n","size_bytes":2579},"components/common/QuantityControls.tsx":{"content":"import React from 'react';\nimport { Text, View } from 'react-native';\nimport { Minus, Plus } from 'lucide-react-native';\nimport { ActionButton } from '../ui/ActionButton';\n\nexport const QuantityControls: React.FC<{\n  quantity: number;\n  onIncrease: () => void;\n  onDecrease: () => void;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  variant?: 'primary' | 'secondary';\n}> = ({\n  quantity,\n  onIncrease,\n  onDecrease,\n  size = 'sm',\n  variant = 'primary'\n}) => {\n  const textSizeClass = {\n    xs: 'text-xs',\n    sm: 'text-sm', \n    md: 'text-base',\n    lg: 'text-lg'\n  }[size];\n\n  const quantityWidthClass = {\n    xs: 'w-8',\n    sm: 'w-10',\n    md: 'w-12',\n    lg: 'w-16'\n  }[size];\n\n  const heightClass = {\n    xs: 'h-6',\n    sm: 'h-8',\n    md: 'h-10',\n    lg: 'h-12'\n  }[size];\n\n  // Border radius based on size - more subtle rounding\n  const borderRadiusClass = {\n    xs: 'rounded-md', // 6px\n    sm: 'rounded-lg', // 8px\n    md: 'rounded-xl', // 12px\n    lg: 'rounded-2xl' // 16px\n  }[size];\n\n  // Background colors for the middle section based on variant\n  const quantityBgClass = variant === 'primary' ? 'bg-gray-900' : 'bg-white';\n  const quantityTextClass = variant === 'primary' ? 'text-white' : 'text-gray-700';\n\n  return (\n    <View className={`flex-row items-center ${borderRadiusClass} overflow-hidden`}>\n      {/* Decrease Button - Left side rounded */}\n      <ActionButton\n        icon={Minus}\n        iconPosition=\"only\"\n        onPress={onDecrease}\n        variant={variant}\n        size={size}\n        shape=\"rectangle\"\n        disabled={quantity <= 0}\n        className=\"rounded-none\" // Remove all rounding, let container handle it\n      />\n      \n      {/* Quantity Display - Middle section */}\n      <View \n        className={`${heightClass} ${quantityWidthClass} ${quantityBgClass} items-center justify-center`}\n        style={{\n          borderLeftWidth: 1,\n          borderRightWidth: 1,\n          borderColor: '#696a6bff' // gray-200\n        }}\n      >\n        <Text className={`${textSizeClass} font-medium ${quantityTextClass}`}>\n          {quantity}\n        </Text>\n      </View>\n      \n      {/* Increase Button - Right side rounded */}\n      <ActionButton\n        icon={Plus}\n        iconPosition=\"only\"\n        onPress={onIncrease}\n        variant={variant}\n        size={size}\n        shape=\"rectangle\"\n        className=\"rounded-none\" \n      />\n    </View>\n  );\n};","size_bytes":2388},"components/inventory/modal/EditInventoryModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n\tModal,\n\tView,\n\tText,\n\tTextInput,\n\tTouchableOpacity,\n\tKeyboardAvoidingView,\n\tPlatform,\n\tScrollView,\n} from 'react-native';\nimport { X, Trash2 } from 'lucide-react-native';\nimport { ActionButton } from '@/components/ui/ActionButton';\nimport { Category, Product } from '@/types';\n\ninterface EditInventoryModalProps {\n\tvisible: boolean;\n\titem: Product | null;\n\tonClose: () => void;\n\tonSave: (item: Product) => void;\n\tonDelete: (itemId: string) => void;\n\tavailableCategories: Category[];\n}\n\nexport const EditInventoryModal: React.FC<EditInventoryModalProps> = ({\n\tvisible,\n\titem,\n\tonClose,\n\tonSave,\n\tonDelete,\n\tavailableCategories,\n}) => {\n\tconst [formData, setFormData] = useState<Product>({\n\t\tid: '',\n\t\tname: '',\n\t\tbrand: '',\n\t\tcategory: '',\n\t\tsize: '',\n\t\tunit: '',\n\t\tstock: 0,\n\t\tminimumAlert: 0,\n\t\tpurchasePrice: 0,\n\t\tprice: 0,\n\t});\n\n\tconst [isSubmitting, setIsSubmitting] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (item) {\n\t\t\tsetFormData(item);\n\t\t}\n\t}, [item]);\n\n\tconst resetForm = () => {\n\t\tsetFormData({\n\t\t\tid: '',\n\t\t\tname: '',\n\t\t\tbrand: '',\n\t\t\tcategory: '',\n\t\t\tsize: '',\n\t\t\tunit: '',\n\t\t\tstock: 0,\n\t\t\tminimumAlert: 0,\n\t\t\tpurchasePrice: 0,\n\t\t\tprice: 0,\n\t\t});\n\t\tsetIsSubmitting(false);\n\t};\n\n\tconst handleClose = () => {\n\t\tresetForm();\n\t\tonClose();\n\t};\n\n\tconst handleSave = async () => {\n\t\tif (!formData.name.trim() || !formData.category.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetIsSubmitting(true);\n\n\t\ttry {\n\t\t\tonSave(formData);\n\t\t\tresetForm();\n\t\t\tonClose();\n\t\t} catch (error) {\n\t\t\tconsole.error('Error saving item:', error);\n\t\t} finally {\n\t\t\tsetIsSubmitting(false);\n\t\t}\n\t};\n\n\tconst handleDelete = () => {\n\t\tif (item?.id) {\n\t\t\tonDelete(item.id);\n\t\t\thandleClose();\n\t\t}\n\t};\n\n\tconst updateField = (field: keyof Product, value: any) => {\n\t\tsetFormData((prev) => ({ ...prev, [field]: value }));\n\t};\n\n\tconst isFormValid = formData.name.trim() && formData.category.trim();\n\n\treturn (\n\t\t<Modal visible={visible} transparent animationType='fade' onRequestClose={handleClose}>\n\t\t\t<View className='flex-1 bg-black/50 justify-center items-center p-4'>\n\t\t\t\t<KeyboardAvoidingView\n\t\t\t\t\tbehavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n\t\t\t\t\tclassName='w-full max-w-md'>\n\t\t\t\t\t<View className='bg-white rounded-2xl p-6 w-full'>\n\t\t\t\t\t\t{/* Header */}\n\t\t\t\t\t\t<View className='flex-row items-center justify-between mb-2'>\n\t\t\t\t\t\t\t<Text className='text-lg font-semibold text-gray-900'>\n\t\t\t\t\t\t\t\tEdit Inventory Item\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\t\t\tonPress={handleClose}\n\t\t\t\t\t\t\t\tclassName='p-1'\n\t\t\t\t\t\t\t\thitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}>\n\t\t\t\t\t\t\t\t<X size={20} color='#6B7280' />\n\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t<Text className='text-sm text-gray-500 mb-4'>\n\t\t\t\t\t\t\tUpdate the details of this inventory item.\n\t\t\t\t\t\t</Text>\n\n\t\t\t\t\t\t<ScrollView showsVerticalScrollIndicator={false} className='max-h-96'>\n\t\t\t\t\t\t\t{/* Product Name */}\n\t\t\t\t\t\t\t<View className='mb-4'>\n\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\tProduct Name <Text className='text-red-500'>*</Text>\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\tvalue={formData.name}\n\t\t\t\t\t\t\t\t\tonChangeText={(text) => updateField('name', text)}\n\t\t\t\t\t\t\t\t\tplaceholder='Enter product name'\n\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\tclassName='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\tautoCapitalize='words'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t{/* Brand */}\n\t\t\t\t\t\t\t<View className='mb-4'>\n\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\tBrand\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\tvalue={formData.brand}\n\t\t\t\t\t\t\t\t\tonChangeText={(text) => updateField('brand', text)}\n\t\t\t\t\t\t\t\t\tplaceholder='Enter brand'\n\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\tclassName='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\tautoCapitalize='words'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t{/* Category */}\n\t\t\t\t\t\t\t<View className='mb-4'>\n\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\tCategory <Text className='text-red-500'>*</Text>\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t<View className='flex-row items-center'>\n\t\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\t\tvalue={formData.category}\n\t\t\t\t\t\t\t\t\t\tonChangeText={(text) => updateField('category', text)}\n\t\t\t\t\t\t\t\t\t\tplaceholder='Enter category'\n\t\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\t\tclassName='flex-1 bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<TouchableOpacity className='ml-2 w-10 h-10 bg-gray-900 rounded-lg items-center justify-center'>\n\t\t\t\t\t\t\t\t\t\t<Text className='text-white text-lg'>+</Text>\n\t\t\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t{/* Size/Quantity and Unit Row */}\n\t\t\t\t\t\t\t<View className='flex-row mb-4'>\n\t\t\t\t\t\t\t\t<View className='flex-1 mr-2'>\n\t\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\t\tSize/Quantity\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\t\tvalue={formData.size}\n\t\t\t\t\t\t\t\t\t\tonChangeText={(text) => updateField('size', text)}\n\t\t\t\t\t\t\t\t\t\tplaceholder='400g'\n\t\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\t\tclassName='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t<View className='flex-1 ml-2'>\n\t\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\t\tUnit\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\t\tvalue={formData.unit}\n\t\t\t\t\t\t\t\t\t\tonChangeText={(text) => updateField('unit', text)}\n\t\t\t\t\t\t\t\t\t\tplaceholder='loaves'\n\t\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\t\tclassName='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t{/* Stock Level and Minimum Alert Row */}\n\t\t\t\t\t\t\t<View className='flex-row mb-4'>\n\t\t\t\t\t\t\t\t<View className='flex-1 mr-2'>\n\t\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\t\tStock Level\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\t\tvalue={String(formData.stock)}\n\t\t\t\t\t\t\t\t\t\tonChangeText={(text) =>\n\t\t\t\t\t\t\t\t\t\t\tupdateField('stock', parseInt(text) || 0)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tplaceholder='3'\n\t\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\t\tkeyboardType='numeric'\n\t\t\t\t\t\t\t\t\t\tclassName='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t<View className='flex-1 ml-2'>\n\t\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\t\tMinimum Alert\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\t\tvalue={String(formData.minimumAlert)}\n\t\t\t\t\t\t\t\t\t\tonChangeText={(text) =>\n\t\t\t\t\t\t\t\t\t\t\tupdateField('minimumAlert', parseInt(text) || 0)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tplaceholder='5'\n\t\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\t\tkeyboardType='numeric'\n\t\t\t\t\t\t\t\t\t\tclassName='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t{/* Purchase Price and Sell Price Row */}\n\t\t\t\t\t\t\t<View className='flex-row mb-6'>\n\t\t\t\t\t\t\t\t<View className='flex-1 mr-2'>\n\t\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\t\tPurchase Price ($)\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\t\tvalue={String(formData.purchasePrice)}\n\t\t\t\t\t\t\t\t\t\tonChangeText={(text) =>\n\t\t\t\t\t\t\t\t\t\t\tupdateField('purchasePrice', parseFloat(text) || 0)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tplaceholder='0'\n\t\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\t\tkeyboardType='decimal-pad'\n\t\t\t\t\t\t\t\t\t\tclassName='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t<View className='flex-1 ml-2'>\n\t\t\t\t\t\t\t\t\t<Text className='text-sm font-medium text-gray-900 mb-2'>\n\t\t\t\t\t\t\t\t\t\tSell Price ($)\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\t\t\tvalue={String(formData.price)}\n\t\t\t\t\t\t\t\t\t\tonChangeText={(text) =>\n\t\t\t\t\t\t\t\t\t\t\tupdateField('price', parseFloat(text) || 0)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tplaceholder='2.99'\n\t\t\t\t\t\t\t\t\t\tplaceholderTextColor='#9CA3AF'\n\t\t\t\t\t\t\t\t\t\tkeyboardType='decimal-pad'\n\t\t\t\t\t\t\t\t\t\tclassName='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t{/* Action Buttons */}\n\t\t\t\t\t\t\t<View className='flex-row space-x-2'>\n\t\t\t\t\t\t\t\t<ActionButton\n\t\t\t\t\t\t\t\t\ttext='Cancel'\n\t\t\t\t\t\t\t\t\tonPress={handleClose}\n\t\t\t\t\t\t\t\t\tvariant='ghost'\n\t\t\t\t\t\t\t\t\tsize='md'\n\t\t\t\t\t\t\t\t\tclassName='flex-1 mr-1'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ActionButton\n\t\t\t\t\t\t\t\t\ttext='Delete'\n\t\t\t\t\t\t\t\t\ticon={Trash2}\n\t\t\t\t\t\t\t\t\tonPress={handleDelete}\n\t\t\t\t\t\t\t\t\tvariant='danger'\n\t\t\t\t\t\t\t\t\tsize='md'\n\t\t\t\t\t\t\t\t\tclassName='flex-1 mr-2'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ActionButton\n\t\t\t\t\t\t\t\t\ttext='Save Changes'\n\t\t\t\t\t\t\t\t\tonPress={handleSave}\n\t\t\t\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\t\t\t\tsize='md'\n\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\tclassName='flex-1 mr-5'\n\t\t\t\t\t\t\t\t\tdisabled={!isFormValid}\n\t\t\t\t\t\t\t\t\tloading={isSubmitting}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</ScrollView>\n\t\t\t\t\t</View>\n\t\t\t\t</KeyboardAvoidingView>\n\t\t\t</View>\n\t\t</Modal>\n\t);\n};\n","size_bytes":8825},"hooks/usePaymentMethods.ts":{"content":"import { PaymentMethod } from '@/types';\nimport { CreditCard, DollarSign, Smartphone } from 'lucide-react-native';\nimport { useRef, useState } from 'react';\nimport { Animated } from 'react-native';\n\nexport const usePaymentMethods = () => {\n    const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('cash');\n    const [showStoreCreditForm, setShowStoreCreditForm] = useState(false);\n    const [creditAmount, setCreditAmount] = useState('');\n\n    // Animation values\n    const storeCreditFormHeight = useRef(new Animated.Value(0)).current;\n    const storeCreditOpacity = useRef(new Animated.Value(0)).current;\n\n    const paymentMethods: PaymentMethod[] = [\n        {\n            id: 'mpesa',\n            name: 'M-Pesa',\n            description: 'Pay with mobile money',\n            icon: Smartphone,\n            color: '#fdfdfdff',\n            bgColor: '#0fb94bff',\n        },\n        {\n            id: 'store-credit',\n            name: 'Store Credit',\n            description: 'Use customer credit',\n            icon: CreditCard,\n            color: '#fdfdfdff',\n            bgColor: '#4687dbff',\n        },\n        {\n            id: 'cash',\n            name: 'Cash',\n            description: 'Cash payment',\n            icon: DollarSign,\n            color: '#f3f3f3ff',\n            bgColor: '#f5880cff',\n        },\n    ];\n\n    const handlePaymentMethodSelect = (methodId: string) => {\n        setSelectedPaymentMethod(methodId);\n\n        if (methodId === 'store-credit') {\n            setShowStoreCreditForm(true);\n            // Animate form appearance\n            Animated.parallel([\n                Animated.timing(storeCreditFormHeight, {\n                    toValue: 200,\n                    duration: 300,\n                    useNativeDriver: false,\n                }),\n                Animated.timing(storeCreditOpacity, {\n                    toValue: 1,\n                    duration: 300,\n                    useNativeDriver: false,\n                }),\n            ]).start();\n        } else {\n            setShowStoreCreditForm(false);\n            // Animate form disappearance\n            Animated.parallel([\n                Animated.timing(storeCreditFormHeight, {\n                    toValue: 0,\n                    duration: 300,\n                    useNativeDriver: false,\n                }),\n                Animated.timing(storeCreditOpacity, {\n                    toValue: 0,\n                    duration: 300,\n                    useNativeDriver: false,\n                }),\n            ]).start();\n        }\n    };\n\n    return {\n        paymentMethods,\n        selectedPaymentMethod,\n        showStoreCreditForm,\n        creditAmount,\n        setCreditAmount,\n        storeCreditFormHeight,\n        storeCreditOpacity,\n        handlePaymentMethodSelect,\n    };\n};\n","size_bytes":2802},"components/checkout/StoreCreditForm.tsx":{"content":"import React, { useState } from 'react';\nimport { Animated, View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { Search, User, UserPlus } from 'lucide-react-native';\nimport { Customer } from '@/types';\nimport { AddCustomerModal } from './modal/AddCustomerModal';\n\ninterface StoreCreditFormProps {\n  creditAmount: string;\n  onCreditAmountChange: (amount: string) => void;\n  maxCredit: number;\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  isSearchFocused: boolean;\n  onSearchFocus: () => void;\n  onSearchBlur: () => void;\n  height: Animated.Value;\n  opacity: Animated.Value;\n}\n\nexport const StoreCreditForm: React.FC<StoreCreditFormProps> = ({\n  creditAmount,\n  onCreditAmountChange,\n  maxCredit,\n  searchQuery,\n  onSearchChange,\n  isSearchFocused,\n  onSearchFocus,\n  onSearchBlur,\n  height,\n  opacity\n}) => {\n\n const [showAddCustomerModal, setShowAddCustomerModal] = useState(false);\n\n  const handleAddCustomer = (customer: Customer) => {\n    console.log('New customer added:', customer);\n    // You can handle the new customer data here\n    // For example, add to a customer list or send to API\n  };\n  return (\n    <>\n    <Animated.View\n      style={{\n        height: height,\n        opacity: opacity,\n        overflow: 'hidden',\n      }}\n    >\n      <View className=\"bg-gray-50 mx-4 rounded-xl p-4 mb-3\">\n        <Text className=\"text-sm font-medium text-gray-900 mb-2\">\n          Amount to pay on credit\n        </Text>\n        \n        <View className=\"mb-4\">\n          <View className=\"bg-white rounded-lg px-3 py-2 mb-1 border border-gray-200\">\n            <View className=\"flex-row items-center\">\n              <Text className=\"text-gray-500 text-sm mr-1\">$</Text>\n              <TextInput\n                value={creditAmount}\n                onChangeText={onCreditAmountChange}\n                placeholder=\"0.00\"\n                placeholderTextColor=\"#9CA3AF\"\n                keyboardType=\"decimal-pad\"\n                className=\"text-lg font-medium text-gray-900 flex-1\"\n              />\n            </View>\n          </View>\n          <Text className=\"text-gray-400 text-xs ml-1\">\n            Maximum: ${maxCredit.toFixed(2)}\n          </Text>\n        </View>\n\n        <View className=\"flex-row items-center justify-between mb-2\">\n          <Text className=\"text-sm font-medium text-gray-900\">\n            Search for customer\n          </Text>\n          \n          <TouchableOpacity className=\"flex-row items-center bg-white border border-gray-200 rounded-lg px-2 py-1\"\n           onPress={() => setShowAddCustomerModal(true)}\n          >\n            <UserPlus size={12} color=\"#6B7280\" />\n            <Text className=\"text-gray-600 text-xs font-medium ml-1\">\n              New Customer\n            </Text>\n          </TouchableOpacity>\n        </View>\n        \n        <View className=\"bg-white rounded-lg px-3 py-2 border border-gray-200 flex-row items-center\">\n          <Search size={16} color=\"#9CA3AF\" />\n          <TextInput\n            placeholder=\"Search by name or phone...\"\n            className=\"flex-1 ml-2 text-gray-700 text-sm\"\n            placeholderTextColor=\"#9CA3AF\"\n            value={searchQuery}\n            onChangeText={onSearchChange}\n            onFocus={onSearchFocus}\n            onBlur={onSearchBlur}\n          />\n        </View>\n      </View>\n    </Animated.View>\n    <AddCustomerModal\n        visible={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAddCustomer={handleAddCustomer}\n      />\n\n      </>\n  );\n};\n","size_bytes":3531},"hooks/useStoreEdit.ts":{"content":"import { StoreData } from '@/types';\nimport { useCallback, useEffect, useState } from 'react';\n\ninterface EditableStoreData {\n    name: string;\n    type: string;\n    phone: string;\n    email: string;\n    address: string;\n    description: string;\n    weekdayHours: string;\n    weekendHours: string;\n}\n\nexport const useStoreEdit = (initialData: StoreData, externalId?: string) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [storeData, setStoreData] = useState<StoreData>(initialData);\n    const [editedData, setEditedData] = useState<EditableStoreData>({\n        name: initialData.name,\n        type: initialData.type,\n        phone: initialData.phone,\n        email: initialData.email,\n        address: initialData.address,\n        description: initialData.description,\n        weekdayHours: initialData.businessHours?.weekdays ?? '',\n        weekendHours: initialData.businessHours?.weekend ?? '',\n    });\n\n    // Reset edited data when initial data changes\n    useEffect(() => {\n        setStoreData(initialData);\n        setEditedData({\n            name: initialData.name,\n            type: initialData.type,\n            phone: initialData.phone,\n            email: initialData.email,\n            address: initialData.address,\n            description: initialData.description,\n            weekdayHours: initialData.businessHours?.weekdays ?? '',\n            weekendHours: initialData.businessHours?.weekend ?? '',\n        });\n    }, [initialData]);\n\n    const handleEdit = useCallback(() => {\n        setIsEditing(true);\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        setIsEditing(false);\n        setEditedData({\n            name: storeData.name,\n            type: storeData.type,\n            phone: storeData.phone,\n            email: storeData.email,\n            address: storeData.address,\n            description: storeData.description,\n            weekdayHours: storeData.businessHours?.weekdays ?? '',\n            weekendHours: storeData.businessHours?.weekend ?? '',\n        });\n    }, [storeData]);\n\n    const handleSaveChanges = useCallback(async () => {\n        console.log('💾 Saving changes for externalId:', externalId, editedData);\n        try {\n            // TODO: Update store in database using externalId\n            // await updateStoreById(externalId, editedData);\n\n            // Update local state\n            setStoreData({\n                ...storeData,\n                name: editedData.name,\n                type: editedData.type,\n                phone: editedData.phone,\n                email: editedData.email,\n                address: editedData.address,\n                description: editedData.description,\n                businessHours: {\n                    weekdays: editedData.weekdayHours,\n                    weekend: editedData.weekendHours,\n                },\n            });\n            setIsEditing(false);\n            console.log('✅ Changes saved successfully');\n            return true;\n        } catch (error) {\n            console.error('❌ Error saving changes:', error);\n            return false;\n        }\n    }, [externalId, editedData, storeData]);\n\n    const updateField = useCallback((field: keyof EditableStoreData, value: string) => {\n        setEditedData((prev) => ({ ...prev, [field]: value }));\n    }, []);\n\n    return {\n        isEditing,\n        storeData,\n        editedData,\n        setIsEditing,\n        handleEdit,\n        handleCancel,\n        handleSaveChanges,\n        updateField,\n    };\n};\n","size_bytes":3506},"hooks/useProducts.ts":{"content":"import { useState, useCallback, useMemo } from 'react';\nimport { Product, CartItem } from '@/types';\nimport { SAMPLE_PRODUCTS } from '@/constants/sampleProducts';\n\nexport const useProducts = (\n\tcategoryName: string,\n\texistingCart: CartItem[] = [],\n\tonCartUpdate?: (cartItems: CartItem[]) => void,\n) => {\n\t// Initialize products with existing cart quantities\n\tconst initializeProductsWithCart = useCallback(\n\t\t(products: Product[], cart: CartItem[]): Product[] => {\n\t\t\treturn products.map((product) => {\n\t\t\t\tconst cartItem = cart.find((item) => item.id === product.id);\n\t\t\t\treturn {\n\t\t\t\t\t...product,\n\t\t\t\t\tinCart: cartItem ? cartItem.quantity : 0,\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t\t[],\n\t);\n\n\tconst categoryProducts = useMemo(\n\t\t() => SAMPLE_PRODUCTS.filter((product) => product.category === categoryName),\n\t\t[categoryName],\n\t);\n\n\tconst [productList, setProductList] = useState<Product[]>(() =>\n\t\tinitializeProductsWithCart(categoryProducts, existingCart),\n\t);\n\n\tconst updateProductQuantity = useCallback(\n\t\t(productId: string, newQuantity: number) => {\n\t\t\tsetProductList((prev) => {\n\t\t\t\tconst updatedProducts = prev.map((product) =>\n\t\t\t\t\tproduct.id === productId\n\t\t\t\t\t\t? { ...product, inCart: Math.max(0, newQuantity) }\n\t\t\t\t\t\t: product,\n\t\t\t\t);\n\n\t\t\t\t// Update global cart when local cart changes\n\t\t\t\tif (onCartUpdate) {\n\t\t\t\t\tconst cartItems = updatedProducts\n\t\t\t\t\t\t.filter((p) => (p.inCart || 0) > 0)\n\t\t\t\t\t\t.map((p) => ({\n\t\t\t\t\t\t\tid: p.id,\n\t\t\t\t\t\t\tname: p.name,\n\t\t\t\t\t\t\tprice: p.price,\n\t\t\t\t\t\t\tquantity: p.inCart || 0,\n\t\t\t\t\t\t}));\n\t\t\t\t\tonCartUpdate(cartItems);\n\t\t\t\t}\n\n\t\t\t\treturn updatedProducts;\n\t\t\t});\n\t\t},\n\t\t[onCartUpdate],\n\t);\n\n\tconst addToCart = useCallback(\n\t\t(product: Product) => {\n\t\t\tupdateProductQuantity(product.id, (product.inCart || 0) + 1);\n\t\t},\n\t\t[updateProductQuantity],\n\t);\n\n\tconst removeFromCart = useCallback(\n\t\t(product: Product) => {\n\t\t\tupdateProductQuantity(product.id, (product.inCart || 0) - 1);\n\t\t},\n\t\t[updateProductQuantity],\n\t);\n\n\tconst filteredProducts = useMemo(\n\t\t() => (searchQuery: string) =>\n\t\t\tproductList.filter(\n\t\t\t\t(product) =>\n\t\t\t\t\tproduct.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n\t\t\t\t\tproduct.brand?.toLowerCase().includes(searchQuery.toLowerCase()),\n\t\t\t),\n\t\t[productList],\n\t);\n\n\tconst cartTotals = useMemo(() => {\n\t\tconst totalItems = productList.reduce((sum, product) => sum + (product.inCart || 0), 0);\n\t\tconst totalPrice = productList.reduce(\n\t\t\t(sum, product) => sum + product.price * (product.inCart || 0),\n\t\t\t0,\n\t\t);\n\t\treturn { totalItems, totalPrice };\n\t}, [productList]);\n\n\tconst getCartItems = useCallback(\n\t\t() => productList.filter((p) => (p.inCart || 0) > 0),\n\t\t[productList],\n\t);\n\n\treturn {\n\t\tproductList,\n\t\taddToCart,\n\t\tremoveFromCart,\n\t\tfilteredProducts,\n\t\tcartTotals,\n\t\tgetCartItems,\n\t};\n};\n","size_bytes":2742},"constants/sampleProducts.ts":{"content":"import { Product } from '@/types'; // doesnt represnt schema type\n\n// Note : this is test data and will be deleted\n\nexport const SAMPLE_PRODUCTS: Product[] = [\n    // Beverages\n    {\n        id: '1',\n        name: 'Coca Cola',\n        brand: 'Coca-Cola',\n        code: 'BEV-001',\n        category: 'Beverages',\n        price: 2.5,\n        stock: 24,\n        unit: 'pcs',\n        size: '500ml',\n        lowStockThreshold: 10,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '24 pcs',\n        description: 'Classic Coca Cola soft drink',\n        inCart: 0,\n    },\n    {\n        id: '2',\n        name: 'Sprite',\n        brand: 'Coca-Cola',\n        code: 'BEV-002',\n        category: 'Beverages',\n        price: 2.5,\n        stock: 18,\n        unit: 'pcs',\n        size: '500ml',\n        lowStockThreshold: 10,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '18 pcs',\n        description: 'Lemon-lime flavored soft drink',\n        inCart: 0,\n    },\n    {\n        id: '3',\n        name: 'Fanta Orange',\n        brand: 'Coca-Cola',\n        code: 'BEV-003',\n        category: 'Beverages',\n        price: 2.3,\n        stock: 20,\n        unit: 'pcs',\n        size: '500ml',\n        lowStockThreshold: 10,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '20 pcs',\n        description: 'Orange flavored soft drink',\n        inCart: 1,\n    },\n    {\n        id: '4',\n        name: \"Lay's Classic\",\n        brand: \"Lay's\",\n        code: 'SNK-001',\n        category: 'Snacks',\n        price: 1.99,\n        stock: 30,\n        unit: 'pcs',\n        size: '150g',\n        lowStockThreshold: 15,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '30 pcs',\n        description: 'Original salted potato chips',\n        inCart: 0,\n    },\n    {\n        id: '5',\n        name: 'Doritos Nacho',\n        brand: 'Doritos',\n        code: 'SNK-002',\n        category: 'Snacks',\n        price: 2.25,\n        stock: 15,\n        unit: 'pcs',\n        size: '200g',\n        lowStockThreshold: 15,\n        isLowStock: true,\n        isOut: false,\n        quantityText: '15 pcs',\n        description: 'Nacho cheese flavored tortilla chips',\n        inCart: 0,\n    },\n    {\n        id: '6',\n        name: 'Fresh Milk',\n        brand: 'Dairy Farm',\n        code: 'DRY-001',\n        category: 'Dairy',\n        price: 3.5,\n        stock: 12,\n        unit: 'ltr',\n        size: '1L',\n        lowStockThreshold: 10,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '12 ltr',\n        description: 'Fresh whole milk',\n        inCart: 0,\n    },\n    {\n        id: '7',\n        name: 'Greek Yogurt',\n        brand: 'Chobani',\n        code: 'DRY-002',\n        category: 'Dairy',\n        price: 4.25,\n        stock: 8,\n        unit: 'pcs',\n        size: '500g',\n        lowStockThreshold: 10,\n        isLowStock: true,\n        isOut: false,\n        quantityText: '8 pcs',\n        description: 'Plain Greek yogurt',\n        inCart: 0,\n    },\n    {\n        id: '8',\n        name: 'White Bread',\n        brand: 'Wonder',\n        code: 'BKY-001',\n        category: 'Bakery',\n        price: 2.99,\n        stock: 20,\n        unit: 'pcs',\n        size: '750g',\n        lowStockThreshold: 10,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '20 pcs',\n        description: 'Soft white sandwich bread',\n        inCart: 0,\n    },\n    {\n        id: '9',\n        name: 'Red Apples',\n        brand: 'Fresh Farm',\n        code: 'FRT-001',\n        category: 'Fruits',\n        price: 4.5,\n        stock: 25,\n        unit: 'kg',\n        size: '1kg',\n        lowStockThreshold: 15,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '25 kg',\n        description: 'Fresh red apples',\n        inCart: 0,\n    },\n    {\n        id: '10',\n        name: 'Bananas',\n        brand: 'Fresh Farm',\n        code: 'FRT-002',\n        category: 'Fruits',\n        price: 2.99,\n        stock: 30,\n        unit: 'kg',\n        size: '1kg',\n        lowStockThreshold: 15,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '30 kg',\n        description: 'Fresh ripe bananas',\n        inCart: 0,\n    },\n    {\n        id: '11',\n        name: 'Carrots',\n        brand: 'Garden Fresh',\n        code: 'VEG-001',\n        category: 'Vegetables',\n        price: 1.99,\n        stock: 40,\n        unit: 'kg',\n        size: '1kg',\n        lowStockThreshold: 20,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '40 kg',\n        description: 'Fresh organic carrots',\n        inCart: 0,\n    },\n    {\n        id: '12',\n        name: 'Chicken Breast',\n        brand: 'Farm Fresh',\n        code: 'MET-001',\n        category: 'Meat',\n        price: 8.99,\n        stock: 15,\n        unit: 'kg',\n        size: '1kg',\n        lowStockThreshold: 10,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '15 kg',\n        description: 'Fresh chicken breast',\n        inCart: 0,\n    },\n    {\n        id: '13',\n        name: 'Frozen Peas',\n        brand: 'Arctic Fresh',\n        code: 'FRZ-001',\n        category: 'Frozen',\n        price: 3.49,\n        stock: 25,\n        unit: 'pcs',\n        size: '500g',\n        lowStockThreshold: 15,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '25 pcs',\n        description: 'Frozen green peas',\n        inCart: 0,\n    },\n    {\n        id: '14',\n        name: 'Dish Soap',\n        brand: 'Clean Master',\n        code: 'HSE-001',\n        category: 'Household',\n        price: 2.99,\n        stock: 20,\n        unit: 'pcs',\n        size: '500ml',\n        lowStockThreshold: 10,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '20 pcs',\n        description: 'Lemon scented dish soap',\n        inCart: 0,\n    },\n    {\n        id: '15',\n        name: 'Shampoo',\n        brand: 'Hair Care Pro',\n        code: 'PER-001',\n        category: 'Personal Care',\n        price: 6.99,\n        stock: 18,\n        unit: 'pcs',\n        size: '400ml',\n        lowStockThreshold: 10,\n        isLowStock: false,\n        isOut: false,\n        quantityText: '18 pcs',\n        description: 'Moisturizing shampoo for all hair types',\n        inCart: 0,\n    },\n];\n\nexport const inventoryData = [\n    {\n        id: '1',\n        name: 'Festive Bread',\n        category: 'Bakery',\n        type: 'Festive',\n        price: 2.99,\n        quantity: 3,\n        unit: '400g',\n        isLowStock: true,\n        quantityText: 'loaves',\n    },\n    {\n        id: '2',\n        name: 'Simba Chips',\n        category: 'Snacks',\n        type: 'Simba',\n        price: 1.69,\n        quantity: 8,\n        unit: '50g',\n        isLowStock: true,\n        quantityText: 'packs',\n    },\n    {\n        id: '3',\n        name: 'Apples',\n        category: 'Fruits',\n        type: 'Imported',\n        price: 4.99,\n        quantity: 12,\n        unit: '1kg',\n        isLowStock: false,\n        isOut: false,\n        isOrdered: false,\n        quantityText: 'kg',\n    },\n    {\n        id: '4',\n        name: 'Bananas',\n        category: 'Fruits',\n        type: 'Local',\n        price: 1.29,\n        quantity: 18,\n        unit: '1kg',\n        isLowStock: false,\n        isOut: true, // Out of stock\n        isOrdered: false,\n        quantityText: 'bunches',\n    },\n    {\n        id: '5',\n        name: 'Beef Steak',\n        category: 'Meat',\n        type: 'Local',\n        price: 12.0,\n        quantity: 6,\n        unit: '1kg',\n        isLowStock: false,\n        isOut: false,\n        isOrdered: false,\n        quantityText: 'kg',\n    },\n    {\n        id: '6',\n        name: 'Blue Band Margarine',\n        category: 'Household',\n        type: 'Blue Band',\n        price: 3.5,\n        quantity: 10,\n        unit: '500g',\n        isLowStock: false,\n        isOut: false,\n        isOrdered: true, // Ordered\n        quantityText: 'tubs',\n    },\n    {\n        id: '7',\n        name: 'Coca Cola',\n        category: 'Beverages',\n        type: 'Coca-Cola',\n        price: 2.5,\n        quantity: 24,\n        unit: '500ml',\n        isLowStock: false,\n        isOut: false,\n        isOrdered: true, // Ordered\n        quantityText: 'bottles',\n    },\n];\n","size_bytes":8169},"components/haptic-tab.tsx":{"content":"import { BottomTabBarButtonProps } from '@react-navigation/bottom-tabs';\nimport { PlatformPressable } from '@react-navigation/elements';\nimport * as Haptics from 'expo-haptics';\n\nexport function HapticTab(props: BottomTabBarButtonProps) {\n  return (\n    <PlatformPressable\n      {...props}\n      onPressIn={(ev) => {\n        if (process.env.EXPO_OS === 'ios') {\n          // Add a soft haptic feedback when pressing down on the tabs.\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n        }\n        props.onPressIn?.(ev);\n      }}\n    />\n  );\n}\n","size_bytes":564},"components/external-link.tsx":{"content":"import { Href, Link } from 'expo-router';\nimport { openBrowserAsync, WebBrowserPresentationStyle } from 'expo-web-browser';\nimport { type ComponentProps } from 'react';\n\ntype Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: Href & string };\n\nexport function ExternalLink({ href, ...rest }: Props) {\n  return (\n    <Link\n      target=\"_blank\"\n      {...rest}\n      href={href}\n      onPress={async (event) => {\n        if (process.env.EXPO_OS !== 'web') {\n          // Prevent the default behavior of linking to the default browser on native.\n          event.preventDefault();\n          // Open the link in an in-app browser.\n          await openBrowserAsync(href, {\n            presentationStyle: WebBrowserPresentationStyle.AUTOMATIC,\n          });\n        }\n      }}\n    />\n  );\n}\n","size_bytes":794},"components/account/profile/ProfileHeader.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { ArrowLeft, User, Edit } from 'lucide-react-native';\n\ninterface ProfileHeaderProps {\n    isEditing: boolean;\n    onBack: () => void;\n    onEdit: () => void;\n}\n\nexport const ProfileHeader: React.FC<ProfileHeaderProps> = ({ isEditing, onBack, onEdit }) => {\n    return (\n        <View className='bg-white px-4 py-3 flex-row justify-between items-center'>\n            <View className='flex-row items-center'>\n                <TouchableOpacity onPress={onBack} className='mr-3'>\n                    <ArrowLeft size={24} color='#000' />\n                </TouchableOpacity>\n                <User size={24} color='#000' />\n                <Text className='ml-2 text-lg font-semibold'>My Profile</Text>\n            </View>\n            {!isEditing && (\n                <TouchableOpacity\n                    onPress={onEdit}\n                    className='flex-row items-center bg-gray-900 rounded-lg px-4 py-2'>\n                    <Edit size={16} color='#FFFFFF' />\n                    <Text className='ml-2 text-sm text-white font-medium'>Edit</Text>\n                </TouchableOpacity>\n            )}\n        </View>\n    );\n};\n","size_bytes":1217},"components/credit/transaction/TransactionDetailHeader.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { ChevronLeft } from 'lucide-react-native';\n\ninterface TransactionDetailHeaderProps {\n\tcustomerName: string;\n\ttransactionType: 'Purchase' | 'Payment';\n\tonBack: () => void;\n}\n\nexport const TransactionDetailHeader: React.FC<TransactionDetailHeaderProps> = ({\n\tcustomerName,\n\ttransactionType,\n\tonBack,\n}) => {\n\treturn (\n\t\t<View className='bg-white px-4 py-3 flex-row items-center justify-between border-b border-gray-200'>\n\t\t\t<View className='flex-row items-center flex-1'>\n\t\t\t\t<TouchableOpacity className='mr-3' onPress={onBack}>\n\t\t\t\t\t<ChevronLeft size={24} color='#000' />\n\t\t\t\t</TouchableOpacity>\n\t\t\t\t<View className='flex-1'>\n\t\t\t\t\t<Text className='text-xl font-semibold'>Credit Transaction</Text>\n\t\t\t\t\t<Text className='text-sm text-gray-500'>{customerName}</Text>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t\t<View\n\t\t\t\tclassName={`px-3 py-1 rounded ${\n\t\t\t\t\ttransactionType === 'Purchase' ? 'bg-red-500' : 'bg-gray-800'\n\t\t\t\t}`}>\n\t\t\t\t<Text className='text-white text-xs font-medium'>{transactionType}</Text>\n\t\t\t</View>\n\t\t</View>\n\t);\n};\n","size_bytes":1110},"components/inventory/FormDropdown.tsx":{"content":"import { Ionicons } from '@expo/vector-icons';\nimport React, { useState } from 'react';\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\n\ninterface Props {\n    label: string;\n    required?: boolean;\n    placeholder?: string;\n    value: string;\n    options: string[];\n    onSelect: (value: string) => void;\n}\n\nconst FormDropdown = ({\n    label,\n    required = false,\n    placeholder,\n    value,\n    options,\n    onSelect,\n}: Props) => {\n    const [showOptions, setShowOptions] = useState(false);\n\n    return (\n        <View style={{ position: 'relative', zIndex: showOptions ? 1000 : 1 }}>\n            <Text className='text-base font-semibold text-black mb-2'>\n                {label} {required && <Text className='text-red-500'>*</Text>}\n            </Text>\n            <TouchableOpacity\n                className='bg-gray-100 rounded-lg px-4 py-3 flex-row justify-between items-center'\n                onPress={() => setShowOptions(!showOptions)}>\n                <Text className={value ? 'text-gray-700' : 'text-gray-400'}>\n                    {value || placeholder}\n                </Text>\n                <Ionicons\n                    name={showOptions ? 'chevron-up' : 'chevron-down'}\n                    size={20}\n                    color='#666'\n                />\n            </TouchableOpacity>\n\n            {showOptions && (\n                <View\n                    className='absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg mt-1'\n                    style={{\n                        maxHeight: 200,\n                        elevation: 5, // Android shadow\n                        shadowColor: '#000', // iOS shadow\n                        shadowOffset: { width: 0, height: 2 },\n                        shadowOpacity: 0.1,\n                        shadowRadius: 4,\n                    }}>\n                    <ScrollView\n                        className='max-h-48'\n                        showsVerticalScrollIndicator={true}\n                        nestedScrollEnabled={true}>\n                        {options.map((option, index) => (\n                            <TouchableOpacity\n                                key={option}\n                                className={`px-4 py-3 ${\n                                    index !== options.length - 1 ? 'border-b border-gray-100' : ''\n                                }`}\n                                onPress={() => {\n                                    onSelect(option);\n                                    setShowOptions(false);\n                                }}>\n                                <Text className='text-base text-gray-700'>{option}</Text>\n                            </TouchableOpacity>\n                        ))}\n                    </ScrollView>\n                </View>\n            )}\n        </View>\n    );\n};\n\nexport default FormDropdown;\n","size_bytes":2883},"app/(tabs)/credit/_layout.tsx":{"content":"import { Stack } from 'expo-router';\n\nexport default function CreditStack() {\n\treturn (\n\t\t<Stack screenOptions={{ headerShown: false }}>\n\t\t\t<Stack.Screen name='index' />\n\t\t\t<Stack.Screen name='credit-details' />\n\t\t\t<Stack.Screen name='credit-transaction' />\n\t\t</Stack>\n\t);\n}\n","size_bytes":275},"hooks/use-color-scheme.web.ts":{"content":"import { useEffect, useState } from 'react';\nimport { useColorScheme as useRNColorScheme } from 'react-native';\n\n/**\n * To support static rendering, this value needs to be re-calculated on the client side for web\n */\nexport function useColorScheme() {\n  const [hasHydrated, setHasHydrated] = useState(false);\n\n  useEffect(() => {\n    setHasHydrated(true);\n  }, []);\n\n  const colorScheme = useRNColorScheme();\n\n  if (hasHydrated) {\n    return colorScheme;\n  }\n\n  return 'light';\n}\n","size_bytes":480},"components/checkout/PaymentMethodsSection.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { PaymentMethod } from '@/types';\nimport { PaymentMethodCard } from './PaymentMethodCard';\nimport { StoreCreditForm } from './StoreCreditForm';\nimport { Animated } from 'react-native';\n\ninterface PaymentMethodsSectionProps {\n  paymentMethods: PaymentMethod[];\n  selectedPaymentMethod: string;\n  onPaymentMethodSelect: (methodId: string) => void;\n  // Store credit form props\n  showStoreCreditForm: boolean;\n  creditAmount: string;\n  onCreditAmountChange: (amount: string) => void;\n  maxCredit: number;\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  isSearchFocused: boolean;\n  onSearchFocus: () => void;\n  onSearchBlur: () => void;\n  storeCreditFormHeight: Animated.Value;\n  storeCreditOpacity: Animated.Value;\n}\n\nexport const PaymentMethodsSection: React.FC<PaymentMethodsSectionProps> = ({\n  paymentMethods,\n  selectedPaymentMethod,\n  onPaymentMethodSelect,\n  showStoreCreditForm,\n  creditAmount,\n  onCreditAmountChange,\n  maxCredit,\n  searchQuery,\n  onSearchChange,\n  isSearchFocused,\n  onSearchFocus,\n  onSearchBlur,\n  storeCreditFormHeight,\n  storeCreditOpacity\n}) => {\n  // Find the index of store-credit in the array\n  const storeCreditIndex = paymentMethods.findIndex(m => m.id === 'store-credit');\n  \n  // Split based on the actual index position\n  const beforeStoreCreditMethods = paymentMethods.filter((method, index) => \n    index < storeCreditIndex\n  );\n  \n  const storeCreditMethod = paymentMethods.find(method => method.id === 'store-credit');\n  \n  const afterStoreCreditMethods = paymentMethods.filter((method, index) => \n    index > storeCreditIndex\n  );\n\n  return (\n    <View className=\"mx-4 mt-6\">\n      <Text className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Payment Method\n      </Text>\n      \n      {/* Payment methods before Store Credit */}\n      {beforeStoreCreditMethods.map((method) => (\n        <PaymentMethodCard \n          key={method.id} \n          method={method}\n          isSelected={selectedPaymentMethod === method.id}\n          onSelect={onPaymentMethodSelect}\n        />\n      ))}\n      \n      {/* Store Credit Payment Method */}\n      {storeCreditMethod && (\n        <PaymentMethodCard \n          key={storeCreditMethod.id} \n          method={storeCreditMethod}\n          isSelected={selectedPaymentMethod === storeCreditMethod.id}\n          onSelect={onPaymentMethodSelect}\n        />\n      )}\n      \n      {/* Store Credit Form - appears right after Store Credit method */}\n      {showStoreCreditForm && (\n        <StoreCreditForm\n          creditAmount={creditAmount}\n          onCreditAmountChange={onCreditAmountChange}\n          maxCredit={maxCredit}\n          searchQuery={searchQuery}\n          onSearchChange={onSearchChange}\n          isSearchFocused={isSearchFocused}\n          onSearchFocus={onSearchFocus}\n          onSearchBlur={onSearchBlur}\n          height={storeCreditFormHeight}\n          opacity={storeCreditOpacity}\n        />\n      )}\n      \n      {/* Payment methods after Store Credit */}\n      {afterStoreCreditMethods.map((method) => (\n        <PaymentMethodCard \n          key={method.id} \n          method={method}\n          isSelected={selectedPaymentMethod === method.id}\n          onSelect={onPaymentMethodSelect}\n        />\n      ))}\n    </View>\n  );\n};","size_bytes":3334},"components/inventory/CategoryTabs.tsx":{"content":"import React from 'react';\nimport { ScrollView } from 'react-native';\nimport CategoryTab from './CategoryTab';\n\ninterface InventoryItem {\n    id: string;\n    name: string;\n    category: string;\n    brand: string;\n    description: string;\n    price: number;\n    quantity: number;\n    unit: string;\n}\n\ninterface Props {\n    selectedCategory: string;\n    onCategoryChange: (category: string) => void;\n    inventoryItems: InventoryItem[];\n}\n\nconst CategoryTabs = ({ selectedCategory, onCategoryChange, inventoryItems }: Props) => {\n    const getCategoryCount = (category: string) => {\n        if (category === 'All') return inventoryItems.length;\n        return inventoryItems.filter((item) => item.category === category).length;\n    };\n\n    const categories = [\n        { name: 'All', icon: 'apps', count: getCategoryCount('All') },\n        { name: 'Beverages', icon: 'wine', count: getCategoryCount('Beverages') },\n        { name: 'Snacks', icon: 'fast-food', count: getCategoryCount('Snacks') },\n        { name: 'Dairy', icon: 'logo-dropbox', count: getCategoryCount('Dairy') },\n        { name: 'Bakery', icon: 'bread', count: getCategoryCount('Bakery') },\n        { name: 'Fruits', icon: 'apple', count: getCategoryCount('Fruits') },\n        { name: 'Vegetables', icon: 'leaf', count: getCategoryCount('Vegetables') },\n        { name: 'Meat', icon: 'restaurant', count: getCategoryCount('Meat') },\n        { name: 'Frozen', icon: 'snow', count: getCategoryCount('Frozen') },\n        { name: 'Household', icon: 'home', count: getCategoryCount('Household') },\n        {\n            name: 'Personal Care',\n            icon: 'person',\n            count: getCategoryCount('Personal Care'),\n        },\n    ];\n\n    return (\n        <ScrollView\n            horizontal\n            showsHorizontalScrollIndicator={false}\n            className='flex-row space-x-2'>\n            {categories.map((category) => (\n                <CategoryTab\n                    key={category.name}\n                    category={category as any}\n                    isSelected={selectedCategory === category.name}\n                    onPress={() => onCategoryChange(category.name)}\n                />\n            ))}\n        </ScrollView>\n    );\n};\n\nexport default CategoryTabs;\n","size_bytes":2248},"app/(tabs)/credit/credit-transaction.tsx":{"content":"import React from 'react';\nimport { ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router, useLocalSearchParams } from 'expo-router';\nimport { TransactionDetailHeader } from '@/components/credit/transaction/TransactionDetailHeader';\nimport { TransactionDetailsCard } from '@/components/credit/transaction/TransactionDetailsCard';\nimport { useTransactionPayment } from '@/hooks/useTransactionPayment';\nimport { MakePaymentForm } from '@/components/credit/transaction/forms/MakePaymentForm';\n\nexport const TransactionDetailScreen: React.FC = () => {\n\t// Get transaction data from route params\n\tconst params = useLocalSearchParams();\n\n\tconst transactionId = params.transactionId as string;\n\tconst transactionType = params.type as 'Purchase' | 'Payment';\n\tconst date = params.date as string;\n\tconst amount = parseFloat(params.amount as string);\n\tconst customerId = params.customerId as string;\n\tconst customerName = params.customerName as string;\n\n\t// Mock items - in real app, fetch by transaction ID\n\tconst itemsPurchased = transactionType === 'Purchase' ? ['Soap', 'Toothpaste', 'Shampoo'] : [];\n\n\tconst { paymentAmount, setPaymentAmount, paymentMethod, setPaymentMethod, handleSubmit } =\n\t\tuseTransactionPayment();\n\n\tconst handleBack = () => {\n\t\trouter.back();\n\t};\n\n\tconst handlePayment = () => {\n\t\thandleSubmit();\n\t\t// After successful payment, navigate back\n\t\trouter.back();\n\t};\n\n\treturn (\n\t\t<SafeAreaView className='flex-1 bg-gray-50'>\n\t\t\t<TransactionDetailHeader\n\t\t\t\tcustomerName={customerName}\n\t\t\t\ttransactionType={transactionType}\n\t\t\t\tonBack={handleBack}\n\t\t\t/>\n\n\t\t\t<ScrollView className='flex-1'>\n\t\t\t\t<TransactionDetailsCard amount={amount} date={date} items={itemsPurchased} />\n\n\t\t\t\t{/* Only show payment form for credit transactions */}\n\t\t\t\t{transactionType === 'Purchase' && amount < 0 && (\n\t\t\t\t\t<MakePaymentForm\n\t\t\t\t\t\tpaymentAmount={paymentAmount}\n\t\t\t\t\t\tonPaymentAmountChange={setPaymentAmount}\n\t\t\t\t\t\tpaymentMethod={paymentMethod}\n\t\t\t\t\t\tonPaymentMethodChange={setPaymentMethod}\n\t\t\t\t\t\tonSubmit={handlePayment}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</ScrollView>\n\t\t</SafeAreaView>\n\t);\n};\n\nexport default TransactionDetailScreen;\n","size_bytes":2176},"app/auth/_layout.tsx":{"content":"import { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function AuthLayout() {\n    return (\n        <>\n            <Stack screenOptions={{ headerShown: false }}>\n                <Stack.Screen\n                    name='index'\n                    options={{\n                        title: 'LogIn',\n                    }}\n                />\n                <Stack.Screen\n                    name='signup'\n                    options={{\n                        title: 'Create Account',\n                    }}\n                />\n                <Stack.Screen\n                    name='account'\n                    options={{\n                        title: 'Account',\n                    }}\n                />\n            </Stack>\n            <StatusBar style='auto' />\n        </>\n    );\n}\n","size_bytes":828},"constants/transactions.ts":{"content":"export const MOCK_TRANSACTIONS = [\n\t{ id: '1', type: 'Purchase' as const, date: '2024-12-16', amount: -25.5 },\n\t{ id: '2', type: 'Purchase' as const, date: '2024-12-12', amount: -75.0 },\n\t{ id: '3', type: 'Payment' as const, date: '2024-12-09', amount: 20.0 },\n\t{ id: '4', type: 'Purchase' as const, date: '2024-12-06', amount: -42.25 },\n];\n","size_bytes":341},"hooks/useSearch.ts":{"content":"import { useState } from 'react';\n\n// imporove this\n\nexport const useSearch = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearchFocused, setIsSearchFocused] = useState(false);\n\n  const handleSearchFocus = () => setIsSearchFocused(true);\n  const handleSearchBlur = () => setIsSearchFocused(false);\n\n  return {\n    searchQuery,\n    setSearchQuery,\n    isSearchFocused,\n    handleSearchFocus,\n    handleSearchBlur\n  };\n};","size_bytes":447},"components/checkout/cart-summary-bar.tsx":{"content":"import {\n    ShoppingCart\n} from 'lucide-react-native';\nimport React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\n\ninterface CartSummaryBarProps {\n    handleMainCartCheckout: () => void;\n    totalCartItems: number;\n    totalCartPrice: number;\n    marginBottom: number;\n}\n\n\nconst CartSummaryBar: React.FC<CartSummaryBarProps> = ({ totalCartItems, totalCartPrice, handleMainCartCheckout, marginBottom }) => {\n    return (\n        <TouchableOpacity\n            onPress={handleMainCartCheckout}\n            className=\"bg-gray-900 mx-4 mb-2 rounded-xl p-4\"\n            style={{marginBottom }}\n        >\n            <View className=\"flex-row items-center justify-between\">\n                <View className=\"flex-row items-center\">\n                    <ShoppingCart size={20} color=\"#FFFFFF\" />\n                    <Text className=\"text-white font-medium ml-2\">\n                        Checkout\n                    </Text>\n                </View>\n                <View className=\"flex-row items-center\">\n                    <Text className=\"text-white font-medium mr-3\">\n                        {totalCartItems} item{totalCartItems > 1 ? 's' : ''}\n                    </Text>\n                    <Text className=\"text-white font-bold\">\n                        ${totalCartPrice.toFixed(2)}\n                    </Text>\n                </View>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default CartSummaryBar;\n","size_bytes":1451},"components/account/store/EditModeActions.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface EditModeActionsProps {\n    onSave: () => void;\n    onCancel: () => void;\n}\n\nexport const EditModeActions: React.FC<EditModeActionsProps> = ({ onSave, onCancel }) => {\n    return (\n        <View className='flex-row gap-3 mb-4'>\n            <TouchableOpacity\n                onPress={onSave}\n                className='flex-1 bg-black rounded-lg py-3 flex-row items-center justify-center'>\n                <Ionicons name='save-outline' size={20} color='#FFFFFF' />\n                <Text className='ml-2 text-white font-semibold'>Save Changes</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n                onPress={onCancel}\n                className='flex-1 bg-white border border-gray-300 rounded-lg py-3'>\n                <Text className='text-gray-700 font-semibold text-center'>Cancel</Text>\n            </TouchableOpacity>\n        </View>\n    );\n};\n","size_bytes":1020},"app/(tabs)/checkout/category.tsx":{"content":"import { CartSummaryBar } from '@/components/checkout/CartSummaryBar';\nimport { ProductList } from '@/components/checkout/ProductList';\nimport { CategoryHeader } from '@/components/common/CategoryHeader';\nimport { SearchBar } from '@/components/common/SearchBar';\nimport { CATEGORIES } from '@/constants/categories';\nimport { useCart } from '@/hooks/useCart';\nimport { useProducts } from '@/hooks/useProducts';\nimport { useSearch } from '@/hooks/useSearch';\nimport { router, useLocalSearchParams } from 'expo-router';\nimport React from 'react';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nconst CategoryScreen: React.FC = () => {\n    // Get category info from route params\n    const { categoryId, categoryName } = useLocalSearchParams();\n\n    // Find the full category object from constants\n    const category = CATEGORIES.find((cat) => cat.id === categoryId);\n\n    // Get cart from global state\n    const { globalCart, updateGlobalCart } = useCart();\n\n    const { searchQuery, setSearchQuery, isSearchFocused, handleSearchFocus, handleSearchBlur } =\n        useSearch();\n\n    const { addToCart, removeFromCart, filteredProducts, cartTotals, getCartItems } = useProducts(\n        category?.name || '',\n        globalCart,\n        updateGlobalCart,\n    );\n\n    const filtered = filteredProducts(searchQuery);\n    const { totalItems, totalPrice } = cartTotals;\n\n    const handleCheckout = () => {\n        // Format cart items\n        const formattedCartItems = getCartItems().map((item) => ({\n            id: item.id,\n            name: item.name,\n            price: item.price,\n            quantity: item.inCart || 0,\n        }));\n\n        // Update global cart\n        updateGlobalCart(formattedCartItems);\n\n        // Navigate to payment screen\n        router.push('/(tabs)/checkout/payment');\n    };\n\n    // Handle case where category is not found\n    if (!category) {\n        return (\n            <SafeAreaView className='flex-1 bg-gray-50'>\n                <CategoryHeader\n                    category={{ id: '', name: 'Unknown', color: '#000', icon: '', count: 0 }}\n                    productCount={0}\n                    onBack={() => router.back()}>\n                    <SearchBar\n                        placeholder='Search...'\n                        value=''\n                        onChangeText={() => {}}\n                        isSearchFocused={false}\n                        onFocus={() => {}}\n                        onBlur={() => {}}\n                    />\n                </CategoryHeader>\n            </SafeAreaView>\n        );\n    }\n\n    return (\n        <SafeAreaView className='flex-1 bg-gray-50'>\n            <CategoryHeader\n                category={category}\n                productCount={filtered.length}\n                onBack={() => router.back()}>\n                <SearchBar\n                    placeholder={`Search ${category.name.toLowerCase()}...`}\n                    value={searchQuery}\n                    onChangeText={setSearchQuery}\n                    isSearchFocused={isSearchFocused}\n                    onFocus={handleSearchFocus}\n                    onBlur={handleSearchBlur}\n                />\n            </CategoryHeader>\n\n            <ProductList\n                products={filtered}\n                category={category}\n                searchQuery={searchQuery}\n                onAddToCart={addToCart}\n                onRemoveFromCart={removeFromCart}\n            />\n\n            {totalItems > 0 && (\n                <CartSummaryBar\n                    totalItems={totalItems}\n                    totalPrice={totalPrice}\n                    onCheckout={handleCheckout}\n                />\n            )}\n        </SafeAreaView>\n    );\n};\n\nexport default CategoryScreen;\n","size_bytes":3734},"utils/passwordHash.ts":{"content":"import * as Crypto from 'expo-crypto';\nexport async function hashPassword(password: string): Promise<string> {\n  return await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256,password,);\n}","size_bytes":200},"db/services/storeService.ts":{"content":"import { Q } from '@nozbe/watermelondb';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { database, storeCollection, User } from '..';\nimport Store from '../models/stores';\nimport { businessCollection } from './businessService';\n\n// Holds the currently selected store id\nconst selectedStoreId$ = new BehaviorSubject<string | null>(null);\n\nasync function initSelectedStore() {\n    try {\n        const stores = await storeCollection\n            .query(Q.where('deleted', false), Q.where('status', 'active'))\n            .fetch();\n        if (stores.length > 0) selectedStoreId$.next(stores[0].id);\n    } catch (e) {\n        console.log('storeService init error', e);\n        selectedStoreId$.next(null);\n    }\n}\n\ninitSelectedStore();\n\nexport const selectedStore$: Observable<Store | null> = selectedStoreId$.pipe(\n    switchMap((id) => {\n        if (!id) return of(null);\n        return storeCollection.findAndObserve(id).pipe(map((s) => (s && s.isActive ? s : null)));\n    }),\n    distinctUntilChanged((a, b) => a?.id === b?.id),\n    shareReplay(1),\n);\n\nexport const activeStores$: Observable<Store[]> = new Observable<Store[]>((observer) => {\n    storeCollection\n        .query(Q.where('deleted', false), Q.where('status', 'active'))\n        .observe()\n        .subscribe(observer);\n}).pipe(shareReplay(1));\n\nexport async function findStoreById(id: string): Promise<Store | null> {\n    try {\n        return await storeCollection.find(id);\n    } catch {\n        return null;\n    }\n}\n\nexport async function createStore(data: {\n    name: string;\n    businessId: string;\n    address?: string;\n    phone?: string;\n    email?: string;\n    managerId?: string;\n    currency?: string;\n    status?: string;\n}) {\n    try {\n        const s = await database.write(async () => {\n            const biz = await businessCollection.find(data.businessId);\n            return await storeCollection.create((store) => {\n                store.externalId = `str_${data.name}${Date.now()}_${Math.random().toString(36).slice(2)}`;\n                // relation id fields are not typed on the Model class here, cast to `any` to set them\n                store.business.set(biz);\n                store.name = data.name;\n                store.address = data.address || '';\n                store.phone = data.phone || '';\n                store.email = data.email || '';\n                (store as any).managerId = data.managerId || '';\n                store.currency = data.currency || '';\n                store.status = data.status || 'active';\n                store.deleted = false;\n            });\n        });\n        selectedStoreId$.next(s.id);\n        return s;\n    } catch (e) {\n        console.log('createStore error', e);\n        return null;\n    }\n}\n\nexport async function updateStore(\n    id: string,\n    patch: Partial<{\n        name: string;\n        address: string;\n        phone: string;\n        email: string;\n        managerId: string;\n        currency: string;\n        status: string;\n        deleted: boolean;\n    }>,\n) {\n    const s = await findStoreById(id);\n    const user = await User.findByUserById(patch.managerId || '');\n    if (!s) throw new Error('Store not found');\n    await database.write(async () => {\n        await s.update((row) => {\n            if (patch.name !== undefined) row.name = patch.name;\n            if (patch.address !== undefined) row.address = patch.address;\n            if (patch.phone !== undefined) row.phone = patch.phone;\n            if (patch.email !== undefined) row.email = patch.email;\n            if (patch.managerId !== undefined) row.manager.set(user);\n            if (patch.currency !== undefined) row.currency = patch.currency;\n            if (patch.status !== undefined) row.status = patch.status;\n            if (patch.deleted !== undefined) row.deleted = !!patch.deleted;\n        });\n    });\n}\n\nexport async function markStoreDeleted(id: string) {\n    await updateStore(id, { deleted: true, status: 'inactive' });\n    if (selectedStoreId$.value === id) selectedStoreId$.next(null);\n}\n\nexport function selectStore(id: string | null) {\n    selectedStoreId$.next(id);\n}\n\nexport async function findByExternalId(externalId: string) {\n    const list = await storeCollection\n        .query(Q.where('external_id', externalId), Q.where('deleted', false))\n        .fetch();\n    return list[0] || null;\n}\n\nexport default {\n    selectedStore$,\n    activeStores$,\n    selectStore,\n    findStoreById,\n    createStore,\n    updateStore,\n    markStoreDeleted,\n    findByExternalId,\n};\n","size_bytes":4599},"components/common/BackButton.tsx":{"content":"import React from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport { ArrowLeft } from 'lucide-react-native';\n\ninterface BackButtonProps {\n  onPress: () => void;\n  size?: number;\n  color?: string;\n  className?: string;\n}\n\nexport const BackButton: React.FC<BackButtonProps> = ({\n  onPress,\n  size = 24,\n  color = \"#1F2937\",\n  className = \"mr-4\"\n}) => {\n  return (\n    <TouchableOpacity onPress={onPress} className={className}>\n      <ArrowLeft size={size} color={color} />\n    </TouchableOpacity>\n  );\n};","size_bytes":518},"app/(tabs)/inventory/index.tsx":{"content":"// import { AddProductModal } from '@/components/inventory/AddProductModal';\n\nimport { CategoriesGrid } from '@/components/inventory/category/CategoriesGrid';\nimport { InventoryHeader } from '@/components/inventory/InventoryHeader';\nimport { InventoryList } from '@/components/inventory/InventoryItemsList';\nimport { ProductModal } from '@/components/inventory/modal/productModal';\nimport { SearchAndFilterRow } from '@/components/inventory/SearchAndFilterRow';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { categoryService } from '@/db/services/categoryService';\nimport { inventoryService } from '@/db/services/inventoryService';\nimport { productService } from '@/db/services/productService';\nimport { useInventoryData } from '@/hooks/useInventoryData';\nimport { useInventoryFilters } from '@/hooks/useInventoryFilters';\nimport { CategoryData, InventoryItemData, Product, ProductData } from '@/types';\nimport { router } from 'expo-router';\nimport React, { useState } from 'react';\nimport { Alert, Keyboard, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nconst InventoryTab = () => {\n    const { user } = useAuth();\n    const [showAddModal, setShowAddModal] = useState(false);\n    const { inventory, categories, rawCategories, loading, refreshinvetoryData } =\n        useInventoryData();\n    const { selectedBusiness, selectedStore } = useBusiness();\n\n    const {\n        searchQuery,\n        setSearchQuery,\n        selectedCategory,\n        setSelectedCategory,\n        selectedFilter,\n        toggleFilter,\n        isSearchFocused,\n        setIsSearchFocused,\n        filteredData,\n        getFilterText,\n    } = useInventoryFilters(inventory);\n\n    const handleCategoryPress = (category: any) => {\n        setSelectedCategory(category.name);\n        if (category.name !== 'All') {\n            router.push({\n                pathname: '/inventory/category',\n                params: {\n                    categoryId: category.id,\n                    categoryName: category.name,\n                },\n            });\n        }\n    };\n\n    const handleShowModal = () => {\n        setShowAddModal(true);\n    };\n    const handleAddProduct = async (\n        newPoduct: ProductData,\n        newInventoryProductData: InventoryItemData,\n    ) => {\n        if (!selectedBusiness || !selectedStore || !user) {\n            Alert.alert('Error', 'Missing business or store information');\n            return;\n        }\n\n        const product = await productService.createProduct({\n            businessId: selectedBusiness.id,\n            categoryId: newPoduct.categoryId,\n            name: newPoduct.name,\n            cost: parseFloat(newPoduct.cost) || 0,\n            barcode: newPoduct.barcode,\n            description: newPoduct.description,\n            unit: newPoduct.unit || 'pcs',\n            status: 'active',\n        });\n\n        const inventory = await inventoryService.createInventory({\n            productId: product.id,\n            storeId: selectedStore.id,\n            quantity: newInventoryProductData.quantity || 0,\n            minStock: newInventoryProductData.minStock || 0,\n            maxStock: newInventoryProductData.maxStock || 100,\n            price: newInventoryProductData.price,\n            wholeSalePrice: newInventoryProductData.wholeSalePrice || 0,\n            weightedAvgCost: parseFloat(newPoduct.cost) || 0,\n            lastPurchasePrice: parseFloat(newPoduct.cost) || 0,\n            location: newInventoryProductData.location,\n        });\n\n        if (newInventoryProductData.quantity > 0) {\n            await inventoryService.adjustInventoryWithBatch(\n                inventory.id,\n                parseFloat(newInventoryProductData.quantity.toString()),\n                {\n                    userId: user.id,\n                    costPerUnit: parseFloat(newPoduct.cost) || 0,\n                    batchType: 'purchase',\n                    notes: 'Initial stock',\n                },\n            );\n        }\n    };\n\n    const handleProductAdded = () => {\n        refreshinvetoryData();\n    };\n\n    const handleCreateCategory = async (newCategoryData: CategoryData) => {\n        if (!newCategoryData.name.trim()) {\n            Alert.alert('Error', 'Category name is required');\n            return;\n        }\n\n        if (!selectedBusiness) {\n            Alert.alert('Error', 'No business selected');\n            return;\n        }\n        const newCategory = await categoryService.createCategory({\n            businessId: selectedBusiness.id,\n            name: newCategoryData.name,\n            icon: newCategoryData.icon,\n            color: newCategoryData.color,\n        });\n\n        console.log('Create new category');\n        refreshinvetoryData();\n        return newCategory;\n    };\n\n    const handleUpdateProduct = async (\n        productId: string,\n        updates: Partial<{\n            name: string;\n            categoryId: string;\n            cost: number;\n            barcode: string;\n            description: string;\n            unit: string;\n            status: string;\n        }>,\n    ) => {\n        await productService.updateProduct(productId, updates);\n    };\n\n    const handleUpdateInventory = async (\n        inventoryId: string,\n        updates: {\n            price?: number;\n            wholeSalePrice?: number;\n            minStock?: number;\n            maxStock?: number;\n            location?: string;\n        },\n    ) => {\n        await inventoryService.updateInventoryPricing(inventoryId, updates);\n    };\n\n    const handleSaveItem = (updatedItem: Product) => {\n        console.log('Save item:', updatedItem);\n        refreshinvetoryData();\n    };\n\n    const handleDeleteItem = (itemId: string) => {\n        console.log('Delete item:', itemId);\n        refreshinvetoryData();\n    };\n\n    const dismissSearch = () => {\n        setIsSearchFocused(false);\n        Keyboard.dismiss();\n    };\n\n    const handleClearSearch = () => {\n        setSearchQuery('');\n        dismissSearch();\n    };\n\n    return (\n        <SafeAreaView className='flex-1 bg-gray-50'>\n            <View className='bg-white px-4 py-3'>\n                <InventoryHeader onShowModal={handleShowModal} />\n\n                <SearchAndFilterRow\n                    searchQuery={searchQuery}\n                    onSearchChange={setSearchQuery}\n                    isSearchFocused={isSearchFocused}\n                    onSearchFocus={() => setIsSearchFocused(true)}\n                    onSearchBlur={() => setIsSearchFocused(false)}\n                    onClear={handleClearSearch}\n                    selectedFilter={selectedFilter}\n                    onToggleFilter={toggleFilter}\n                />\n\n                <CategoriesGrid\n                    categories={categories}\n                    selectedCategory={selectedCategory}\n                    onCategoryPress={handleCategoryPress}\n                />\n            </View>\n\n            <InventoryList\n                data={filteredData}\n                filterText={getFilterText()}\n                onSave={handleSaveItem}\n                onDelete={handleDeleteItem}\n                availableCategories={categories}\n                addCategory={handleCreateCategory}\n                loadingCategories={loading}\n                refreshCategories={refreshinvetoryData}\n                updateProduct={handleUpdateProduct}\n                updateInventory={handleUpdateInventory}\n            />\n\n            <ProductModal\n                visible={showAddModal}\n                onClose={() => setShowAddModal(false)}\n                onProductAdded={handleProductAdded}\n                categories={rawCategories}\n                loadingCategories={loading}\n                refreshCategories={refreshinvetoryData}\n                addCategory={handleCreateCategory}\n                addProduct={handleAddProduct}\n            />\n        </SafeAreaView>\n    );\n};\n\nexport default InventoryTab;\n","size_bytes":7960},"hooks/useCart.ts":{"content":"import { CartItem } from '@/types';\nimport { useState } from 'react';\n\nexport const useCart = () => {\n    const [globalCart, setGlobalCart] = useState<CartItem[]>([]);\n\n    const totalCartItems = globalCart.reduce((sum, item) => sum + item.quantity, 0);\n    const totalCartPrice = globalCart.reduce((sum, item) => sum + item.price * item.quantity, 0);\n\n    const updateGlobalCart = (cartItems: CartItem[]) => {\n        setGlobalCart(cartItems);\n    };\n\n    const clearCart = () => {\n        setGlobalCart([]);\n    };\n\n    const addToCart = (item: CartItem) => {\n        setGlobalCart((prevCart) => {\n            const existingItem = prevCart.find((cartItem) => cartItem.id === item.id);\n            if (existingItem) {\n                return prevCart.map((cartItem) =>\n                    cartItem.id === item.id\n                        ? { ...cartItem, quantity: cartItem.quantity + item.quantity }\n                        : cartItem,\n                );\n            }\n            return [...prevCart, item];\n        });\n    };\n\n    const removeFromCart = (itemId: string) => {\n        setGlobalCart((prevCart) => prevCart.filter((item) => item.id !== itemId));\n    };\n\n    const updateQuantity = (itemId: string, quantity: number) => {\n        if (quantity <= 0) {\n            removeFromCart(itemId);\n            return;\n        }\n\n        setGlobalCart((prevCart) =>\n            prevCart.map((item) => (item.id === itemId ? { ...item, quantity } : item)),\n        );\n    };\n\n    return {\n        globalCart,\n        totalCartItems,\n        totalCartPrice,\n        updateGlobalCart,\n        clearCart,\n        addToCart,\n        removeFromCart,\n        updateQuantity,\n    };\n};\n","size_bytes":1680},"hooks/use-theme-color.ts":{"content":"/**\n * Learn more about light and dark modes:\n * https://docs.expo.dev/guides/color-schemes/\n */\n\nimport { Colors } from '@/constants/theme';\nimport { useColorScheme } from '@/hooks/use-color-scheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme() ?? 'light';\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n","size_bytes":537},"components/account/AccountHeader.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Settings } from 'lucide-react-native';\n\ninterface AccountHeaderProps {\n    onSettingsPress: () => void;\n}\n\nexport const AccountHeader: React.FC<AccountHeaderProps> = ({ onSettingsPress }) => {\n    return (\n        <View className='bg-white px-4 py-3 flex-row justify-between items-center'>\n            <Text className='text-xl font-bold text-gray-900'>Account</Text>\n            <TouchableOpacity onPress={onSettingsPress}>\n                <Settings size={24} color='#000' />\n            </TouchableOpacity>\n        </View>\n    );\n};\n","size_bytes":631},"components/parallax-scroll-view.tsx":{"content":"import type { PropsWithChildren, ReactElement } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  interpolate,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useScrollOffset,\n} from 'react-native-reanimated';\n\nimport { ThemedView } from '@/components/themed-view';\nimport { useColorScheme } from '@/hooks/use-color-scheme';\nimport { useThemeColor } from '@/hooks/use-theme-color';\n\nconst HEADER_HEIGHT = 250;\n\ntype Props = PropsWithChildren<{\n  headerImage: ReactElement;\n  headerBackgroundColor: { dark: string; light: string };\n}>;\n\nexport default function ParallaxScrollView({\n  children,\n  headerImage,\n  headerBackgroundColor,\n}: Props) {\n  const backgroundColor = useThemeColor({}, 'background');\n  const colorScheme = useColorScheme() ?? 'light';\n  const scrollRef = useAnimatedRef<Animated.ScrollView>();\n  const scrollOffset = useScrollOffset(scrollRef);\n  const headerAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateY: interpolate(\n            scrollOffset.value,\n            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],\n            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]\n          ),\n        },\n        {\n          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),\n        },\n      ],\n    };\n  });\n\n  return (\n    <Animated.ScrollView\n      ref={scrollRef}\n      style={{ backgroundColor, flex: 1 }}\n      scrollEventThrottle={16}>\n      <Animated.View\n        style={[\n          styles.header,\n          { backgroundColor: headerBackgroundColor[colorScheme] },\n          headerAnimatedStyle,\n        ]}>\n        {headerImage}\n      </Animated.View>\n      <ThemedView style={styles.content}>{children}</ThemedView>\n    </Animated.ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    height: HEADER_HEIGHT,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n    padding: 32,\n    gap: 16,\n    overflow: 'hidden',\n  },\n});\n","size_bytes":1996},"app/(tabs)/account/sales.tsx":{"content":"import { View, Text } from 'react-native';\n\nexport default function Sales() {\n    return (\n        <View className='flex-1 items-center justify-center bg-white dark:bg-black'>\n            <Text className='text-lg text-gray-900 dark:text-white'>Sales</Text>\n            <Text className='text-gray-600 dark:text-gray-400'>Sales history coming soon</Text>\n        </View>\n    );\n}\n","size_bytes":378},"components/common/SectionTitle.tsx":{"content":"import React from 'react';\nimport { Text } from 'react-native';\n\ninterface SectionTitleProps {\n  title: string;\n  className?: string;\n}\n\nexport const SectionTitle: React.FC<SectionTitleProps> = ({ \n  title, \n  className = \"text-lg font-semibold text-gray-900 mb-3\" \n}) => {\n  return (\n    <Text className={className}>\n      {title}\n    </Text>\n  );\n};","size_bytes":351},"app/auth/index.tsx":{"content":"import Login from './login';\nexport default Login;\n","size_bytes":51},"app/(tabs)/checkout/_layout.tsx":{"content":"import { Stack } from 'expo-router';\n\nexport default function CheckoutStack() {\n\treturn (\n\t\t<Stack screenOptions={{ headerShown: false }}>\n\t\t\t<Stack.Screen name='index' />\n\t\t\t<Stack.Screen name='category' />\n\t\t\t<Stack.Screen name='payment' />\n\t\t</Stack>\n\t);\n}\n","size_bytes":260},"components/themed-view.tsx":{"content":"import { View, type ViewProps } from 'react-native';\n\nimport { useThemeColor } from '@/hooks/use-theme-color';\n\nexport type ThemedViewProps = ViewProps & {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport function ThemedView({ style, lightColor, darkColor, ...otherProps }: ThemedViewProps) {\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <View style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","size_bytes":470},"components/inventory/InventoryItem.tsx":{"content":"import { Category } from '@/db';\nimport { CategoryData, CategoryItem as CategoryType, InventoryViewItem } from '@/types';\nimport { Feather } from '@expo/vector-icons';\nimport React, { useState } from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport { EditProductModal } from './modal/EditProductModal';\n\ninterface InventoryItemProps {\n    item: InventoryViewItem;\n    onSave: (updatedItem: InventoryViewItem) => void;\n    onDelete: (itemId: string) => void;\n    availableCategories: CategoryType[];\n    addCategory?: (newCategoryData: CategoryData) => Promise<Category | undefined>;\n    loadingCategories?: boolean;\n    refreshCategories?: () => Promise<void>;\n    updateProduct?: (\n        productId: string,\n        updates: Partial<{\n            name: string;\n            categoryId: string;\n            cost: number;\n            barcode: string;\n            description: string;\n            unit: string;\n            status: string;\n        }>,\n    ) => Promise<void>;\n    updateInventory?: (\n        inventoryId: string,\n        updates: {\n            price?: number;\n            wholeSalePrice?: number;\n            minStock?: number;\n            maxStock?: number;\n            location?: string;\n        },\n    ) => Promise<void>;\n}\n\n// this should be the main item :\nexport const InventoryItem: React.FC<InventoryItemProps> = ({\n    item,\n    onSave,\n    onDelete,\n    availableCategories,\n    addCategory,\n    loadingCategories = false,\n    refreshCategories,\n    updateProduct,\n    updateInventory,\n}) => {\n    const getBorderClass = () => {\n        // derive stock states from quantity/minStock\n        if (item.quantity <= 0) return 'border border-red-300';\n        if (item.quantity <= item.minStock) return 'border-2 border-orange-400';\n        return 'border border-gray-100';\n    };\n\n    const [showEditModal, setShowEditModal] = useState(false);\n\n    const handleProductUpdated = () => {\n        onSave(item);\n        setShowEditModal(false);\n    };\n\n    const handleDelete = (itemId: string) => {\n        onDelete(itemId);\n        setShowEditModal(false);\n    };\n\n    return (\n        <>\n            <View className={`bg-white rounded-lg mx-4 mb-2 px-4 py-3 ${getBorderClass()}`}>\n                <View className='flex-row justify-between items-center'>\n                    <View className='flex-1 flex-row items-center'>\n                        <Text className='text-base font-medium text-gray-900'>{item.name}</Text>\n                        {item.quantity <= item.minStock && (\n                            <View className='bg-red-500 px-2 py-1 rounded ml-2'>\n                                <Text className='text-white text-xs font-medium'>Low Stock</Text>\n                            </View>\n                        )}\n                    </View>\n                    <View className='mr-3 flex-row items-center'>\n                        <Text className='text-xs font-bold mr-1 text-gray-600'>\n                            {item.quantity}\n                        </Text>\n                        <Text className='text-xs text-gray-600'>{item.unit}</Text>\n                    </View>\n                    <TouchableOpacity\n                        className='w-6 h-6 bg-gray-100 rounded items-center justify-center'\n                        onPress={() => {\n                            setShowEditModal(true);\n                        }}>\n                        <Feather name='edit' size={14} color='#6B7280' />\n                    </TouchableOpacity>\n                </View>\n                <Text className='text-gray-600 text-sm mt-1'>\n                    {item.category} | ${item.price.toFixed(2)} | {item.unit}\n                </Text>\n            </View>\n\n            {updateProduct && updateInventory && addCategory && refreshCategories && (\n                <EditProductModal\n                    visible={showEditModal}\n                    onClose={() => setShowEditModal(false)}\n                    onProductUpdated={handleProductUpdated}\n                    item={item}\n                    categories={availableCategories}\n                    addCategory={addCategory}\n                    loadingCategories={loadingCategories}\n                    refreshCategories={refreshCategories}\n                    updateProduct={updateProduct}\n                    updateInventory={updateInventory}\n                />\n            )}\n        </>\n    );\n};\n","size_bytes":4394},"app/(tabs)/account/index.tsx":{"content":"import { currentUser$ } from '@/db/services/userService';\n\nimport { withObservables } from '@nozbe/watermelondb/react';\nimport AccountScreenComponent from './pos-account';\nimport { activeSession$, isAuthenticated$ } from '@/db/services/sessionsService';\n\nconst enhance = withObservables([], () => ({\n    activeSession: activeSession$,\n    user: currentUser$,\n    isAuthenticated: isAuthenticated$,\n}));\n\nconst AccountScreen = enhance(AccountScreenComponent);\n\nexport default AccountScreen;\n","size_bytes":490},"components/account/profile/ContactInfoCard.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { Phone, Mail } from 'lucide-react-native';\nimport { EditableField } from './EditableField';\n\ninterface ContactInfoCardProps {\n    phone: string;\n    email: string;\n    emergencyContact: string;\n    isEditing: boolean;\n    onPhoneChange: (text: string) => void;\n    onEmailChange: (text: string) => void;\n    onEmergencyContactChange: (text: string) => void;\n}\n\nexport const ContactInfoCard: React.FC<ContactInfoCardProps> = ({\n    phone,\n    email,\n    emergencyContact,\n    isEditing,\n    onPhoneChange,\n    onEmailChange,\n    onEmergencyContactChange,\n}) => {\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <View className='flex-row items-center mb-4'>\n                <Phone size={20} color='#374151' />\n                <Text className='ml-2 font-semibold text-gray-900'>Contact Information</Text>\n            </View>\n\n            <EditableField\n                label='Phone Number'\n                value={phone}\n                onChangeText={onPhoneChange}\n                isEditing={isEditing}\n                icon={<Phone size={16} color='#6B7280' />}\n                keyboardType='phone-pad'\n            />\n\n            <EditableField\n                label='Email Address'\n                value={email}\n                onChangeText={onEmailChange}\n                isEditing={isEditing}\n                icon={<Mail size={16} color='#6B7280' />}\n                keyboardType='email-address'\n                autoCapitalize='none'\n            />\n\n            <View>\n                <Text className='text-sm text-gray-600 font-medium mb-2'>Emergency Contact</Text>\n                {isEditing ? (\n                    <TextInput\n                        value={emergencyContact}\n                        onChangeText={onEmergencyContactChange}\n                        className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                        keyboardType='phone-pad'\n                    />\n                ) : (\n                    <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                        <Text className='text-gray-900'>{emergencyContact}</Text>\n                    </View>\n                )}\n            </View>\n        </View>\n    );\n};\n","size_bytes":2298},"app/(tabs)/account/_layout.tsx":{"content":"import { Stack } from 'expo-router';\n\nexport default function InventoryStack() {\n    return (\n        <Stack screenOptions={{ headerShown: false }}>\n            <Stack.Screen name='index' />\n            <Stack.Screen name='profile' />\n            <Stack.Screen name='settings' />\n        </Stack>\n    );\n}\n","size_bytes":306},"components/ui/collapsible.tsx":{"content":"import { PropsWithChildren, useState } from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { ThemedText } from '@/components/themed-text';\nimport { ThemedView } from '@/components/themed-view';\nimport { IconSymbol } from '@/components/ui/icon-symbol';\nimport { Colors } from '@/constants/theme';\nimport { useColorScheme } from '@/hooks/use-color-scheme';\n\nexport function Collapsible({ children, title }: PropsWithChildren & { title: string }) {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst theme = useColorScheme() ?? 'light';\n\n\treturn (\n\t\t<ThemedView>\n\t\t\t<TouchableOpacity\n\t\t\t\tstyle={styles.heading}\n\t\t\t\tonPress={() => setIsOpen((value) => !value)}\n\t\t\t\tactiveOpacity={0.8}>\n\t\t\t\t<IconSymbol\n\t\t\t\t\tname='chevron.right'\n\t\t\t\t\tsize={18}\n\t\t\t\t\tweight='medium'\n\t\t\t\t\tcolor={theme === 'light' ? Colors.light.icon : Colors.dark.icon}\n\t\t\t\t\tstyle={{ transform: [{ rotate: isOpen ? '90deg' : '0deg' }] }}\n\t\t\t\t/>\n\n\t\t\t\t<ThemedText type='defaultSemiBold'>{title}</ThemedText>\n\t\t\t</TouchableOpacity>\n\t\t\t{isOpen && <ThemedView style={styles.content}>{children}</ThemedView>}\n\t\t</ThemedView>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\theading: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tgap: 6,\n\t},\n\tcontent: {\n\t\tmarginTop: 6,\n\t\tmarginLeft: 24,\n\t},\n});\n","size_bytes":1282},"components/account/profile/EditableField.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput } from 'react-native';\n\ninterface EditableFieldProps {\n    label: string;\n    value: string;\n    onChangeText: (text: string) => void;\n    isEditing: boolean;\n    icon?: React.ReactNode;\n    keyboardType?: 'default' | 'email-address' | 'phone-pad';\n    autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n}\n\nexport const EditableField: React.FC<EditableFieldProps> = ({\n    label,\n    value,\n    onChangeText,\n    isEditing,\n    icon,\n    keyboardType = 'default',\n    autoCapitalize,\n}) => {\n    return (\n        <View className='mb-4'>\n            <View className='flex-row items-center mb-2'>\n                {icon}\n                <Text className='ml-2 text-sm text-gray-600 font-medium'>{label}</Text>\n            </View>\n            {isEditing ? (\n                <TextInput\n                    value={value}\n                    onChangeText={onChangeText}\n                    className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                    keyboardType={keyboardType}\n                    autoCapitalize={autoCapitalize}\n                />\n            ) : (\n                <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                    <Text className='text-gray-900'>{value}</Text>\n                </View>\n            )}\n        </View>\n    );\n};\n","size_bytes":1347},"components/credit/details/CustomerDetailHeader.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { ChevronLeft, Trash2 } from 'lucide-react-native';\nimport { CreditRatingBadge } from '../CreditRatingBadge';\nimport { CreditRating } from '@/types';\n\ninterface CustomerDetailHeaderProps {\n\tcustomerName: string;\n\tphoneNumber: string;\n\trating: CreditRating;\n\tonBack: () => void;\n\tonDelete: () => void;\n}\n\nexport const CustomerDetailHeader: React.FC<CustomerDetailHeaderProps> = ({\n\tcustomerName,\n\tphoneNumber,\n\trating,\n\tonBack,\n\tonDelete,\n}) => {\n\treturn (\n\t\t<View className='bg-white px-4 py-3 flex-row items-center justify-between border-b border-gray-200'>\n\t\t\t<View className='flex-row items-center flex-1'>\n\t\t\t\t<TouchableOpacity className='mr-3' onPress={onBack}>\n\t\t\t\t\t<ChevronLeft size={24} color='#000' />\n\t\t\t\t</TouchableOpacity>\n\t\t\t\t<View className='flex-1'>\n\t\t\t\t\t<Text className='text-xl font-semibold'>{customerName}</Text>\n\t\t\t\t\t<Text className='text-sm text-gray-500'>{phoneNumber}</Text>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t\t<View className='flex-row items-center'>\n\t\t\t\t<View className='mr-2'>\n\t\t\t\t\t<CreditRatingBadge rating={rating} size='md' />\n\t\t\t\t</View>\n\t\t\t\t<TouchableOpacity onPress={onDelete}>\n\t\t\t\t\t<Trash2 size={22} color='#ef4444' />\n\t\t\t\t</TouchableOpacity>\n\t\t\t</View>\n\t\t</View>\n\t);\n};\n","size_bytes":1289},"components/inventory/category/CategoryStats.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\n\ninterface CategoryStatsProps {\n  totalItems: number;\n  lowStockItems: number;\n  outOfStockItems: number;\n}\n\nexport const CategoryStats: React.FC<CategoryStatsProps> = ({\n  totalItems,\n  lowStockItems,\n  outOfStockItems\n}) => {\n  return (\n    <View className=\"flex-row items-center mb-4\">\n      <Text className=\"text-gray-600 text-sm mr-4\">{totalItems} items</Text>\n      <Text className=\"text-gray-600 text-sm mr-4\">•</Text>\n      <Text className=\"text-gray-600 text-sm mr-4\">{lowStockItems} low stock</Text>\n      <Text className=\"text-gray-600 text-sm mr-4\">•</Text>\n      <Text className=\"text-gray-600 text-sm\">{outOfStockItems} out of stock</Text>\n    </View>\n  );\n};","size_bytes":747},"app/(tabs)/credit/index.tsx":{"content":"import React from 'react';\nimport { ScrollView, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { CreditHeader } from '@/components/credit/CreditHeader';\nimport { CreditSummarySection } from '@/components/credit/CreditSummarySection';\nimport { CustomerCreditItem } from '@/components/credit/CustomerCreditItem';\nimport { useCreditManagement } from '@/hooks/useCreditManagement';\nimport { Customer } from '@/types';\nimport { RecordPaymentForm } from '@/components/credit/forms/RecordPaymentForm';\nimport { MOCK_CUSTOMERS } from '@/constants/credit';\nimport { router } from 'expo-router';\n\nconst CreditScreen: React.FC = () => {\n\tconst {\n\t\tcustomerName,\n\t\tamountPaid,\n\t\tsetAmountPaid,\n\t\tshowSuggestions,\n\t\tsearchQuery,\n\t\tsetSearchQuery,\n\t\tshowCreditRating,\n\t\tsetShowCreditRating,\n\t\ttotalAmount,\n\t\tfilteredCustomers,\n\t\tsuggestedCustomers,\n\t\thandleCustomerNameChange,\n\t\thandleSelectCustomer,\n\t\thandleRecordPayment,\n\t} = useCreditManagement(MOCK_CUSTOMERS);\n\n\tconst handleCustomerPress = (customer: Customer) => {\n\t\tconsole.log(customer);\n\t\trouter.push({\n\t\t\tpathname: '/credit/credit-details',\n\t\t\tparams: {\n\t\t\t\tcustomerId: customer.id,\n\t\t\t\tfirstName: customer.firstName,\n\t\t\t\tlastName: customer.lastName,\n\t\t\t\tphoneNumber: customer.phoneNumber,\n\t\t\t\tamount: customer.amount.toString(),\n\t\t\t\tdueDate: customer.dueDate,\n\t\t\t\trating: customer.rating,\n\t\t\t\tdaysLeft: customer.daysLeft.toString(),\n\t\t\t},\n\t\t});\n\t};\n\n\treturn (\n\t\t<SafeAreaView className='flex-1 bg-white'>\n\t\t\t<CreditHeader />\n\n\t\t\t<ScrollView className='flex-1'>\n\t\t\t\t<RecordPaymentForm\n\t\t\t\t\tcustomerName={customerName}\n\t\t\t\t\tonCustomerNameChange={handleCustomerNameChange}\n\t\t\t\t\tamountPaid={amountPaid}\n\t\t\t\t\tonAmountPaidChange={setAmountPaid}\n\t\t\t\t\tshowSuggestions={showSuggestions}\n\t\t\t\t\tsuggestedCustomers={suggestedCustomers}\n\t\t\t\t\tonSelectCustomer={handleSelectCustomer}\n\t\t\t\t\tonRecord={handleRecordPayment}\n\t\t\t\t/>\n\n\t\t\t\t<CreditSummarySection\n\t\t\t\t\ttotalAmount={totalAmount}\n\t\t\t\t\tshowCreditRating={showCreditRating}\n\t\t\t\t\tonCloseCreditRating={() => setShowCreditRating(false)}\n\t\t\t\t\tsearchQuery={searchQuery}\n\t\t\t\t\tonSearchChange={setSearchQuery}\n\t\t\t\t/>\n\n\t\t\t\t{/* Customer List */}\n\t\t\t\t<View className='px-4'>\n\t\t\t\t\t{filteredCustomers.map((customer) => (\n\t\t\t\t\t\t<CustomerCreditItem\n\t\t\t\t\t\t\tkey={customer.id}\n\t\t\t\t\t\t\tcustomer={customer}\n\t\t\t\t\t\t\tonPress={handleCustomerPress}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</View>\n\t\t\t</ScrollView>\n\t\t</SafeAreaView>\n\t);\n};\n\nexport default CreditScreen;\n","size_bytes":2460},"metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.server = {\n  ...config.server,\n  enhanceMiddleware: (middleware) => {\n    return (req, res, next) => {\n      res.setHeader('Access-Control-Allow-Origin', '*');\n      return middleware(req, res, next);\n    };\n  },\n};\n\nmodule.exports = withNativeWind(config, { input: './global.css' });\n","size_bytes":453},"components/account/store/StoreInfoCard.tsx":{"content":"import Business from '@/db/models/business';\nimport Store from '@/db/models/stores';\nimport { ChevronDown, Edit, Store as StoreIcon } from 'lucide-react-native';\nimport React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\n\ninterface StoreInfoCardProps {\n    store: Store | null;\n    business: Business | null;\n    onStoreEditPress: (storeExternalId: string) => void;\n    onSwitchStore: () => void;\n}\n\nexport const StoreInfoCard: React.FC<StoreInfoCardProps> = ({\n    store,\n    business,\n    onStoreEditPress,\n    onSwitchStore,\n}) => {\n    if (!store || !business) return <Text>No store selected</Text>;\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <View className='flex-row justify-between items-center mb-3'>\n                <View className='flex-row items-center'>\n                    <StoreIcon size={20} color='#374151' />\n                    <Text className='ml-2 font-semibold text-gray-900'>Store Information</Text>\n                </View>\n                <TouchableOpacity onPress={() => onStoreEditPress(store.externalId!)}>\n                    <Edit size={20} color='#374151' />\n                </TouchableOpacity>\n            </View>\n\n            <Text className='font-semibold text-gray-900 text-base mb-1'>{store.name}</Text>\n            <Text className='text-sm text-gray-500 mb-3'>Business: {business.name}</Text>\n\n            <TouchableOpacity\n                onPress={onSwitchStore}\n                className='border border-gray-200 rounded-lg p-3 flex-row justify-between items-center'>\n                <Text className='text-sm text-gray-700'>Switch Store</Text>\n                <View className='flex-row items-center'>\n                    <Text className='text-sm text-gray-900 mr-2'>{store.name}</Text>\n                    <ChevronDown size={16} color='#374151' />\n                </View>\n            </TouchableOpacity>\n        </View>\n    );\n};\n","size_bytes":1944},"components/inventory/FormInput.tsx":{"content":"import React from 'react';\nimport { Text, TextInput, View } from 'react-native';\n\ninterface Props {\n    label?: string;\n    required?: boolean;\n    placeholder?: string;\n    value: string;\n    onChangeText: (text: string) => void;\n    keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'decimal-pad';\n    multiline?: boolean;\n    numberOfLines?: number;\n    textAlignVertical?: 'top' | 'bottom' | 'center';\n}\n\nconst FormInput = ({\n    label,\n    required = false,\n    placeholder,\n    value,\n    onChangeText,\n    keyboardType = 'default',\n    multiline = false,\n    numberOfLines = 1,\n    textAlignVertical = 'center',\n}: Props) => {\n    return (\n        <View>\n            <Text className='text-base font-semibold text-black mb-2'>\n                {label} {required && <Text className='text-red-500'>*</Text>}\n            </Text>\n            <TextInput\n                className='bg-gray-100 rounded-lg px-4 py-3 text-gray-700 text-base'\n                placeholder={placeholder}\n                value={value}\n                onChangeText={onChangeText}\n                keyboardType={keyboardType}\n                placeholderTextColor='#999'\n                multiline={multiline}\n                numberOfLines={numberOfLines}\n                textAlignVertical={textAlignVertical}\n            />\n        </View>\n    );\n};\n\nexport default FormInput;\n","size_bytes":1370},"db/models/business.ts":{"content":"import { Model, Q, Query, Relation } from '@nozbe/watermelondb';\nimport {\n    children,\n    date,\n    field,\n    lazy,\n    reader,\n    readonly,\n    relation,\n    writer,\n} from '@nozbe/watermelondb/decorators';\n// avoid importing database at module top-level to prevent require cycles\n// import { database } from '..';\nimport type Store from './stores';\nimport type User from './users';\n\nexport default class Business extends Model {\n    static table = 'businesses';\n    static associations = {\n        users: { type: 'belongs_to' as const, key: 'owner_id' },\n        stores: { type: 'has_many' as const, foreignKey: 'business_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('name') name!: string;\n    @field('business_type') businessType!: string;\n    @readonly @date('created_at') createdAt!: Date;\n    @readonly @date('updated_at') updatedAt!: Date;\n    @field('deleted') deleted!: boolean;\n\n    // Relations\n    @relation('users', 'owner_id') owner!: Relation<User>;\n    @children('stores') stores!: Query<Store>;\n\n    // Computed properties\n    get isActive(): boolean {\n        return !this.deleted;\n    }\n\n    get displayName(): string {\n        return this.name;\n    }\n\n    // Custom Queries\n    @lazy activeStores = this.stores.extend(Q.where('deleted', false), Q.where('status', 'active'));\n\n    // Query helpers\n    @reader static async findByExternalId(externalId: string) {\n        // lazy import to avoid require cycles\n        const { database } = await import('..');\n        const businesses = await database\n            .get<Business>('businesses')\n            .query(Q.where('external_id', externalId), Q.where('deleted', false))\n            .fetch();\n        return businesses[0] || null;\n    }\n\n    // Writers\n    @writer async markAsDeleted() {\n        await this.update((business) => {\n            business.deleted = true;\n        });\n    }\n}\n","size_bytes":1891},"components/inventory/FilterButton.tsx":{"content":"import { FilterState } from '@/types';\nimport { Feather, MaterialIcons } from '@expo/vector-icons';\nimport React from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\n\ninterface FilterButtonProps {\n    type: keyof FilterState;\n    isActive: boolean;\n    onPress: () => void;\n}\n\nexport const FilterButton: React.FC<FilterButtonProps> = ({ type, isActive, onPress }) => {\n    const getButtonConfig = () => {\n        switch (type) {\n            case 'Low':\n                return {\n                    icon: (\n                        <MaterialIcons\n                            name='low-priority'\n                            size={14}\n                            color={isActive ? 'white' : '#3B82F6'}\n                        />\n                    ),\n                    text: 'Low',\n                    activeClass: 'bg-blue-600',\n                    inactiveClass: 'bg-blue-100',\n                    activeTextClass: 'text-white',\n                    inactiveTextClass: 'text-blue-600',\n                };\n            case 'Out':\n                return {\n                    icon: (\n                        <Feather name='calendar' size={14} color={isActive ? 'white' : '#6B7280'} />\n                    ),\n                    text: 'Out',\n                    activeClass: 'bg-gray-800',\n                    inactiveClass: 'bg-gray-100',\n                    activeTextClass: 'text-white',\n                    inactiveTextClass: 'text-gray-600',\n                };\n            case 'Ordered':\n                return {\n                    icon: (\n                        <Feather\n                            name='shopping-cart'\n                            size={14}\n                            color={isActive ? 'white' : '#6B7280'}\n                        />\n                    ),\n                    text: 'Ordered',\n                    activeClass: 'bg-gray-800',\n                    inactiveClass: 'bg-gray-100',\n                    activeTextClass: 'text-white',\n                    inactiveTextClass: 'text-gray-600',\n                };\n        }\n    };\n\n    const config = getButtonConfig();\n\n    return (\n        <TouchableOpacity\n            className={`flex-row items-center px-2 py-2 rounded-lg mr-2 ${\n                isActive ? config?.activeClass : config?.inactiveClass\n            }`}\n            onPress={onPress}>\n            {config?.icon}\n            <Text\n                className={`font-medium ml-1 text-xs ${\n                    isActive ? config?.activeTextClass : config?.inactiveTextClass\n                }`}>\n                {config?.text}\n            </Text>\n        </TouchableOpacity>\n    );\n};\n","size_bytes":2641},"components/checkout/PaymentMethodCard.tsx":{"content":"import React, { useRef } from 'react';\nimport { TouchableOpacity, Animated, View, Text } from 'react-native';\nimport { PaymentMethod } from '@/types';\n\ninterface PaymentMethodCardProps {\n  method: PaymentMethod;\n  isSelected: boolean;\n  onSelect: (methodId: string) => void;\n}\n\nexport const PaymentMethodCard: React.FC<PaymentMethodCardProps> = ({\n  method,\n  isSelected,\n  onSelect\n}) => {\n  const scaleValue = useRef(new Animated.Value(1)).current;\n\n  const handlePressIn = () => {\n    Animated.spring(scaleValue, {\n      toValue: 0.98,\n      useNativeDriver: true,\n      tension: 400,\n      friction: 10,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.spring(scaleValue, {\n      toValue: 1,\n      useNativeDriver: true,\n      tension: 400,\n      friction: 10,\n    }).start();\n  };\n\n  const IconComponent = method.icon;\n\n  return (\n    <TouchableOpacity\n      onPress={() => onSelect(method.id)}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      activeOpacity={0.95}\n      className=\"mb-3\"\n    >\n      <Animated.View\n        className={`bg-white rounded-xl p-4 border-2 ${\n          isSelected ? 'border-gray-900' : 'border-transparent'\n        }`}\n        style={{\n          transform: [{ scale: scaleValue }],\n          shadowColor: '#000',\n          shadowOffset: {\n            width: 0,\n            height: 2,\n          },\n          shadowOpacity: isSelected ? 0.1 : 0.05,\n          shadowRadius: isSelected ? 6 : 4,\n          elevation: isSelected ? 4 : 2,\n        }}\n      >\n        <View className=\"flex-row items-center\">\n          <View \n            className=\"w-10 h-10 rounded-lg items-center justify-center mr-3\"\n            style={{ backgroundColor: method.bgColor }}\n          >\n            <IconComponent size={20} color={method.color} />\n          </View>\n          <View className=\"flex-1\">\n            <Text className=\"text-gray-900 font-semibold text-base mb-1\">\n              {method.name}\n            </Text>\n            <Text className=\"text-gray-500 text-sm\">\n              {method.description}\n            </Text>\n          </View>\n          {isSelected && (\n            <View className=\"w-6 h-6 bg-gray-900 rounded-full items-center justify-center\">\n              <View className=\"w-2 h-2 bg-white rounded-full\" />\n            </View>\n          )}\n        </View>\n      </Animated.View>\n    </TouchableOpacity>\n  );\n};\n","size_bytes":2389},"app/auth/account.tsx":{"content":"import { AuthButton } from '@/components/auth/AuthButton';\nimport { FormInput } from '@/components/auth/FormInput';\n// import { logout } from '@/models/db/services/userService';\n// import Session from '@/models/db/sessions';\n// import User from '@/db/models/users';\nimport { UserData } from '@/types';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport StoreSwitcher from '@/components/StoreSwitcher';\nimport { Session, User } from '@/db';\nimport { logout } from '@/db/services/userService';\nimport { useRouter } from 'expo-router';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\ninterface AccountScreenProps {\n    activeSession: Session | null;\n    user: User | null;\n    isAuthenticated: boolean;\n}\n\nconst AccountScreenComponent = ({ activeSession, user, isAuthenticated }: AccountScreenProps) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [editedName, setEditedName] = useState('');\n    const [editedEmail, setEditedEmail] = useState('');\n    const [editedPhone, setEditedPhone] = useState('');\n    const [saving, setSaving] = useState(false);\n    const router = useRouter();\n\n    useEffect(() => {\n        console.log('🔄 Component re-rendered with:', {\n            activeSession: activeSession?.id,\n            user: user?.id,\n            isAuthenticated,\n        });\n    }, [activeSession, user, isAuthenticated]);\n\n    const handleCreateAccount = useCallback(() => {\n        router.push('/auth/signup');\n    }, [router]);\n\n    const handleLogout = useCallback(async () => {\n        console.log('🚪 Logging out...');\n        await logout();\n    }, []);\n\n    const handleEdit = useCallback(() => {\n        if (user) {\n            setEditedName(user.name || '');\n            setEditedEmail(user.email || '');\n            setEditedPhone(user.phone || '');\n            setIsEditing(true);\n        }\n    }, [user]);\n\n    const handleSave = useCallback(async () => {\n        if (!user) return;\n\n        setSaving(true);\n        try {\n            console.log('💾 Saving user data...');\n            const updateData: Partial<UserData> = {\n                name: editedName || user.name,\n                email: editedEmail || user.email,\n                phone: editedPhone || user.phone,\n                externalId: user.externalId,\n                isOwner: user.isOwner,\n            };\n\n            // Persist user using WatermelonDB model instance directly\n            await user.updateUserInfo(updateData);\n\n            setIsEditing(false);\n            console.log('✅ User data saved successfully');\n        } catch (error) {\n            console.error('❌ Error updating user:', error);\n        } finally {\n            setSaving(false);\n        }\n    }, [user, editedName, editedEmail, editedPhone]);\n\n    const handleCancel = useCallback(() => {\n        setIsEditing(false);\n    }, []);\n\n    return (\n        <SafeAreaView className='flex-1 bg-gray-50'>\n            {!isAuthenticated ? (\n                <View className='flex-1 justify-center items-center px-4'>\n                    <View className='bg-white rounded-2xl p-6 shadow-md w-full max-w-md'>\n                        <Text className='text-xl font-semibold text-center mb-4'>Welcome Back</Text>\n                        <Text className='text-gray-500 text-center mb-6'>\n                            Please sign in to access your account\n                        </Text>\n                        <AuthButton\n                            title='Sign In'\n                            onPress={handleCreateAccount}\n                            variant='primary'\n                        />\n                    </View>\n                </View>\n            ) : (\n                <View className='flex-1 p-4'>\n                    <View className='bg-white rounded-2xl p-6 shadow-md mb-4'>\n                        <View className='flex-row justify-between items-center mb-6'>\n                            <Text className='text-xl font-semibold'>Profile</Text>\n                            {!isEditing && (\n                                <TouchableOpacity\n                                    onPress={handleEdit}\n                                    className='flex-row items-center'>\n                                    <Ionicons name='pencil' size={20} color='#4B5563' />\n                                    <Text className='ml-2 text-gray-600'>Edit</Text>\n                                </TouchableOpacity>\n                            )}\n                        </View>\n\n                        {isEditing ? (\n                            <View>\n                                <FormInput\n                                    label='Name'\n                                    placeholder='Enter your name'\n                                    value={editedName}\n                                    onChangeText={setEditedName}\n                                />\n                                <FormInput\n                                    label='Email'\n                                    placeholder='Enter your email'\n                                    value={editedEmail}\n                                    onChangeText={setEditedEmail}\n                                    keyboardType='email-address'\n                                    autoCapitalize='none'\n                                />\n                                <FormInput\n                                    label='Phone'\n                                    placeholder='Enter your phone number'\n                                    value={editedPhone}\n                                    onChangeText={setEditedPhone}\n                                    keyboardType='phone-pad'\n                                />\n                                <View className='flex-row justify-end space-x-4 mt-4'>\n                                    <AuthButton\n                                        title='Cancel'\n                                        onPress={handleCancel}\n                                        variant='secondary'\n                                    />\n                                    <AuthButton\n                                        title={saving ? 'Saving...' : 'Save'}\n                                        onPress={handleSave}\n                                        disabled={saving}\n                                    />\n                                </View>\n                            </View>\n                        ) : (\n                            <View className='space-y-4'>\n                                <View>\n                                    <Text className='text-gray-500 text-sm mb-1'>Name</Text>\n                                    <Text className='text-gray-900 font-medium'>\n                                        {user?.name || 'Not set'}\n                                    </Text>\n                                </View>\n                                <View>\n                                    <Text className='text-gray-500 text-sm mb-1'>Email</Text>\n                                    <Text className='text-gray-900 font-medium'>\n                                        {user?.email || 'Not set'}\n                                    </Text>\n                                </View>\n                                <View>\n                                    <Text className='text-gray-500 text-sm mb-1'>Phone</Text>\n                                    <Text className='text-gray-900 font-medium'>\n                                        {user?.phone || 'Not set'}\n                                    </Text>\n                                </View>\n                            </View>\n                        )}\n                    </View>\n                    {/* Store switcher - lets the user change the active store for the selected business */}\n                    <View className='bg-white rounded-2xl p-6 shadow-md mb-4'>\n                        <StoreSwitcher />\n                    </View>\n\n                    <View className='bg-white rounded-2xl p-6 shadow-md mb-4'>\n                        <Text className='text-lg font-semibold mb-2'>Session Status</Text>\n                        <View className='flex-row items-center'>\n                            <View\n                                className={`w-3 h-3 rounded-full mr-2 ${\n                                    activeSession?.isActive ? 'bg-green-500' : 'bg-red-500'\n                                }`}\n                            />\n                            <Text className='text-gray-600'>\n                                {activeSession?.isActive ? 'Active Session' : 'Inactive'}\n                            </Text>\n                        </View>\n                        {activeSession && (\n                            <Text className='text-xs text-gray-400 mt-1'>\n                                Session ID: {activeSession.id}\n                            </Text>\n                        )}\n                    </View>\n\n                    <AuthButton title='Logout' onPress={handleLogout} variant='secondary' />\n                </View>\n            )}\n        </SafeAreaView>\n    );\n};\nexport default AccountScreenComponent;\n","size_bytes":9246},"components/account/stats/StatsCard.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { LucideIcon } from 'lucide-react-native';\n\ninterface StatsCardProps {\n    icon: LucideIcon;\n    iconColor: string;\n    label: string;\n    value: string | number;\n    valueColor?: string;\n    bgColor: string;\n}\n\nexport const StatsCard: React.FC<StatsCardProps> = ({\n    icon: Icon,\n    iconColor,\n    label,\n    value,\n    valueColor = 'text-gray-900',\n    bgColor,\n}) => {\n    return (\n        <View className={`flex-1 rounded-xl ${bgColor} p-4`}>\n            <View className='flex-row items-center mb-2'>\n                <Icon size={16} color={iconColor} />\n                <Text className='ml-1 text-xs text-gray-600'>{label}</Text>\n            </View>\n            <Text className={`text-2xl font-bold ${valueColor}`}>{value}</Text>\n        </View>\n    );\n};\n","size_bytes":839},"global.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;","size_bytes":58},"components/account/profile/EditModeActions.tsx":{"content":"import React from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { Save } from 'lucide-react-native';\n\ninterface EditModeActionsProps {\n    onSave: () => void;\n    onCancel: () => void;\n}\n\nexport const EditModeActions: React.FC<EditModeActionsProps> = ({ onSave, onCancel }) => {\n    return (\n        <View className='flex-row gap-3 mb-4'>\n            <TouchableOpacity\n                onPress={onSave}\n                className='flex-1 bg-black rounded-lg py-3 flex-row items-center justify-center'>\n                <Save size={20} color='#FFFFFF' />\n                <Text className='ml-2 text-white font-semibold'>Save Changes</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n                onPress={onCancel}\n                className='flex-1 bg-white border border-gray-300 rounded-lg py-3'>\n                <Text className='text-gray-700 font-semibold text-center'>Cancel</Text>\n            </TouchableOpacity>\n        </View>\n    );\n};\n","size_bytes":993},"hooks/useCreditManagement.ts":{"content":"import { useState, useMemo } from 'react';\nimport { Customer } from '@/types';\n\nexport const useCreditManagement = (customers: Customer[]) => {\n\tconst [customerName, setCustomerName] = useState('');\n\tconst [amountPaid, setAmountPaid] = useState('');\n\tconst [showSuggestions, setShowSuggestions] = useState(false);\n\tconst [searchQuery, setSearchQuery] = useState('');\n\tconst [showCreditRating, setShowCreditRating] = useState(true);\n\n\tconst totalAmount = useMemo(\n\t\t() => customers.reduce((sum, customer) => sum + customer.amount, 0),\n\t\t[customers],\n\t);\n\n\tconst filteredCustomers = useMemo(\n\t\t() =>\n\t\t\tcustomers.filter((customer) => {\n\t\t\t\tconst fullName = `${customer.firstName} ${customer.lastName}`.toLowerCase();\n\t\t\t\tconst query = searchQuery.toLowerCase();\n\t\t\t\treturn fullName.includes(query) || customer.phoneNumber.includes(query);\n\t\t\t}),\n\t\t[customers, searchQuery],\n\t);\n\n\tconst suggestedCustomers = useMemo(\n\t\t() =>\n\t\t\tcustomers.filter((customer) => {\n\t\t\t\tconst fullName = `${customer.firstName} ${customer.lastName}`.toLowerCase();\n\t\t\t\treturn fullName.includes(customerName.toLowerCase());\n\t\t\t}),\n\t\t[customers, customerName],\n\t);\n\n\tconst handleCustomerNameChange = (text: string) => {\n\t\tsetCustomerName(text);\n\t\tsetShowSuggestions(text.length > 0);\n\t};\n\n\tconst handleSelectCustomer = (customer: Customer) => {\n\t\tsetCustomerName(`${customer.firstName} ${customer.lastName}`);\n\t\tsetShowSuggestions(false);\n\t};\n\n\tconst handleRecordPayment = () => {\n\t\tconsole.log('Recording payment:', { customerName, amountPaid });\n\t\tsetCustomerName('');\n\t\tsetAmountPaid('');\n\t};\n\n\treturn {\n\t\tcustomerName,\n\t\tamountPaid,\n\t\tsetAmountPaid,\n\t\tshowSuggestions,\n\t\tsearchQuery,\n\t\tsetSearchQuery,\n\t\tshowCreditRating,\n\t\tsetShowCreditRating,\n\t\ttotalAmount,\n\t\tfilteredCustomers,\n\t\tsuggestedCustomers,\n\t\thandleCustomerNameChange,\n\t\thandleSelectCustomer,\n\t\thandleRecordPayment,\n\t};\n};\n","size_bytes":1861},"components/inventory/InventoryFilters.tsx":{"content":"import { Ionicons } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport { Text, TextInput, TouchableOpacity, View } from \"react-native\";\n\ninterface Props {\n  searchQuery: string;\n  onSearchChange: (text: string) => void;\n}\n\nconst InventoryFilters = ({ searchQuery, onSearchChange }: Props) => {\n  return (\n    <View className=\"flex-col space-x-3\">\n      <View className=\"flex-1 bg-gray-100 rounded-xl px-4 py-3 flex-row items-center\">\n        <Ionicons name=\"search\" size={20} color=\"#666\" />\n        <TextInput\n          className=\"flex-1 ml-2 text-gray-700\"\n          placeholder=\"Search inventory\"\n          value={searchQuery}\n          onChangeText={onSearchChange}\n          placeholderTextColor=\"#999\"\n        />\n        <TouchableOpacity className=\"mx-2\">\n            <Ionicons name=\"options-outline\" size={20} color=\"#666\" />\n        </TouchableOpacity>\n      </View>\n      <View className=\"flex-row space-x-3 my-2\">\n        <TouchableOpacity className=\"mx-2 bg-gray-100 rounded-xl px-4 py-3 flex-row items-center\">\n          <Ionicons name=\"warning-outline\" size={16} color=\"#f59e0b\" />\n          <Text className=\"ml-2 text-gray-700 font-medium\">Low</Text>\n        </TouchableOpacity>\n        <TouchableOpacity className=\"mx-2 bg-gray-100 rounded-xl px-4 py-3 flex-row items-center\">\n          <Ionicons name=\"archive-outline\" size={16} color=\"#666\" />\n          <Text className=\"ml-2 text-gray-700 font-medium\">Out</Text>\n        </TouchableOpacity>\n        <TouchableOpacity className=\"mx-2 bg-gray-100 rounded-xl px-4 py-3 flex-row items-center\">\n          <Ionicons name=\"cart-outline\" size={16} color=\"#666\" />\n          <Text className=\"ml-2 text-gray-700 font-medium\">Ordered</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default InventoryFilters;\n","size_bytes":1805},"contexts/AuthContext.tsx":{"content":"import { authenticateUser, logout as authLogout, currentUser$ } from '@/db/services/userService';\nimport type Session from '@/db/models/sessions';\nimport type User from '@/db/models/users';\n\nimport React, { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport { Subscription } from 'rxjs';\nimport { activeSession$, isAuthenticated$ } from '@/db/services/sessionsService';\n\nexport type AuthState = {\n    isAuthenticated: boolean;\n    activeSession: Session | null;\n    user: User | null;\n    isLoading: boolean; // initial auth check (e.g. restoring session)\n    isUpdating: boolean; // when login/logout is in progress\n};\n\nexport type AuthContextValue = AuthState & {\n    login: (email: string, password?: string) => Promise<User | null>;\n    logout: () => Promise<void>;\n};\n\nconst AuthContext = createContext<AuthContextValue | undefined>(undefined);\n\nexport const AuthProvider: React.FC<React.PropsWithChildren> = ({ children }) => {\n    const [activeSession, setActiveSession] = useState<Session | null>(null);\n    const [user, setUser] = useState<User | null>(null);\n    const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    // subscribe to observables (reactive updates from DB/session)\n    useEffect(() => {\n        const subs: Subscription[] = [];\n        // The `activeSession$`, `currentUser$` and `isAuthenticated$` observables are\n        // defined in `services/userService.ts` and are backed by WatermelonDB\n        // reactive queries. Subscribing to them keeps this React context in sync with\n        // database changes (for example: sessions created/updated elsewhere in the app).\n        //\n        // We intentionally use direct subscription here (not `useObservable`) because\n        // we want explicit control over lifecycle and multiple subscriptions.\n        subs.push(activeSession$.subscribe(setActiveSession));\n        subs.push(currentUser$.subscribe(setUser));\n        subs.push(\n            isAuthenticated$.subscribe((val) => {\n                // update the boolean auth flag and mark the initial loading as finished\n                // once we have a concrete auth state from the DB.\n                setIsAuthenticated(val);\n                setIsLoading(false); // once we know auth state, we’re done loading\n            }),\n        );\n\n        return () => subs.forEach((s) => s.unsubscribe());\n    }, []);\n\n    const value: AuthContextValue = useMemo(\n        () => ({\n            isAuthenticated,\n            activeSession,\n            user,\n            isLoading,\n            isUpdating,\n            login: async (email: string, password?: string) => {\n                try {\n                    setIsUpdating(true);\n                    // `authenticateUser` uses WatermelonDB queries and will create or\n                    // activate a session for the provided user. It returns the `User` model\n                    // if authentication succeeded, or `null` otherwise.\n                    //\n                    // Note: password validation is kept simple in the current service; if\n                    // you add hashing/checks, ensure `authenticateUser` performs them.\n                    return await authenticateUser({ email, password });\n                } finally {\n                    setIsUpdating(false);\n                }\n            },\n            logout: async () => {\n                try {\n                    setIsUpdating(true);\n                    // `authLogout` deactivates sessions and clears current session state\n                    // in the DB. The subscriptions above will react to those DB changes\n                    // and update `isAuthenticated`, `activeSession`, and `user`.\n                    await authLogout();\n                } finally {\n                    setIsUpdating(false);\n                }\n            },\n        }),\n        [isAuthenticated, activeSession, user, isLoading, isUpdating],\n    );\n\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = (): AuthContextValue => {\n    const ctx = useContext(AuthContext);\n    if (!ctx) throw new Error('useAuth must be used within AuthProvider');\n    return ctx;\n};\n","size_bytes":4305},"app/(tabs)/account/profile.tsx":{"content":"import React, { useEffect } from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router, useLocalSearchParams } from 'expo-router';\nimport { UserProfileData } from '@/types/';\n\nimport { useProfileEdit } from '@/hooks/useProfileEdit';\nimport { BasicInfoCard } from '@/components/account/profile/BasicInfoCard';\nimport { ProfileHeader } from '@/components/account/profile/ProfileHeader';\nimport { ContactInfoCard } from '@/components/account/profile/ContactInfoCard';\nimport { WorkInfoCard } from '@/components/account/profile/WorkInfoCard';\nimport { EditModeActions } from '@/components/account/profile/EditModeActions';\nimport { userData } from '@/constants/account';\n\nconst MyProfileScreen: React.FC = () => {\n    const params = useLocalSearchParams();\n    const externalId = params?.externalId as string;\n\n    const {\n        isEditing,\n        editedData,\n        setIsEditing,\n        handleEdit,\n        handleCancel,\n        handleSaveChanges,\n        updateField,\n    } = useProfileEdit(userData, externalId);\n\n    // Check if we should start in edit mode\n    useEffect(() => {\n        if (params?.edit === 'true') {\n            setIsEditing(true);\n        }\n    }, [params?.edit, setIsEditing]);\n\n    // TODO: Fetch user data when externalId changes\n    useEffect(() => {\n        if (externalId) {\n            console.log('TODO: Fetch user data for externalId:', externalId);\n            // const user = await fetchUserByExternalId(externalId);\n            // Update userData state\n        }\n    }, [externalId]);\n\n    const handleBack = () => {\n        router.back();\n    };\n\n    return (\n        <SafeAreaView className='flex-1 bg-gray-50'>\n            <ScrollView className='flex-1' showsVerticalScrollIndicator={false}>\n                <ProfileHeader isEditing={isEditing} onBack={handleBack} onEdit={handleEdit} />\n\n                <View className='p-4'>\n                    <BasicInfoCard\n                        firstName={editedData.firstName}\n                        lastName={editedData.lastName}\n                        role={editedData.role}\n                        isEditing={isEditing}\n                        onFirstNameChange={(text) => updateField('firstName', text)}\n                        onLastNameChange={(text) => updateField('lastName', text)}\n                        onRoleChange={(text) => updateField('role', text)}\n                    />\n\n                    <ContactInfoCard\n                        phone={editedData.phone}\n                        email={editedData.email}\n                        emergencyContact={editedData.emergencyContact}\n                        isEditing={isEditing}\n                        onPhoneChange={(text) => updateField('phone', text)}\n                        onEmailChange={(text) => updateField('email', text)}\n                        onEmergencyContactChange={(text) => updateField('emergencyContact', text)}\n                    />\n\n                    <WorkInfoCard\n                        joinDate={editedData.joinDate}\n                        permissions={editedData.permissions}\n                    />\n\n                    {isEditing && (\n                        <EditModeActions onSave={handleSaveChanges} onCancel={handleCancel} />\n                    )}\n\n                    {/* Extra padding for bottom nav */}\n                    <View className='h-20' />\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n};\n\nexport default MyProfileScreen;\n","size_bytes":3535},"app/(tabs)/inventory/category.tsx":{"content":"import { CategoryHeader } from '@/components/common/CategoryHeader';\nimport { CategoryStats } from '@/components/inventory/category/CategoryStats';\nimport { SearchAndFilterRow } from '@/components/inventory/SearchAndFilterRow';\n// import { inventoryData } from '@/constants/sampleProducts';\nimport { useCategoryProducts } from '@/hooks/useCategoryProducts';\nimport { router, useLocalSearchParams } from 'expo-router';\nimport React from 'react';\nimport { Keyboard, TouchableWithoutFeedback, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n// import { ALL_CATEGORIES_WITH_ALL, CATEGORIES } from '@/constants/categories';\nimport { InventoryList } from '@/components/inventory/InventoryItemsList';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { useInventoryData } from '@/hooks/useInventoryData';\nimport { useInventoryFilters } from '@/hooks/useInventoryFilters';\nimport { Product } from '@/types';\n\nconst CategoryDetailScreen: React.FC = () => {\n    const { selectedBusiness } = useBusiness();\n\n    // Get category from route params\n    const { categoryId, categoryName } = useLocalSearchParams();\n    const { inventory, categories } = useInventoryData();\n\n    const category = categories.find((cat) => cat.id === categoryId);\n\n    const {\n        searchQuery,\n        setSearchQuery,\n        selectedFilter,\n        toggleFilter,\n        isSearchFocused,\n        setIsSearchFocused,\n        filteredData,\n        stats,\n    } = useCategoryProducts(category?.name || '', inventory);\n\n    const { getFilterText } = useInventoryFilters(inventory);\n\n    const handleEditProduct = (item: any) => {\n        console.log('Edit product:', item);\n    };\n\n    const handleSaveItem = (updatedItem: Product) => {\n        // Update your inventory data\n        console.log('Save item:', updatedItem);\n        // TODO: Update state/database with updatedItem\n    };\n\n    const handleDeleteItem = (itemId: string) => {\n        // Delete item from inventory\n        console.log('Delete item:', itemId);\n        // TODO: Remove item from state/database\n    };\n\n    const dismissSearch = () => {\n        setIsSearchFocused(false);\n        Keyboard.dismiss();\n    };\n\n    const handleClearSearch = () => {\n        setSearchQuery('');\n        dismissSearch();\n    };\n\n    if (!category) {\n        return null; // Or show error screen\n    }\n\n    return (\n        <TouchableWithoutFeedback onPress={dismissSearch}>\n            <SafeAreaView className='flex-1 bg-gray-50'>\n                <View className='bg-white px-4 py-3'>\n                    <CategoryHeader category={category} onBack={() => router.back()} />\n\n                    <CategoryStats\n                        totalItems={stats.totalItems}\n                        lowStockItems={stats.lowStockItems}\n                        outOfStockItems={stats.outOfStockItems}\n                    />\n\n                    <SearchAndFilterRow\n                        searchQuery={searchQuery}\n                        onSearchChange={setSearchQuery}\n                        isSearchFocused={isSearchFocused}\n                        onSearchFocus={() => setIsSearchFocused(true)}\n                        onSearchBlur={() => setIsSearchFocused(false)}\n                        onClear={handleClearSearch}\n                        selectedFilter={selectedFilter}\n                        onToggleFilter={toggleFilter}\n                    />\n                </View>\n\n                <InventoryList\n                    data={filteredData}\n                    filterText={getFilterText()}\n                    onSave={handleSaveItem}\n                    onDelete={handleDeleteItem}\n                    availableCategories={categories}\n                />\n            </SafeAreaView>\n        </TouchableWithoutFeedback>\n    );\n};\n\nexport default CategoryDetailScreen;\n","size_bytes":3840},"components/checkout/PayButton.tsx":{"content":"import React from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface PayButtonProps {\n  onPress: () => void;\n  amount: number;\n  disabled?: boolean;\n}\n\nexport const PayButton: React.FC<PayButtonProps> = ({ onPress, amount, disabled = false }) => {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View className=\"bg-white px-4 py-4\" >\n      <TouchableOpacity\n        onPress={onPress}\n        className={`rounded-xl py-4 ${\n          disabled ? 'bg-gray-300' : 'bg-gray-900'\n        }`}\n        disabled={disabled}\n      >\n        <Text className=\"text-white text-center font-semibold text-lg\">\n          Pay ${amount.toFixed(2)}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n};","size_bytes":795},"components/checkout/categories-section.tsx":{"content":"// import { Category } from \"@/types\";\n// import React from \"react\";\n// import { Text, View } from \"react-native\";\n// import CategoryCard from \"./category-card\";\n\n// interface CategoryProps {\n//     categories: Category[];\n//     navigateToCategory: (category: Category) => void;\n// }\n\n// const CategoriesSection: React.FC<CategoryProps> = ({ categories, navigateToCategory }) => {\n//     return (\n//        <View className=\"px-4\">\n//           <Text className=\"text-lg font-semibold text-gray-900 mb-3\">\n//             Categories\n//           </Text>\n//           <View className=\"flex-row flex-wrap justify-between\">\n//             {categories.map((category: Category, index: number) => (\n//               <CategoryCard key={index} category={category} onPress={navigateToCategory} />\n//             ))}\n//           </View>\n//         </View>\n//     );\n// }\n\n// export default CategoriesSection;","size_bytes":897},"constants/theme.ts":{"content":"/**\n * Below are the colors that are used in the app. The colors are defined in the light and dark mode.\n * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.\n */\n\nimport { Platform } from 'react-native';\n\nconst tintColorLight = '#0a7ea4';\nconst tintColorDark = '#fff';\n\nexport const Colors = {\n  light: {\n    text: '#11181C',\n    background: '#fff',\n    tint: tintColorLight,\n    icon: '#687076',\n    tabIconDefault: '#687076',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#ECEDEE',\n    background: '#151718',\n    tint: tintColorDark,\n    icon: '#9BA1A6',\n    tabIconDefault: '#9BA1A6',\n    tabIconSelected: tintColorDark,\n  },\n};\n\nexport const Fonts = Platform.select({\n  ios: {\n    /** iOS `UIFontDescriptorSystemDesignDefault` */\n    sans: 'system-ui',\n    /** iOS `UIFontDescriptorSystemDesignSerif` */\n    serif: 'ui-serif',\n    /** iOS `UIFontDescriptorSystemDesignRounded` */\n    rounded: 'ui-rounded',\n    /** iOS `UIFontDescriptorSystemDesignMonospaced` */\n    mono: 'ui-monospace',\n  },\n  default: {\n    sans: 'normal',\n    serif: 'serif',\n    rounded: 'normal',\n    mono: 'monospace',\n  },\n  web: {\n    sans: \"system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif\",\n    serif: \"Georgia, 'Times New Roman', serif\",\n    rounded: \"'SF Pro Rounded', 'Hiragino Maru Gothic ProN', Meiryo, 'MS PGothic', sans-serif\",\n    mono: \"SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace\",\n  },\n});\n","size_bytes":1630},"db/services/businessService.ts":{"content":"import Business from '@/db/models/business';\nimport { BusinessStoreData } from '@/types';\nimport { Q } from '@nozbe/watermelondb';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { database, Store, storeCollection, userCollection } from '..';\n\n// Holds the currently selected business id (or null)\nconst selectedBusinessId$ = new BehaviorSubject<string | null>(null);\nexport const businessCollection = database.get<Business>('businesses');\n\n// Observable for the currently selected business (keeps reacting to DB changes)\nexport const selectedBusiness$: Observable<Business | null> = selectedBusinessId$.pipe(\n    switchMap((id) => {\n        if (!id) return of(null);\n        return businessCollection.findAndObserve(id).pipe(map((b) => (b && !b.deleted ? b : null)));\n    }),\n    distinctUntilChanged((a, b) => a?.id === b?.id),\n    shareReplay(1),\n);\n\n// Observable for all active businesses\nexport const activeBusinesses$: Observable<Business[]> = new Observable<Business[]>((observer) => {\n    businessCollection.query(Q.where('deleted', false)).observe().subscribe(observer);\n}).pipe(shareReplay(1));\n\n// CRUD Helpers\nexport async function findBusinessById(id: string): Promise<Business | null> {\n    try {\n        return await businessCollection.find(id);\n    } catch {\n        return null;\n    }\n}\n\nexport async function createBusiness(data: {\n    name: string;\n    businessType?: string;\n    owner?: string;\n}): Promise<Business | null> {\n    const user = await userCollection.find(data.owner || '');\n    try {\n        const b = await database.write(async () => {\n            return await database.get<Business>('businesses').create((biz) => {\n                biz.externalId = `biz_${Date.now()}_${Math.random().toString(36).slice(2)}`;\n                biz.name = data.name;\n                biz.businessType = data.businessType || '';\n                // owner relation stored as owner_id field in DB - set via relation on create\n                biz.owner.set(user);\n                biz.deleted = false;\n            });\n        });\n        // select the newly created business\n        selectedBusinessId$.next(b.id);\n        return b;\n    } catch (e) {\n        console.log('createBusiness error', e);\n        return null;\n    }\n}\n\nexport async function updateBusiness(\n    id: string,\n    patch: Partial<{ name: string; businessType: string; deleted: boolean }>,\n) {\n    const b = await findBusinessById(id);\n    if (!b) throw new Error('Business not found');\n    await database.write(async () => {\n        await b.update((row) => {\n            if (patch.name !== undefined) row.name = patch.name;\n            if (patch.businessType !== undefined) row.businessType = patch.businessType;\n            if (patch.deleted !== undefined) row.deleted = !!patch.deleted;\n        });\n    });\n}\n\nexport async function markBusinessDeleted(id: string) {\n    await updateBusiness(id, { deleted: true });\n    // if the deleted business was selected, clear selection\n    if (selectedBusinessId$.value === id) selectedBusinessId$.next(null);\n}\n\nexport function selectBusiness(id: string | null) {\n    selectedBusinessId$.next(id);\n}\n\nexport async function findByExternalId(externalId: string): Promise<Business | null> {\n    const list = await businessCollection\n        .query(Q.where('external_id', externalId), Q.where('deleted', false))\n        .fetch();\n    return list[0] || null;\n}\n\n/**\n * Create a business and an initial store in a single transaction.\n * - Creates a Business record and a Store record linked to it\n * - Marks the newly-created business as the selected business\n * - Selects the created store via the store service\n *\n * Returns the created Business and Store models, or { business: null, store: null }\n * on failure.\n */\nexport async function createBusinessWithStore(\n    data: BusinessStoreData,\n    ownerId?: string,\n): Promise<{ business: Business | null; store: Store | null }> {\n    try {\n        const owner = await userCollection.find(ownerId || '');\n        const result = await database.write(async () => {\n            const createdBusiness = await businessCollection.create((biz) => {\n                biz.externalId = `biz_${data.businessName}${Date.now()}_${Math.random().toString(36).slice(2)}`;\n                biz.name = data.businessName;\n                biz.businessType = '';\n                biz.owner.set(owner);\n                biz.deleted = false;\n            });\n\n            // create the primary store for this business\n            const createdStore = await storeCollection.create((store) => {\n                store.externalId = `str_${data.storeName}${Date.now()}_${Math.random().toString(36).slice(2)}`;\n                store.business.set(createdBusiness);\n                store.name = data.storeName;\n                store.address = data.storeAddress || '';\n                store.phone = data.storePhone || '';\n                store.email = data.storeEmail || '';\n                store.currency = 'Kes';\n                store.status = 'active';\n                store.deleted = false;\n                // set manager to owner if provided\n                store.manager?.set(owner);\n            });\n\n            return { createdBusiness, createdStore };\n        });\n\n        // select the newly created business and store for the app\n        if (result.createdBusiness) selectedBusinessId$.next(result.createdBusiness.id);\n        if (result.createdStore) {\n            // Lazy-import storeService to avoid a require-cycle between\n            // businessService and storeService (they reference each other).\n            // Importing inside the function ensures modules finish initializing\n            // before the cross-call happens.\n            try {\n                const { selectStore: svcSelectStore } = await import('./storeService');\n                svcSelectStore(result.createdStore.id);\n            } catch (e) {\n                console.log('createBusinessWithStore: failed to select store', e);\n            }\n        }\n\n        return { business: result.createdBusiness, store: result.createdStore };\n    } catch (e) {\n        console.log('createBusinessWithStore error', e);\n        return { business: null, store: null };\n    }\n}\n\nexport default {\n    selectedBusiness$,\n    activeBusinesses$,\n    selectBusiness,\n    findBusinessById,\n    createBusiness,\n    updateBusiness,\n    markBusinessDeleted,\n    findByExternalId,\n};\n","size_bytes":6478},"components/checkout/ProductList.tsx":{"content":"import ProductCard from '@/components/checkout/ProductCard';\nimport { Category, Product } from '@/types';\nimport React from 'react';\nimport { ScrollView, View } from 'react-native';\nimport { EmptyState } from '../common/EmptyState';\n\n// we may neeed a products directory - or maybe not\n\ninterface ProductListProps {\n    products: Product[];\n    category: Category;\n    searchQuery: string;\n    onAddToCart: (product: Product) => void;\n    onRemoveFromCart: (product: Product) => void;\n}\n\nexport const ProductList: React.FC<ProductListProps> = ({\n    products,\n    category,\n    searchQuery,\n    onAddToCart,\n    onRemoveFromCart,\n}) => {\n    const getEmptyStateMessage = () => {\n        if (searchQuery) {\n            return `No results for \"${searchQuery}\" in ${category.name}`;\n        }\n        return `${category.name} products will be added soon`;\n    };\n\n    return (\n        <ScrollView className='flex-1 px-4 pt-2' showsVerticalScrollIndicator={false}>\n            {products.length > 0 ? (\n                products.map((product: Product) => (\n                    <ProductCard\n                        key={product.id}\n                        category={category}\n                        product={product}\n                        onAddToCart={onAddToCart}\n                        onRemoveFromCart={onRemoveFromCart}\n                    />\n                ))\n            ) : (\n                <EmptyState\n                    icon={category.icon}\n                    title='No products found'\n                    description={getEmptyStateMessage()}\n                />\n            )}\n\n            {/* Bottom padding for cart bar */}\n            <View className='h-24' />\n        </ScrollView>\n    );\n};\n","size_bytes":1706},"components/credit/transaction/PaymentMethodSelector.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { DollarSign, Smartphone, Building2, CreditCard } from 'lucide-react-native';\nimport { PaymentMethodType } from '@/types';\n\ninterface PaymentMethodSelectorProps {\n\tselectedMethod: PaymentMethodType | '';\n\tonSelectMethod: (method: PaymentMethodType) => void;\n}\n\nexport const PaymentMethodSelector: React.FC<PaymentMethodSelectorProps> = ({\n\tselectedMethod,\n\tonSelectMethod,\n}) => {\n\tconst methods: { id: PaymentMethodType; label: string; icon: any }[] = [\n\t\t{ id: 'Cash', label: 'Cash', icon: DollarSign },\n\t\t{ id: 'M-Pesa', label: 'M-Pesa', icon: Smartphone },\n\t\t{ id: 'Bank Transfer', label: 'Bank Transfer', icon: Building2 },\n\t\t{ id: 'Card', label: 'Card', icon: CreditCard },\n\t];\n\n\treturn (\n\t\t<View className='mb-4'>\n\t\t\t<Text className='text-sm text-gray-600 mb-2'>Payment Method</Text>\n\t\t\t<View className='flex-row flex-wrap gap-2'>\n\t\t\t\t{methods.map((method) => {\n\t\t\t\t\tconst Icon = method.icon;\n\t\t\t\t\tconst isSelected = selectedMethod === method.id;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\t\tkey={method.id}\n\t\t\t\t\t\t\tclassName={`flex-1 min-w-[45%] py-3 rounded-lg border ${\n\t\t\t\t\t\t\t\tisSelected ? 'bg-black border-black' : 'bg-white border-gray-300'\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\tonPress={() => onSelectMethod(method.id)}>\n\t\t\t\t\t\t\t<View className='flex-row items-center justify-center'>\n\t\t\t\t\t\t\t\t<Icon size={18} color={isSelected ? '#fff' : '#666'} />\n\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\tclassName={`ml-2 font-medium ${\n\t\t\t\t\t\t\t\t\t\tisSelected ? 'text-white' : 'text-gray-700'\n\t\t\t\t\t\t\t\t\t}`}>\n\t\t\t\t\t\t\t\t\t{method.label}\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</View>\n\t\t</View>\n\t);\n};\n","size_bytes":1685},"app/(tabs)/account/store-profile.tsx":{"content":"import { EditModeActions } from '@/components/account/profile/EditModeActions';\nimport { BasicStoreInfoCard } from '@/components/account/store/BasicStoreInfoCard';\nimport { BusinessDetailsCard } from '@/components/account/store/BusinessDetailsCard';\nimport { StoreContactCard } from '@/components/account/store/StoreContactCard';\nimport { StoreHeader } from '@/components/account/store/StoreHeader';\nimport { initialStoreData } from '@/constants/account';\nimport { useStoreEdit } from '@/hooks/useStoreEdit';\nimport { router, useLocalSearchParams } from 'expo-router';\nimport React, { useEffect } from 'react';\nimport { ScrollView, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nconst StoreInformationScreen: React.FC = () => {\n    const params = useLocalSearchParams();\n    const externalId = params?.externalId as string;\n\n    const {\n        isEditing,\n        editedData,\n        storeData,\n        setIsEditing,\n        handleEdit,\n        handleCancel,\n        handleSaveChanges,\n        updateField,\n    } = useStoreEdit(initialStoreData, externalId);\n\n    // Check if we should start in edit mode\n    useEffect(() => {\n        if (params?.edit === 'true') {\n            setIsEditing(true);\n        }\n    }, [params?.edit, setIsEditing]);\n\n    // TODO: Fetch store data when externalId changes\n    useEffect(() => {\n        if (externalId) {\n            console.log('TODO: Fetch store data for externalId:', externalId);\n            // const store = await fetchStoreById(externalId);\n            // Update storeData state\n        }\n    }, [externalId]);\n\n    const handleBack = () => {\n        router.back();\n    };\n\n    return (\n        <SafeAreaView className='flex-1 bg-gray-50'>\n            <ScrollView className='flex-1' showsVerticalScrollIndicator={false}>\n                <StoreHeader isEditing={isEditing} onBack={handleBack} onEdit={handleEdit} />\n\n                <View className='p-4'>\n                    <BasicStoreInfoCard\n                        name={editedData.name}\n                        type={editedData.type}\n                        isEditing={isEditing}\n                        onNameChange={(text) => updateField('name', text)}\n                        onTypeChange={(text) => updateField('type', text)}\n                    />\n\n                    <StoreContactCard\n                        phone={editedData.phone}\n                        email={editedData.email}\n                        address={editedData.address}\n                        isEditing={isEditing}\n                        onPhoneChange={(text) => updateField('phone', text)}\n                        onEmailChange={(text) => updateField('email', text)}\n                        onAddressChange={(text) => updateField('address', text)}\n                    />\n\n                    <BusinessDetailsCard\n                        description={editedData.description}\n                        weekdayHours={editedData.weekdayHours}\n                        weekendHours={editedData.weekendHours}\n                        taxId={storeData.taxId!}\n                        established={storeData.establishedYear!}\n                        isEditing={isEditing}\n                        onDescriptionChange={(text) => updateField('description', text)}\n                        onWeekdayHoursChange={(text) => updateField('weekdayHours', text)}\n                        onWeekendHoursChange={(text) => updateField('weekendHours', text)}\n                    />\n\n                    {isEditing && (\n                        <EditModeActions onSave={handleSaveChanges} onCancel={handleCancel} />\n                    )}\n\n                    {/* Extra padding for bottom nav */}\n                    <View className='h-20' />\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n};\n\nexport default StoreInformationScreen;\n","size_bytes":3863},"components/credit/transaction/TransactionHistory.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { TransactionItem } from './TransactionItem';\n\ninterface Transaction {\n\tid: string;\n\ttype: 'Purchase' | 'Payment';\n\tdate: string;\n\tamount: number;\n}\n\ninterface TransactionHistoryProps {\n\ttransactions: Transaction[];\n\tonTransactionPress: (transaction: Transaction) => void;\n}\n\nexport const TransactionHistory: React.FC<TransactionHistoryProps> = ({\n\ttransactions,\n\tonTransactionPress,\n}) => {\n\treturn (\n\t\t<View className='mx-4 mt-6 mb-4'>\n\t\t\t<Text className='text-lg font-semibold mb-3'>Transaction History</Text>\n\n\t\t\t{transactions.map((transaction) => (\n\t\t\t\t<TransactionItem\n\t\t\t\t\tkey={transaction.id}\n\t\t\t\t\ttransaction={transaction}\n\t\t\t\t\tonPress={onTransactionPress}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</View>\n\t);\n};\n","size_bytes":774},"components/checkout/search-bar.tsx":{"content":"import { Search, } from 'lucide-react-native';\nimport React from 'react';\nimport { TextInput, View } from 'react-native';\n\ninterface SearchBarProps {\n  isSearchFocused: boolean;\n  setIsSearchFocused: (focused: boolean) => void;\n  shadowOffsetHeight: number;\n  shadowOpacity: number;\n  shadowRadius: number;\n  elevation: number;\n  placeHolderText: string;\n  value: string;\n  onChangeText: (text: string) => void;\n\n};\n\n\n\nconst SearchBar: React.FC<SearchBarProps> = ({\n  isSearchFocused,\n  setIsSearchFocused,\n  shadowOffsetHeight,\n  shadowOpacity,\n  shadowRadius,\n  elevation,\n  placeHolderText,\n  value,\n  onChangeText\n}) => {\n\n  return (\n    <View\n      className={`flex-row items-center bg-white rounded-xl px-4 py-3 mb-4 ${isSearchFocused ? 'border border-gray-200' : 'border border-transparent'\n        }`}\n      style={{\n        shadowColor: '#000',\n        shadowOffset: {\n          width: 0,\n          height: shadowOffsetHeight,\n        },\n        shadowOpacity: shadowOpacity,\n        shadowRadius: shadowRadius,\n        elevation: elevation,\n      }}\n    >\n      <Search size={20} color=\"#9CA3AF\" />\n      <TextInput\n      className=\"flex-1 ml-3 text-gray-700\"\n        placeholderTextColor=\"#9CA3AF\"\n        placeholder={placeHolderText}\n        value={value}\n        onChangeText={onChangeText}\n        onFocus={() => setIsSearchFocused(true)}\n        onBlur={() => setIsSearchFocused(false)}\n      />\n    </View>\n  );\n}\n\nexport default SearchBar;","size_bytes":1457},"components/ui/ActionButton.tsx":{"content":"import React, { useRef } from 'react';\nimport { Animated, TouchableOpacity, Text, View, ViewStyle } from 'react-native';\nimport { LucideIcon } from 'lucide-react-native';\nimport { SizeConfig, VariantConfig } from '@/types';\nimport { Plus, Minus, ShoppingCart, ArrowLeft, Search } from 'lucide-react-native';\n\ninterface ActionButtonProps {\n  onPress: () => void;\n  \n  // Content\n  text?: string;\n  icon?: LucideIcon;\n  iconPosition?: 'left' | 'right' | 'only';\n  \n  // Styling\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  shape?: 'rectangle' | 'rounded' | 'pill' | 'circle';\n  \n  // States\n  disabled?: boolean;\n  loading?: boolean;\n  \n  // Animation\n  animationScale?: number;\n  animationTension?: number;\n  animationFriction?: number;\n  \n  // Layout\n  fullWidth?: boolean;\n  className?: string;\n  style?: ViewStyle;\n  \n  // Accessibility\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n}\n\nexport const ActionButton: React.FC<ActionButtonProps> = ({\n  onPress,\n  text,\n  icon: Icon,\n  iconPosition = 'left',\n  variant = 'primary',\n  size = 'md',\n  shape = 'rounded',\n  disabled = false,\n  loading = false,\n  animationScale = 0.95,\n  animationTension = 300,\n  animationFriction = 10,\n  fullWidth = false,\n  className = '',\n  style,\n  accessibilityLabel,\n  accessibilityHint,\n}) => {\n  const scaleValue = useRef(new Animated.Value(1)).current;\n\n  // Size configurations\n  const sizeConfigs: Record<string, SizeConfig> = {\n    xs: {\n      padding: 'px-2 py-1',\n      iconSize: 10,\n      textSize: 'text-xs',\n      minWidth: 'min-w-[32px]',\n      height: 'h-6'\n    },\n    sm: {\n      padding: 'px-3 py-1.5',\n      iconSize: 12,\n      textSize: 'text-xs',\n      minWidth: 'min-w-[40px]',\n      height: 'h-8'\n    },\n    md: {\n      padding: 'px-4 py-2',\n      iconSize: 14,\n      textSize: 'text-sm',\n      minWidth: 'min-w-[44px]',\n      height: 'h-10'\n    },\n    lg: {\n      padding: 'px-6 py-3',\n      iconSize: 16,\n      textSize: 'text-base',\n      minWidth: 'min-w-[48px]',\n      height: 'h-12'\n    },\n    xl: {\n      padding: 'px-8 py-4',\n      iconSize: 20,\n      textSize: 'text-lg',\n      minWidth: 'min-w-[56px]',\n      height: 'h-16'\n    }\n  };\n\n  // Variant configurations\n  const variantConfigs: Record<string, VariantConfig> = {\n    primary: {\n      bg: 'bg-gray-900',\n      bgDisabled: 'bg-gray-400',\n      textColor: 'text-white',\n      textColorDisabled: 'text-gray-200',\n      iconColor: '#FFFFFF',\n      iconColorDisabled: '#E5E7EB'\n    },\n    secondary: {\n      bg: 'bg-gray-200',\n      bgDisabled: 'bg-gray-100',\n      textColor: 'text-gray-900',\n      textColorDisabled: 'text-gray-400',\n      iconColor: '#374151',\n      iconColorDisabled: '#9CA3AF'\n    },\n    outline: {\n      bg: 'bg-transparent border-2 border-gray-900',\n      bgDisabled: 'bg-transparent border-2 border-gray-300',\n      textColor: 'text-gray-900',\n      textColorDisabled: 'text-gray-400',\n      iconColor: '#374151',\n      iconColorDisabled: '#9CA3AF'\n    },\n    ghost: {\n      bg: 'bg-transparent',\n      bgDisabled: 'bg-transparent',\n      textColor: 'text-gray-700',\n      textColorDisabled: 'text-gray-400',\n      iconColor: '#374151',\n      iconColorDisabled: '#9CA3AF'\n    },\n    danger: {\n      bg: 'bg-red-600',\n      bgDisabled: 'bg-red-300',\n      textColor: 'text-white',\n      textColorDisabled: 'text-red-100',\n      iconColor: '#FFFFFF',\n      iconColorDisabled: '#FCA5A5'\n    }\n  };\n\n  // Shape configurations\n  const shapeConfigs: Record<string, string> = {\n    rectangle: '',\n    rounded: 'rounded-lg',\n    pill: 'rounded-full',\n    circle: 'rounded-full'\n  };\n\n  // Get configurations\n  const sizeConfig = sizeConfigs[size];\n  const variantConfig = variantConfigs[variant];\n  const shapeClass = shapeConfigs[shape];\n\n  // Handle press animations\n  const handlePressIn = () => {\n    if (!disabled && !loading) {\n      Animated.spring(scaleValue, {\n        toValue: animationScale,\n        useNativeDriver: true,\n        tension: animationTension,\n        friction: animationFriction,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (!disabled && !loading) {\n      Animated.spring(scaleValue, {\n        toValue: 1,\n        useNativeDriver: true,\n        tension: animationTension,\n        friction: animationFriction,\n      }).start();\n    }\n  };\n\n  const handlePress = () => {\n    if (!disabled && !loading) {\n      onPress();\n    }\n  };\n\n  // Determine content layout\n  const isIconOnly = iconPosition === 'only' || (!text && Icon);\n  const showText = text && iconPosition !== 'only';\n  const showIcon = Icon && !loading;\n\n  // Build class names\n  const baseClasses = [\n    sizeConfig.padding,\n    disabled ? variantConfig.bgDisabled : variantConfig.bg,\n    shapeClass,\n    'items-center justify-center',\n    fullWidth ? 'w-full' : sizeConfig.minWidth,\n    shape === 'circle' ? `${sizeConfig.height} w-${sizeConfig?.height?.split('-')[1]}` : sizeConfig.height,\n    isIconOnly ? 'aspect-square' : '',\n    className\n  ].filter(Boolean).join(' ');\n\n  const textColorClass = disabled ? variantConfig.textColorDisabled : variantConfig.textColor;\n  const iconColor = disabled ? variantConfig.iconColorDisabled : variantConfig.iconColor;\n\n  return (\n    <TouchableOpacity\n      onPress={handlePress}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled || loading}\n      activeOpacity={0.8}\n      accessibilityLabel={accessibilityLabel || text}\n      accessibilityHint={accessibilityHint}\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled: disabled || loading }}\n    >\n      <Animated.View\n        className={baseClasses}\n        style={[\n          {\n            transform: [{ scale: scaleValue }],\n          },\n          style,\n        ]}\n      >\n        {loading ? (\n          <View className=\"flex-row items-center\">\n            {/* Simple loading indicator - you could replace with a spinner */}\n            <Text className={`${textColorClass} ${sizeConfig.textSize} font-medium`}>\n              Loading...\n            </Text>\n          </View>\n        ) : (\n          <View className={`flex-row items-center ${isIconOnly ? 'justify-center' : ''}`}>\n            {showIcon && iconPosition === 'left' && (\n              <Icon size={sizeConfig.iconSize} color={iconColor} />\n            )}\n            \n            {showText && (\n              <Text\n                className={`${textColorClass} ${sizeConfig.textSize} font-medium ${\n                  showIcon && iconPosition === 'left' ? 'ml-1' : ''\n                } ${showIcon && iconPosition === 'right' ? 'mr-1' : ''}`}\n              >\n                {text}\n              </Text>\n            )}\n            \n            {showIcon && iconPosition === 'right' && (\n              <Icon size={sizeConfig.iconSize} color={iconColor} />\n            )}\n            \n            {isIconOnly && showIcon && (\n              <Icon size={sizeConfig.iconSize} color={iconColor} />\n            )}\n          </View>\n        )}\n      </Animated.View>\n    </TouchableOpacity>\n  );\n};\n\n\n\n// Pre-configured button variants\nexport const AddButton: React.FC<Omit<ActionButtonProps, 'icon' | 'text'> & { text?: string }> = (props) => (\n  <ActionButton icon={Plus} text={props.text || 'Add'} variant=\"primary\" {...props} />\n);\n\nexport const RemoveButton: React.FC<Omit<ActionButtonProps, 'icon'>> = (props) => (\n  <ActionButton icon={Minus} iconPosition=\"only\" variant=\"secondary\" shape=\"circle\" size=\"sm\" {...props} />\n);\n\nexport const CartButton: React.FC<Omit<ActionButtonProps, 'icon' | 'text'> & { text?: string; itemCount?: number }> = ({ \n  itemCount, \n  text, \n  ...props \n}) => (\n  <ActionButton \n    icon={ShoppingCart} \n    text={text || (itemCount ? `Cart (${itemCount})` : 'Cart')} \n    variant=\"primary\" \n    {...props} \n  />\n);\n\nexport const BackButton: React.FC<Omit<ActionButtonProps, 'icon' | 'iconPosition'>> = (props) => (\n  <ActionButton icon={ArrowLeft} iconPosition=\"only\" variant=\"ghost\" shape=\"circle\" size=\"md\" {...props} />\n);\n\nexport const SearchButton: React.FC<Omit<ActionButtonProps, 'icon' | 'iconPosition'>> = (props) => (\n  <ActionButton icon={Search} iconPosition=\"only\" variant=\"secondary\" shape=\"circle\" size=\"md\" {...props} />\n);","size_bytes":8267},"components/auth/PersonalInfoForm.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { UserData } from \"@/types\";\n\n\ninterface PersonalInfoFormProps {\n  onContinue: (formData: UserData) => void;\n}\n\n\nexport function PersonalInfoForm({ onContinue }: PersonalInfoFormProps) {\n  const [formData, setFormData] = useState({\n    name: \"onches bf\",\n    email: \"test123@gmail.com\",\n    phone: \"+254712345678\",\n    password: \"1234\",\n    pin: \"1234\",\n  });\n  const [showPin, setShowPin] = useState(false);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleContinue = () => {\n    // Validate form data\n    if (!formData.name || !formData.email || !formData.pin || !formData.password) {\n      // Handle validation error\n      return;\n    }\n     onContinue(formData);\n  };\n\n  return (\n    <View>\n      {/* Full Name */}\n      <View className=\"mb-4\">\n        <Text className=\"text-sm font-medium text-gray-900 mb-2\">Full Name</Text>\n        <TextInput\n          className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n          placeholder=\"Enter your full name\"\n          value={formData.name}\n          onChangeText={(value) => handleInputChange('fullName', value)}\n        />\n      </View>\n\n      {/* Email */}\n      <View className=\"mb-4\">\n        <Text className=\"text-sm font-medium text-gray-900 mb-2\">Email</Text>\n        <TextInput\n          className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n          placeholder=\"Enter your email\"\n          value={formData.email}\n          onChangeText={(value) => handleInputChange('email', value)}\n          keyboardType=\"email-address\"\n          autoCapitalize=\"none\"\n        />\n      </View>\n\n      {/* Phone Number */}\n      <View className=\"mb-4\">\n        <Text className=\"text-sm font-medium text-gray-900 mb-2\">Phone Number</Text>\n        <TextInput\n          className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n          placeholder=\"Enter your phone number\"\n          value={formData.phone}\n          onChangeText={(value) => handleInputChange('phone', value)}\n          keyboardType=\"phone-pad\"\n        />\n      </View>\n\n      {/* PIN */}\n      <View className=\"mb-6\">\n        <Text className=\"text-sm font-medium text-gray-900 mb-2\">Create 4-digit PIN</Text>\n        <View className=\"relative\">\n          <TextInput\n            className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900 pr-12\"\n            placeholder=\"Create your 4-digit PIN\"\n            value={formData.pin}\n            onChangeText={(value) => handleInputChange('pin', value)}\n            secureTextEntry={!showPin}\n            keyboardType=\"numeric\"\n            maxLength={4}\n          />\n          <TouchableOpacity\n            className=\"absolute right-4 top-1/2 -translate-y-1/2\"\n            onPress={() => setShowPin(!showPin)}\n          >\n            <Ionicons \n              name={showPin ? \"eye-off-outline\" : \"eye-outline\"} \n              size={20} \n              color=\"#6B7280\" \n            />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Continue Button */}\n      <TouchableOpacity\n        className=\"bg-gray-900 rounded-lg py-4\"\n        onPress={handleContinue}\n      >\n        <Text className=\"text-white text-center font-semibold text-base\">\n          Continue to Business Info\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n","size_bytes":3482},"app/auth/login.tsx":{"content":"import { AuthHeader } from '@/components/auth/AuthHeader';\nimport { SignInForm } from '@/components/auth/SignInForm';\nimport { authenticateUser } from '@/db/services/userService';\nimport { AuthData } from '@/types';\nimport { router } from 'expo-router';\nimport React from 'react';\nimport { ScrollView, View } from 'react-native';\n\nexport default function SignInScreen() {\n    const handleSignUp = () => {\n        router.replace('/auth/signup');\n    };\n\n    const handleLogin = async (userdata: AuthData) => {\n        try {\n            console.log('Logging in with:', userdata);\n            const user = await authenticateUser(userdata);\n            if (!user) {\n                console.log('Authentication failed');\n                return;\n            }\n        } catch (e) {\n            console.error('Login error:', e);\n        }\n    };\n\n    return (\n        <View className='flex-1 bg-gray-50'>\n            <ScrollView className='flex-1' showsVerticalScrollIndicator={false}>\n                <AuthHeader title='Welcome Back' subtitle='Sign in to your POS system' />\n\n                <View className='px-6 pb-8'>\n                    <SignInForm onSignUp={handleSignUp} login={handleLogin} />\n                </View>\n            </ScrollView>\n        </View>\n    );\n}\n","size_bytes":1269},"components/account/store/StoreContactCard.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { EditableField } from './EditableField';\n\ninterface StoreContactCardProps {\n    phone: string;\n    email: string;\n    address: string;\n    isEditing: boolean;\n    onPhoneChange: (text: string) => void;\n    onEmailChange: (text: string) => void;\n    onAddressChange: (text: string) => void;\n}\n\nexport const StoreContactCard: React.FC<StoreContactCardProps> = ({\n    phone,\n    email,\n    address,\n    isEditing,\n    onPhoneChange,\n    onEmailChange,\n    onAddressChange,\n}) => {\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <View className='flex-row items-center mb-4'>\n                <Ionicons name='call-outline' size={20} color='#374151' />\n                <Text className='ml-2 font-semibold text-gray-900'>Contact Information</Text>\n            </View>\n\n            <EditableField\n                label='Phone Number'\n                value={phone}\n                onChangeText={onPhoneChange}\n                isEditing={isEditing}\n                icon='call-outline'\n                keyboardType='phone-pad'\n            />\n\n            <EditableField\n                label='Email Address'\n                value={email}\n                onChangeText={onEmailChange}\n                isEditing={isEditing}\n                icon='mail-outline'\n                keyboardType='email-address'\n                autoCapitalize='none'\n            />\n\n            <View>\n                <View className='flex-row items-center mb-2'>\n                    <Ionicons name='location-outline' size={16} color='#6B7280' />\n                    <Text className='ml-2 text-sm text-gray-600 font-medium'>Address</Text>\n                </View>\n                <EditableField\n                    label=''\n                    value={address}\n                    onChangeText={onAddressChange}\n                    isEditing={isEditing}\n                    multiline\n                    numberOfLines={3}\n                />\n            </View>\n        </View>\n    );\n};\n","size_bytes":2116},"components/account/profile/WorkInfoCard.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { Briefcase, Shield } from 'lucide-react-native';\n\ninterface WorkInfoCardProps {\n    joinDate: string;\n    permissions: string[];\n}\n\nexport const WorkInfoCard: React.FC<WorkInfoCardProps> = ({ joinDate, permissions }) => {\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <View className='flex-row items-center mb-4'>\n                <Briefcase size={20} color='#374151' />\n                <Text className='ml-2 font-semibold text-gray-900'>Work Information</Text>\n            </View>\n\n            {/* Join Date */}\n            <View className='mb-4'>\n                <Text className='text-sm text-gray-600 font-medium mb-2'>Join Date</Text>\n                <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                    <Text className='text-gray-900'>{joinDate}</Text>\n                </View>\n            </View>\n\n            {/* Permissions */}\n            <View>\n                <View className='flex-row items-center mb-2'>\n                    <Shield size={16} color='#6B7280' />\n                    <Text className='ml-2 text-sm text-gray-600 font-medium'>Permissions</Text>\n                </View>\n                <View className='flex-row flex-wrap gap-2'>\n                    {permissions.map((permission) => (\n                        <View key={permission} className='bg-gray-100 rounded-lg px-3 py-2'>\n                            <Text className='text-xs text-gray-700'>{permission}</Text>\n                        </View>\n                    ))}\n                </View>\n            </View>\n        </View>\n    );\n};\n","size_bytes":1656},"app/(tabs)/account/pos-account.tsx":{"content":"import { AccountHeader } from '@/components/account/AccountHeader';\nimport { CreditSummary, TabType, TodayStats } from '@/types';\nimport React, { useState } from 'react';\nimport { ScrollView, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { HistoryTab } from '@/components/account/history/HistoryTab';\nimport { ProfileCard } from '@/components/account/profile/ProfileCard';\nimport { QuickActionsCard } from '@/components/account/QuickActionsCard';\nimport { OverviewTab } from '@/components/account/stats/OverviewTab';\nimport { SalesTab } from '@/components/account/stats/SalesTab';\nimport { StoreInfoCard } from '@/components/account/store/StoreInfoCard';\nimport { TabSelector } from '@/components/account/TabSelector';\nimport { UnauthenticatedView } from '@/components/account/UnauthenticatedView';\nimport { business, stats, store } from '@/constants/account';\nimport { Business, Session, Store, User } from '@/db';\nimport { useAccountActions } from '@/hooks/useAccountActions';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface AccountScreenProps {\n    activeSession: Session | null;\n    user: User | null;\n    isAuthenticated: boolean;\n    todayStats?: TodayStats;\n    // creditSummary?: CreditSummary;\n    // currentStore?: Store;\n    // currentBusiness?: Business;\n}\n\nconst AccountScreen: React.FC<AccountScreenProps> = ({\n    activeSession,\n    // user,\n    isAuthenticated,\n    todayStats,\n    // creditSummary,\n    // currentStore,\n    // currentBusiness,\n}) => {\n    const [activeTab, setActiveTab] = useState<TabType>('Overview');\n    const [selectedPeriod, setSelectedPeriod] = useState('Today');\n    const { selectedBusiness, selectedStore } = useBusiness();\n    const { user } = useAuth();\n\n    const {\n        handleMyAccount,\n        handleEdit,\n        handleLogout,\n        handleSettings,\n        handleSwitchStore,\n        handleManageCredit,\n        handleSalesHistory,\n        handleStoreEdit,\n    } = useAccountActions();\n\n    // Unauthenticated state\n    if (!isAuthenticated || !user) {\n        return <UnauthenticatedView />;\n    }\n\n    const handlePeriodChange = () => {\n        // TODO: Show period selector modal\n        console.log('Change period');\n    };\n\n    return (\n        <SafeAreaView className='flex-1 bg-gray-50'>\n            <ScrollView className='flex-1' showsVerticalScrollIndicator={false}>\n                <AccountHeader onSettingsPress={handleSettings} />\n\n                <View className='p-4'>\n                    <ProfileCard\n                        user={user}\n                        store={selectedStore}\n                        onMyAccountPress={handleMyAccount}\n                        onEditPress={handleEdit}\n                        onLogoutPress={handleLogout}\n                    />\n\n                    <StoreInfoCard\n                        store={selectedStore}\n                        business={selectedBusiness}\n                        onStoreEditPress={handleStoreEdit}\n                        onSwitchStore={handleSwitchStore}\n                    />\n\n                    <TabSelector activeTab={activeTab} onTabChange={setActiveTab} />\n\n                    {/* Tab Content */}\n                    {activeTab === 'Overview' && (\n                        <OverviewTab\n                            stats={stats || todayStats}\n                            selectedPeriod={selectedPeriod}\n                            onPeriodChange={handlePeriodChange}\n                        />\n                    )}\n\n                    {activeTab === 'Sales' && <SalesTab stats={stats || todayStats} />}\n\n                    {activeTab === 'History' && <HistoryTab />}\n\n                    <QuickActionsCard\n                        onManageCredit={handleManageCredit}\n                        onSalesHistory={handleSalesHistory}\n                    />\n\n                    {/* Extra padding for bottom nav */}\n                    <View className='h-20' />\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n};\n\nexport default AccountScreen;\n","size_bytes":4135},"constants/quickItems.ts":{"content":"import { QuickItem } from '@/types';\n\nexport const QUICK_ITEMS: QuickItem[] = [\n  { name: 'Coca Cola', price: '$2.50' },\n  { name: 'Simba Chips', price: '$1.99' },\n];","size_bytes":166},"db/models/sales.ts":{"content":"import { Model, Query, Relation } from '@nozbe/watermelondb';\nimport {\n    children,\n    date,\n    field,\n    readonly,\n    relation,\n    text,\n    writer,\n} from '@nozbe/watermelondb/decorators';\nimport SaleItem from './sales_items';\nimport Store from './stores';\nimport User from './users';\nimport Customer from './customers';\n\nexport default class Sale extends Model {\n    static table = 'sales';\n    static associations = {\n        sales_items: { type: 'has_many' as const, foreignKey: 'sale_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('store_id') storeId!: string;\n    @field('user_id') userId!: string;\n    @field('customer_id') customerId!: string;\n    @field('total_amount') totalAmount!: number;\n    @field('discount_amount') discountAmount!: number;\n    @field('discount_percentage') discountPercentage!: number;\n    @field('subtotal') subtotal!: number;\n    @text('payment_method') paymentMethod!: string;\n    @field('on_credit') onCredit!: boolean;\n    @text('status') status!: string;\n    @readonly @date('created_at') createdAt!: Date;\n    @readonly @date('updated_at') updatedAt!: Date;\n\n    @relation('stores', 'store_id') store!: Relation<Store>;\n    @relation('users', 'user_id') user!: Relation<User>;\n    @relation('customers', 'customer_id') customer?: Relation<Customer>;\n    @children('sales_items') items!: Query<SaleItem>;\n\n    @writer async markAsCompleted() {\n        await this.update((s) => {\n            s.status = 'completed';\n        });\n    }\n}\n","size_bytes":1507},"components/credit/CustomerSuggestionDropdown.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Customer } from '@/types';\n\ninterface CustomerSuggestionDropdownProps {\n\tcustomers: Customer[];\n\tonSelectCustomer: (customer: Customer) => void;\n}\n\nexport const CustomerSuggestionDropdown: React.FC<CustomerSuggestionDropdownProps> = ({\n\tcustomers,\n\tonSelectCustomer,\n}) => {\n\tif (customers.length === 0) return null;\n\n\treturn (\n\t\t<View className='bg-white border border-gray-200 rounded-lg mt-1 shadow-sm absolute top-full left-0 right-0 z-10'>\n\t\t\t{customers.map((customer) => (\n\t\t\t\t<TouchableOpacity\n\t\t\t\t\tkey={customer.id}\n\t\t\t\t\tclassName='p-3 border-b border-gray-100'\n\t\t\t\t\tonPress={() => onSelectCustomer(customer)}>\n\t\t\t\t\t<Text className='font-medium'>\n\t\t\t\t\t\t{customer.firstName} {customer.lastName}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Text className='text-sm text-gray-500'>\n\t\t\t\t\t\t{customer.phoneNumber} • ${customer.amount.toFixed(2)} due\n\t\t\t\t\t</Text>\n\t\t\t\t</TouchableOpacity>\n\t\t\t))}\n\t\t</View>\n\t);\n};\n","size_bytes":986},"android/app/src/main/java/com/kagwep/pos/MainApplication.kt":{"content":"package com.kagwep.pos\n\n\nimport android.app.Application\nimport com.nozbe.watermelondb.jsi.WatermelonDBJSIPackage;        \n\nimport android.content.res.Configuration\n\nimport com.facebook.react.PackageList\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactNativeApplicationEntryPoint.loadReactNative\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ReactHost\nimport com.facebook.react.common.ReleaseLevel\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint\nimport com.facebook.react.defaults.DefaultReactNativeHost\n\nimport expo.modules.ApplicationLifecycleDispatcher\nimport expo.modules.ReactNativeHostWrapper\n\nclass MainApplication : Application(), ReactApplication {\n\n  override val reactNativeHost: ReactNativeHost = ReactNativeHostWrapper(\n      this,\n      object : DefaultReactNativeHost(this) {\n        override fun getPackages(): List<ReactPackage> =\n            PackageList(this).packages.apply {\n              // Packages that cannot be autolinked yet can be added manually here, for example:\n              // add(MyReactNativePackage())\n            }\n\n          override fun getJSMainModuleName(): String = \".expo/.virtual-metro-entry\"\n\n          override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n          override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      }\n  )\n\n  override val reactHost: ReactHost\n    get() = ReactNativeHostWrapper.createReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    super.onCreate()\n    DefaultNewArchitectureEntryPoint.releaseLevel = try {\n      ReleaseLevel.valueOf(BuildConfig.REACT_NATIVE_RELEASE_LEVEL.uppercase())\n    } catch (e: IllegalArgumentException) {\n      ReleaseLevel.STABLE\n    }\n    loadReactNative(this)\n    ApplicationLifecycleDispatcher.onApplicationCreate(this)\n  }\n\n  override fun onConfigurationChanged(newConfig: Configuration) {\n    super.onConfigurationChanged(newConfig)\n    ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)\n  }\n}\n","size_bytes":2095},"components/credit/CustomerCreditItem.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { CreditRatingBadge } from './CreditRatingBadge';\nimport { Customer } from '@/types';\n\ninterface CustomerCreditItemProps {\n\tcustomer: Customer;\n\tonPress?: (customer: Customer) => void;\n}\n\nexport const CustomerCreditItem: React.FC<CustomerCreditItemProps> = ({ customer, onPress }) => {\n\tconst getDaysLeftColor = (daysLeft: number) => {\n\t\tif (daysLeft <= 1) return 'text-red-500';\n\t\tif (daysLeft <= 3) return 'text-orange-500';\n\t\treturn 'text-green-500';\n\t};\n\n\tconst fullName = `${customer.firstName} ${customer.lastName}`;\n\n\treturn (\n\t\t<TouchableOpacity\n\t\t\tclassName='flex-row items-center justify-between py-4 border rounded-lg px-3 mb-2 border-gray-200'\n\t\t\tonPress={() => onPress?.(customer)}>\n\t\t\t<View className='flex-row items-center flex-1'>\n\t\t\t\t<View className='w-10 h-10 bg-gray-200 rounded-full items-center justify-center mr-3'>\n\t\t\t\t\t<Ionicons name='person-outline' size={20} color='#666' />\n\t\t\t\t</View>\n\t\t\t\t<View className='flex-1'>\n\t\t\t\t\t<View className='flex-row items-center mb-1'>\n\t\t\t\t\t\t<Text className='font-semibold text-base mr-2'>{fullName}</Text>\n\t\t\t\t\t\t<CreditRatingBadge rating={customer.rating} />\n\t\t\t\t\t</View>\n\t\t\t\t\t<Text className='text-sm text-gray-500'>Due: {customer.dueDate}</Text>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t\t<View className='items-end'>\n\t\t\t\t<Text className='font-semibold text-base mb-1'>${customer.amount.toFixed(2)}</Text>\n\t\t\t\t<Text className={`text-xs font-medium ${getDaysLeftColor(customer.daysLeft)}`}>\n\t\t\t\t\t{customer.daysLeft} day{customer.daysLeft !== 1 ? 's' : ''} left\n\t\t\t\t</Text>\n\t\t\t</View>\n\t\t</TouchableOpacity>\n\t);\n};\n","size_bytes":1698},"app/index.tsx":{"content":"// app/index.tsx\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Redirect } from 'expo-router';\nimport { ActivityIndicator, View } from 'react-native';\n\nexport default function Index() {\n    const { isAuthenticated, isLoading } = useAuth();\n\n    if (isLoading) {\n        return (\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n                <ActivityIndicator size='large' />\n            </View>\n        );\n    }\n\n    return isAuthenticated ? <Redirect href='/checkout' /> : <Redirect href='/auth/login' />;\n}\n","size_bytes":563},"components/account/profile/ProfileAvatar.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\n\ninterface ProfileAvatarProps {\n    initials: string;\n    size?: 'sm' | 'md' | 'lg';\n}\n\nexport const ProfileAvatar: React.FC<ProfileAvatarProps> = ({ initials, size = 'md' }) => {\n    const sizeConfig = {\n        sm: 'w-12 h-12 text-lg',\n        md: 'w-16 h-16 text-2xl',\n        lg: 'w-24 h-24 text-4xl',\n    };\n\n    return (\n        <View\n            className={`${sizeConfig[size]} rounded-full bg-gray-200 items-center justify-center`}>\n            <Text className={`${sizeConfig[size].split(' ')[2]} font-semibold text-gray-700`}>\n                {initials}\n            </Text>\n        </View>\n    );\n};\n","size_bytes":679},"hooks/useQuickItem.ts":{"content":"import { useState, useCallback, useMemo } from 'react';\nimport { CartItem, QuickItem } from '@/types';\n\nexport const useQuickItem = (\n  item: QuickItem,\n  globalCart: CartItem[],\n  setGlobalCart: (cart: CartItem[]) => void\n) => {\n  // Extract price from string format\n  const itemPrice = useMemo(() => parseFloat(item.price.replace('$', '')), [item.price]);// - needs to be more dynamic\n  \n  // Generate consistent ID for this quick item\n  const itemId = useMemo(() => \n    `quick-${item.name.toLowerCase().replace(/\\s+/g, '-')}`, \n    [item.name]\n  );\n\n  // Find current quantity in cart\n  const currentCartItem = useMemo(() => \n    globalCart.find(cartItem => cartItem.id === itemId),\n    [globalCart, itemId]\n  );\n\n  const currentQuantity = currentCartItem?.quantity || 0;\n\n  // Create cart item structure\n  const createCartItem = useCallback((quantity: number): CartItem => ({\n    id: itemId,\n    name: item.name,\n    price: itemPrice,\n    quantity\n  }), [itemId, item.name, itemPrice]);\n\n  // Add item to cart\n  const addToCart = useCallback(() => {\n    if (currentCartItem) {\n      // Update existing item quantity\n      const updatedCart = globalCart.map(cartItem =>\n        cartItem.id === itemId\n          ? { ...cartItem, quantity: cartItem.quantity + 1 }\n          : cartItem\n      );\n      setGlobalCart(updatedCart);\n    } else {\n      // Add new item to cart\n      const newCartItem = createCartItem(1);\n      setGlobalCart([...globalCart, newCartItem]);\n    }\n  }, [currentCartItem, globalCart, itemId, createCartItem, setGlobalCart]);\n\n  // Remove item from cart or decrease quantity\n  const removeFromCart = useCallback(() => {\n    if (currentCartItem) {\n      if (currentCartItem.quantity > 1) {\n        // Decrease quantity\n        const updatedCart = globalCart.map(cartItem =>\n          cartItem.id === itemId\n            ? { ...cartItem, quantity: cartItem.quantity - 1 }\n            : cartItem\n        );\n        setGlobalCart(updatedCart);\n      } else {\n        // Remove item completely\n        const updatedCart = globalCart.filter(cartItem => cartItem.id !== itemId);\n        setGlobalCart(updatedCart);\n      }\n    }\n  }, [currentCartItem, globalCart, itemId, setGlobalCart]);\n\n  return {\n    currentQuantity,\n    addToCart,\n    removeFromCart,\n    itemPrice\n  };\n};\n","size_bytes":2296},"db/models/sales_items.ts":{"content":"import { Model, Relation } from '@nozbe/watermelondb';\nimport { field, relation, writer } from '@nozbe/watermelondb/decorators';\nimport Sale from './sales';\nimport Product from './products';\n\nexport default class SaleItem extends Model {\n    static table = 'sales_items';\n    static associations = {\n        sales: { type: 'belongs_to' as const, key: 'sale_id' },\n        products: { type: 'belongs_to' as const, key: 'product_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('sale_id') saleId!: string;\n    @field('product_id') productId!: string;\n    @field('quantity') quantity!: number;\n    @field('unit_price') unitPrice!: number;\n    @field('total_price') totalPrice!: number;\n\n    @relation('sales', 'sale_id') sale!: Relation<Sale>;\n    @relation('products', 'product_id') product!: Relation<Product>;\n\n    @writer async updateQuantity(newQty: number) {\n        await this.update((it) => {\n            it.quantity = newQty;\n            it.totalPrice = (it.unitPrice || 0) * newQty;\n        });\n    }\n}\n","size_bytes":1034},"components/inventory/FormToggle.tsx":{"content":"import React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\n\ninterface Props {\n  label: string;\n  description: string;\n  value: boolean;\n  onToggle: (value: boolean) => void;\n}\n\nconst FormToggle = ({ label, description, value, onToggle }: Props) => {\n  return (\n    <View className=\"flex-row justify-between items-center\">\n      <View className=\"flex-1\">\n        <Text className=\"text-base font-semibold text-black mb-1\">{label}</Text>\n        <Text className=\"text-sm text-gray-500\">{description}</Text>\n      </View>\n      <TouchableOpacity\n        className={`w-12 h-6 rounded-full ${\n          value ? \"bg-black\" : \"bg-gray-300\"\n        }`}\n        onPress={() => onToggle(!value)}\n      >\n        <View\n          className={`w-5 h-5 bg-white rounded-full mt-0.5 ${\n            value ? \"ml-6\" : \"ml-0.5\"\n          } transition-all duration-200`}\n        />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default FormToggle;\n","size_bytes":963},"app/(tabs)/checkout/payment.tsx":{"content":"import React from 'react';\nimport { ScrollView, KeyboardAvoidingView, Platform } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router } from 'expo-router';\nimport { Header } from '@/components/common/Header';\nimport { BackButton } from '@/components/common/BackButton';\nimport { OrderSummary } from '@/components/checkout/OrderSummary';\nimport { PaymentMethodsSection } from '@/components/checkout/PaymentMethodsSection';\nimport { PayButton } from '@/components/checkout/PayButton';\nimport { usePaymentMethods } from '@/hooks/usePaymentMethods';\nimport { useCheckoutLogic } from '@/hooks/useCheckoutLogic';\nimport { useCart } from '@/hooks/useCart';\n\nconst PaymentScreen: React.FC = () => {\n\t// Get cart from global state instead of props\n\tconst { globalCart, clearCart } = useCart();\n\n\tconst {\n\t\tpaymentMethods,\n\t\tselectedPaymentMethod,\n\t\tshowStoreCreditForm,\n\t\tcreditAmount,\n\t\tsetCreditAmount,\n\t\tstoreCreditFormHeight,\n\t\tstoreCreditOpacity,\n\t\thandlePaymentMethodSelect,\n\t} = usePaymentMethods();\n\n\t// Handler for payment completion\n\tconst handlePaymentComplete = (paymentMethod: string, amount: number) => {\n\t\tconsole.log(`Payment: ${paymentMethod}, Amount: $${amount}`);\n\t\tclearCart();\n\t\t// Navigate back to main checkout screen\n\t\trouter.push('/(tabs)/checkout/payment');\n\t};\n\n\tconst {\n\t\tsearchQuery,\n\t\tsetSearchQuery,\n\t\tisSearchFocused,\n\t\thandleSearchFocus,\n\t\thandleSearchBlur,\n\t\ttotal,\n\t\tmaxCredit,\n\t\thandlePay,\n\t\tgetPayAmount,\n\t\tisPayButtonDisabled,\n\t} = useCheckoutLogic(globalCart, selectedPaymentMethod, creditAmount, handlePaymentComplete);\n\n\treturn (\n\t\t<SafeAreaView className='flex-1 bg-gray-50'>\n\t\t\t<KeyboardAvoidingView\n\t\t\t\tbehavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n\t\t\t\tclassName='flex-1'>\n\t\t\t\t<ScrollView\n\t\t\t\t\tclassName='flex-1'\n\t\t\t\t\tshowsVerticalScrollIndicator={false}\n\t\t\t\t\tkeyboardShouldPersistTaps='handled'>\n\t\t\t\t\t<Header title='Checkout'>\n\t\t\t\t\t\t{/* Use router.back() instead of onBack prop */}\n\t\t\t\t\t\t<BackButton onPress={() => router.back()} className='mr-4' />\n\t\t\t\t\t</Header>\n\n\t\t\t\t\t<OrderSummary cartItems={globalCart} total={total} />\n\n\t\t\t\t\t<PaymentMethodsSection\n\t\t\t\t\t\tpaymentMethods={paymentMethods}\n\t\t\t\t\t\tselectedPaymentMethod={selectedPaymentMethod}\n\t\t\t\t\t\tonPaymentMethodSelect={handlePaymentMethodSelect}\n\t\t\t\t\t\tshowStoreCreditForm={showStoreCreditForm}\n\t\t\t\t\t\tcreditAmount={creditAmount}\n\t\t\t\t\t\tonCreditAmountChange={setCreditAmount}\n\t\t\t\t\t\tmaxCredit={maxCredit}\n\t\t\t\t\t\tsearchQuery={searchQuery}\n\t\t\t\t\t\tonSearchChange={setSearchQuery}\n\t\t\t\t\t\tisSearchFocused={isSearchFocused}\n\t\t\t\t\t\tonSearchFocus={handleSearchFocus}\n\t\t\t\t\t\tonSearchBlur={handleSearchBlur}\n\t\t\t\t\t\tstoreCreditFormHeight={storeCreditFormHeight}\n\t\t\t\t\t\tstoreCreditOpacity={storeCreditOpacity}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<PayButton\n\t\t\t\t\t\tonPress={handlePay}\n\t\t\t\t\t\tamount={getPayAmount()}\n\t\t\t\t\t\tdisabled={isPayButtonDisabled()}\n\t\t\t\t\t/>\n\t\t\t\t</ScrollView>\n\t\t\t</KeyboardAvoidingView>\n\t\t</SafeAreaView>\n\t);\n};\n\nexport default PaymentScreen;\n","size_bytes":2963},"app/modal.tsx":{"content":"import { Link } from 'expo-router';\nimport { StyleSheet } from 'react-native';\n\nimport { ThemedText } from '@/components/themed-text';\nimport { ThemedView } from '@/components/themed-view';\n\nexport default function ModalScreen() {\n    return (\n        <ThemedView style={styles.container}>\n            <ThemedText type='title'>This is a modal</ThemedText>\n            <Link href='/' dismissTo style={styles.link}>\n                <ThemedText type='link'>Go to home screen</ThemedText>\n            </Link>\n        </ThemedView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 20,\n    },\n    link: {\n        marginTop: 15,\n        paddingVertical: 15,\n    },\n});\n","size_bytes":773},"db/models/products.ts":{"content":"import { Model, Query, Relation } from '@nozbe/watermelondb';\nimport {\n    children,\n    date,\n    field,\n    readonly,\n    relation,\n    text,\n    writer,\n} from '@nozbe/watermelondb/decorators';\nimport Business from './business';\nimport Category from './categories';\nimport Inventory from './inventory';\n\nexport default class Product extends Model {\n    static table = 'products';\n    static associations = {\n        categories: { type: 'belongs_to' as const, key: 'category_id' },\n        businesses: { type: 'belongs_to' as const, key: 'business_id' },\n        inventory: { type: 'has_many' as const, foreignKey: 'product_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('business_id') businessId!: string;\n    @field('category_id') categoryId!: string;\n    @text('name') name!: string;\n    @field('cost') cost!: number;\n    @field('barcode') barcode!: string;\n    @field('description') description!: string;\n    @text('unit') unit!: string;\n    @text('status') status!: string;\n    @readonly @date('created_at') createdAt!: Date;\n    @readonly @date('updated_at') updatedAt!: Date;\n    @field('deleted') deleted!: boolean;\n\n    @relation('categories', 'category_id') category!: Relation<Category>;\n    @relation('businesses', 'business_id') business!: Relation<Business>;\n    @children('inventory') inventory!: Query<Inventory>;\n\n    @writer async markAsDeleted() {\n        await this.update((p) => {\n            p.deleted = true;\n        });\n    }\n}\n","size_bytes":1480},"components/inventory/InventoryHeader.tsx":{"content":"import { Feather } from '@expo/vector-icons';\nimport React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\n\ninterface InventoryHeaderProps {\n    onShowModal: () => void;\n}\n\nexport const InventoryHeader: React.FC<InventoryHeaderProps> = ({ onShowModal }) => {\n    return (\n        <View className='flex-row items-center justify-between mb-4'>\n            <View className='flex-row items-center'>\n                <View className='w-8 h-8 bg-black rounded-lg items-center justify-center mr-3'>\n                    <Feather name='package' size={16} color='white' />\n                </View>\n                <Text className='text-xl font-bold text-gray-900'>Inventory</Text>\n            </View>\n            <TouchableOpacity\n                className='bg-black px-3 py-2 rounded-lg flex-row items-center'\n                onPress={onShowModal}>\n                <Feather name='plus' size={14} color='white' />\n                <Text className='text-white font-medium ml-1'>Add Item</Text>\n            </TouchableOpacity>\n        </View>\n    );\n};\n","size_bytes":1065},"components/inventory/AddItemModal.tsx":{"content":"import { Ionicons } from \"@expo/vector-icons\";\nimport FormInput from \"./FormInput\";\nimport React, { useState } from \"react\";\nimport { Modal, ScrollView, Text, TouchableOpacity, View } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport FormDropdown from \"./FormDropdown\";\nimport FormToggle from \"./FormToggle\";\n\n\ninterface AddItemModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onAddItem: (item: any) => void;\n}\n\nconst AddItemModal = ({ visible, onClose, onAddItem }: AddItemModalProps) => {\n  const [formData, setFormData] = useState({\n    productName: \"\",\n    brand: \"\",\n    category: \"\",\n    sizeQuantity: \"\",\n    unit: \"\",\n    stock: \"0\",\n    minimumAmount: \"0\",\n    purchasePrice: \"0\",\n    sellPrice: \"0\",\n    itemOrdered: false,\n  });\n\n  const categories = [\n    \"Beverages\",\n    \"Snacks\",\n    \"Dairy\",\n    \"Bakery\",\n    \"Fruits\",\n    \"Vegetables\",\n    \"Meat\",\n    \"Frozen\",\n    \"Household\",\n    \"Personal Care\",\n  ];\n\n  const units = [\n    \"kg\",\n    \"g\",\n    \"liter\",\n    \"ml\",\n    \"piece\",\n    \"packet\",\n    \"bottle\",\n    \"loaf\",\n    \"can\",\n  ];\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleAddItem = () => {\n    onAddItem(formData);\n    setFormData({\n      productName: \"\",\n      brand: \"\",\n      category: \"\",\n      sizeQuantity: \"\",\n      unit: \"\",\n      stock: \"0\",\n      minimumAmount: \"0\",\n      purchasePrice: \"0\",\n      sellPrice: \"0\",\n      itemOrdered: false,\n    });\n  };\n\n  const isFormValid = formData.productName && formData.category;\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"slide\"\n      presentationStyle=\"pageSheet\"\n    >\n      <SafeAreaView className=\"flex-1 bg-white\">\n        <View className=\"flex-row justify-between items-center px-4 py-4 border-b border-gray-200\">\n          <Text className=\"text-xl font-bold text-black\">\n            Add New Inventory Item\n          </Text>\n          <TouchableOpacity onPress={onClose}>\n            <Ionicons name=\"close\" size={24} color=\"#666\" />\n          </TouchableOpacity>\n        </View>\n        <ScrollView\n          className=\"flex-1 px-4 py-6\"\n          showsVerticalScrollIndicator={false}\n        >\n          <Text className=\"text-gray-600 text-center mb-6\">\n            Create a new product in your inventory with all necessary details.\n          </Text>\n          <View className=\"space-y-4\">\n            <FormInput\n              label=\"Product Name\"\n              required\n              placeholder=\"Enter product name\"\n              value={formData.productName}\n              onChangeText={(value) => handleInputChange(\"productName\", value)}\n            />\n            <FormInput\n              label=\"Brand\"\n              placeholder=\"Enter brand name\"\n              value={formData.brand}\n              onChangeText={(value) => handleInputChange(\"brand\", value)}\n            />\n            <View className=\"flex-row items-center space-x-3\">\n              <View className=\"flex-1\">\n                <FormDropdown\n                  label=\"Category\"\n                  required\n                  placeholder=\"Select category\"\n                  value={formData.category}\n                  options={categories}\n                  onSelect={(value) => handleInputChange(\"category\", value)}\n                />\n              </View>\n              <TouchableOpacity className=\"w-12 h-12 border-2 border-gray-300 rounded-lg justify-center items-center mt-6 mx-2\">\n                <Ionicons name=\"add\" size={20} color=\"#666\" />\n              </TouchableOpacity>\n            </View>\n            <View className=\"flex-row space-x-3 \">\n              <View className=\"flex-1 mx-2\">\n                <FormInput\n                  label=\"Size/Quantity\"\n                  placeholder=\"e.g., 500ml\"\n                  value={formData.sizeQuantity}\n                  onChangeText={(value) =>\n                    handleInputChange(\"sizeQuantity\", value)\n                  }\n                />\n              </View>\n              <View className=\"flex-1 mx-2\">\n                <FormDropdown\n                  label=\"Unit\"\n                  placeholder=\"Select unit\"\n                  value={formData.unit}\n                  options={units}\n                  onSelect={(value) => handleInputChange(\"unit\", value)}\n                />\n              </View>\n            </View>\n            <View className=\"flex-row space-x-3\">\n              <View className=\"flex-1 mx-2\">\n                <FormInput\n                  label=\"Stock\"\n                  placeholder=\"0\"\n                  value={formData.stock}\n                  onChangeText={(value) => handleInputChange(\"stock\", value)}\n                  keyboardType=\"numeric\"\n                />\n              </View>\n              <View className=\"flex-1 mx-2\">\n                <FormInput\n                  label=\"Minimum Amount\"\n                  placeholder=\"0\"\n                  value={formData.minimumAmount}\n                  onChangeText={(value) =>\n                    handleInputChange(\"minimumAmount\", value)\n                  }\n                  keyboardType=\"numeric\"\n                />\n              </View>\n            </View>\n            <View className=\"flex-row space-x-3\">\n              <View className=\"flex-1 mx-2\">\n                <FormInput\n                  label=\"Purchase Price ($)\"\n                  placeholder=\"0\"\n                  value={formData.purchasePrice}\n                  onChangeText={(value) =>\n                    handleInputChange(\"purchasePrice\", value)\n                  }\n                  keyboardType=\"numeric\"\n                />\n              </View>\n              <View className=\"flex-1 mx-2\">\n                <FormInput\n                  label=\"Sell Price ($)\"\n                  placeholder=\"0\"\n                  value={formData.sellPrice}\n                  onChangeText={(value) =>\n                    handleInputChange(\"sellPrice\", value)\n                  }\n                  keyboardType=\"numeric\"\n                />\n              </View>\n            </View>\n            <FormToggle\n              label=\"Item Ordered\"\n              description=\"Mark if this item has been ordered from supplier\"\n              value={formData.itemOrdered}\n              onToggle={(value) => handleInputChange(\"itemOrdered\", value)}\n            />\n          </View>\n        </ScrollView>\n        <View className=\"flex-row px-4 py-4  space-x-3 border-t border-gray-200\">\n          <TouchableOpacity\n            className=\"flex-1 bg-gray-200 rounded-xl py-4 mx-2\"\n            onPress={onClose}\n          >\n            <Text className=\"text-center font-semibold text-gray-700\">\n              Cancel\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            className={`flex-1 rounded-xl py-4 ${\n              isFormValid ? \"bg-black\" : \"bg-gray-300\"\n            } mx-2`}\n            onPress={handleAddItem}\n            disabled={!isFormValid}\n          >\n            <Text\n              className={`text-center font-semibold ${\n                isFormValid ? \"text-white\" : \"text-gray-500\"\n              }`}\n            >\n              Add Item\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    </Modal>\n  );\n};\n\nexport default AddItemModal;\n","size_bytes":7318},"db/models/categories.ts":{"content":"import { Model, Query } from '@nozbe/watermelondb';\nimport { children, date, field, text, writer } from '@nozbe/watermelondb/decorators';\nimport Product from './products';\n\nexport default class Category extends Model {\n    static table = 'categories';\n    static associations = {\n        products: { type: 'has_many' as const, foreignKey: 'category_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('business_id') businessId!: string;\n    @text('name') name!: string;\n    @text('icon') icon!: string;\n    @text('color') color!: string;\n    @date('created_at') createdAt!: Date;\n    @field('deleted') deleted!: boolean;\n\n    @children('products') products!: Query<Product>;\n\n    @writer async markAsDeleted() {\n        await this.update((c) => {\n            c.deleted = true;\n        });\n    }\n}\n","size_bytes":818},"components/ui/icon-symbol.ios.tsx":{"content":"import { SymbolView, SymbolViewProps, SymbolWeight } from 'expo-symbols';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nexport function IconSymbol({\n  name,\n  size = 24,\n  color,\n  style,\n  weight = 'regular',\n}: {\n  name: SymbolViewProps['name'];\n  size?: number;\n  color: string;\n  style?: StyleProp<ViewStyle>;\n  weight?: SymbolWeight;\n}) {\n  return (\n    <SymbolView\n      weight={weight}\n      tintColor={color}\n      resizeMode=\"scaleAspectFit\"\n      name={name}\n      style={[\n        {\n          width: size,\n          height: size,\n        },\n        style,\n      ]}\n    />\n  );\n}\n","size_bytes":598},"components/account/stats/SalesTab.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { TodayStats } from '@/types';\n\ninterface SalesTabProps {\n    stats: TodayStats;\n}\n\nexport const SalesTab: React.FC<SalesTabProps> = ({ stats }) => {\n    const averageOrderValue = stats.orders > 0 ? (stats.revenue / stats.orders).toFixed(2) : '0.00';\n\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <Text className='mb-4 font-semibold text-gray-900'>Sales Details</Text>\n            <View className='space-y-3'>\n                <View className='flex-row justify-between py-2 border-b border-gray-100'>\n                    <Text className='text-gray-600'>Total Revenue</Text>\n                    <Text className='font-semibold text-gray-900'>${stats.revenue.toFixed(2)}</Text>\n                </View>\n                <View className='flex-row justify-between py-2 border-b border-gray-100'>\n                    <Text className='text-gray-600'>Total Orders</Text>\n                    <Text className='font-semibold text-gray-900'>{stats.orders}</Text>\n                </View>\n                <View className='flex-row justify-between py-2 border-b border-gray-100'>\n                    <Text className='text-gray-600'>Gross Profit</Text>\n                    <Text className='font-semibold text-green-600'>${stats.profit.toFixed(2)}</Text>\n                </View>\n                <View className='flex-row justify-between py-2'>\n                    <Text className='text-gray-600'>Average Order Value</Text>\n                    <Text className='font-semibold text-gray-900'>${averageOrderValue}</Text>\n                </View>\n            </View>\n        </View>\n    );\n};\n","size_bytes":1691},"components/credit/details/CreditOverviewCard.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { CreditCard, Minus, Plus, Calendar, Clock } from 'lucide-react-native';\n\ninterface CreditOverviewCardProps {\n\tcurrentBalance: number;\n\ttotalCredits: number;\n\ttotalPayments: number;\n\tdueDate: string;\n\tdaysLeft: number;\n}\n\nexport const CreditOverviewCard: React.FC<CreditOverviewCardProps> = ({\n\tcurrentBalance,\n\ttotalCredits,\n\ttotalPayments,\n\tdueDate,\n\tdaysLeft,\n}) => {\n\treturn (\n\t\t<View className='mx-4 mt-4 bg-white rounded-xl p-4 shadow-sm'>\n\t\t\t<View className='flex-row justify-items-center items-center mb-4'>\n\t\t\t\t<CreditCard size={20} color='#000' />\n\t\t\t\t<Text className='text-base font-semibold ml-2 '>Credit Overview</Text>\n\t\t\t</View>\n\n\t\t\t{/* Current Balance */}\n\t\t\t<View className='bg-gray-50 rounded-lg p-4 mb-4'>\n\t\t\t\t<Text className='text-sm text-gray-600 text-center mb-1'>\n\t\t\t\t\tCurrent Credit Balance\n\t\t\t\t</Text>\n\t\t\t\t<Text className='text-4xl font-bold text-red-600 text-center'>\n\t\t\t\t\t${currentBalance.toFixed(2)}\n\t\t\t\t</Text>\n\t\t\t\t<Text className='text-sm text-gray-500 text-center mt-1'>Outstanding</Text>\n\t\t\t</View>\n\n\t\t\t{/* Credits and Payments Row */}\n\t\t\t<View className='flex-row justify-between mb-4'>\n\t\t\t\t<View className='flex-1'>\n\t\t\t\t\t<View className='flex-row items-center mb-1'>\n\t\t\t\t\t\t<Minus size={16} color='#ef4444' />\n\t\t\t\t\t\t<Text className='text-sm text-gray-600 ml-1'>Total Credits</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<Text className='text-lg font-semibold text-red-600'>\n\t\t\t\t\t\t${totalCredits.toFixed(2)}\n\t\t\t\t\t</Text>\n\t\t\t\t</View>\n\t\t\t\t<View className='w-px bg-gray-200 mx-4' />\n\t\t\t\t<View className='flex-1'>\n\t\t\t\t\t<View className='flex-row items-center mb-1'>\n\t\t\t\t\t\t<Plus size={16} color='#10b981' />\n\t\t\t\t\t\t<Text className='text-sm text-gray-600 ml-1'>Total Payments</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<Text className='text-lg font-semibold text-green-600'>\n\t\t\t\t\t\t${totalPayments.toFixed(2)}\n\t\t\t\t\t</Text>\n\t\t\t\t</View>\n\t\t\t</View>\n\n\t\t\t{/* Due Date and Status */}\n\t\t\t<View className='flex-row justify-between'>\n\t\t\t\t<View className='flex-1'>\n\t\t\t\t\t<View className='flex-row items-center mb-1'>\n\t\t\t\t\t\t<Calendar size={16} color='#666' />\n\t\t\t\t\t\t<Text className='text-sm text-gray-600 ml-1'>Due Date</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<Text className='text-base font-medium'>{dueDate}</Text>\n\t\t\t\t</View>\n\t\t\t\t<View className='w-px bg-gray-200 mx-4' />\n\t\t\t\t<View className='flex-1'>\n\t\t\t\t\t<View className='flex-row items-center mb-1'>\n\t\t\t\t\t\t<Clock size={16} color='#666' />\n\t\t\t\t\t\t<Text className='text-sm text-gray-600 ml-1'>Status</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<Text\n\t\t\t\t\t\tclassName={`text-base font-medium ${daysLeft <= 1 ? 'text-red-500' : 'text-green-500'}`}>\n\t\t\t\t\t\t{daysLeft} day{daysLeft !== 1 ? 's' : ''} left\n\t\t\t\t\t</Text>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t</View>\n\t);\n};\n","size_bytes":2722},"components/account/store/EditableField.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface EditableFieldProps {\n    label: string;\n    value: string;\n    onChangeText: (text: string) => void;\n    isEditing: boolean;\n    icon?: keyof typeof Ionicons.glyphMap;\n    keyboardType?: 'default' | 'email-address' | 'phone-pad';\n    autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n    multiline?: boolean;\n    numberOfLines?: number;\n    placeholder?: string;\n}\n\nexport const EditableField: React.FC<EditableFieldProps> = ({\n    label,\n    value,\n    onChangeText,\n    isEditing,\n    icon,\n    keyboardType = 'default',\n    autoCapitalize,\n    multiline = false,\n    numberOfLines,\n    placeholder,\n}) => {\n    return (\n        <View className='mb-4'>\n            <View className='flex-row items-center mb-2'>\n                {icon && <Ionicons name={icon} size={16} color='#6B7280' />}\n                <Text className='ml-2 text-sm text-gray-600 font-medium'>{label}</Text>\n            </View>\n            {isEditing ? (\n                <TextInput\n                    value={value}\n                    onChangeText={onChangeText}\n                    className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                    keyboardType={keyboardType}\n                    autoCapitalize={autoCapitalize}\n                    multiline={multiline}\n                    numberOfLines={numberOfLines}\n                    placeholder={placeholder}\n                />\n            ) : (\n                <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                    <Text className='text-gray-900'>{value}</Text>\n                </View>\n            )}\n        </View>\n    );\n};\n","size_bytes":1739},"components/checkout/CartSummaryBar.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { ShoppingCart } from 'lucide-react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ninterface CartSummaryBarProps {\n  totalItems: number;\n  totalPrice: number;\n  onCheckout: () => void;\n  disabled?: boolean;\n}\n\nexport const CartSummaryBar: React.FC<CartSummaryBarProps> = ({\n  totalItems,\n  totalPrice,\n  onCheckout,\n  disabled = false\n}) => {\n  const insets = useSafeAreaInsets();\n\n  if (totalItems === 0) {\n    return (\n      <View \n        className=\"bg-gray-500 mx-4 mb-2 rounded-xl p-4\"\n        style={{ marginBottom: -insets.bottom + 8 }}\n      >\n        <View className=\"flex-row\">\n          <ShoppingCart size={20} color=\"#FFFFFF\" />\n          <Text className=\"text-white font-medium ml-2\">\n            Cart Empty\n          </Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <TouchableOpacity\n      onPress={onCheckout}\n      disabled={disabled}\n      className={`${disabled ? 'bg-gray-500' : 'bg-gray-900'} mx-4 mb-2 rounded-xl p-4`}\n      style={{ marginBottom: -insets.bottom + 8 }}\n    >\n      <View className=\"flex-row items-center justify-between\">\n        <View className=\"flex-row items-center\">\n          <ShoppingCart size={20} color=\"#FFFFFF\" />\n          <Text className=\"text-white font-medium ml-2\">\n            Checkout\n          </Text>\n        </View>\n        <View className=\"flex-row items-center\">\n          <Text className=\"text-white font-medium mr-3\">\n            {totalItems} item{totalItems > 1 ? 's' : ''}\n          </Text>\n          <Text className=\"text-white font-bold\">\n            ${totalPrice.toFixed(2)}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};","size_bytes":1763},"components/checkout/QuickReferenceItem.tsx":{"content":"import { CartItem, QuickItem } from '@/types';\nimport React, { useRef } from 'react';\nimport {\n  Animated,\n  Text,\n  TouchableOpacity,\n} from 'react-native';\nimport { useQuickItem } from '@/hooks/useQuickItem';\nimport { Plus } from 'lucide-react-native';\nimport { AddButton } from '../ui/ActionButton';\nimport { QuantityControls } from '../common/QuantityControls';\n\ninterface QuickReferenceItemProps {\n  item: QuickItem;\n  globalCart: CartItem[];\n  setGlobalCart: (cart: CartItem[]) => void;\n}\n\nexport const QuickReferenceItem: React.FC<QuickReferenceItemProps> = ({\n  item,\n  globalCart,\n  setGlobalCart\n}) => {\n  const scaleValue = useRef(new Animated.Value(1)).current;\n\n  const {\n    currentQuantity,\n    addToCart,\n    removeFromCart\n  } = useQuickItem(item, globalCart, setGlobalCart);\n\n  const handlePressIn = (): void => {\n    Animated.spring(scaleValue, {\n      toValue: 0.98,\n      useNativeDriver: true,\n      tension: 400,\n      friction: 10,\n    }).start();\n  };\n\n  const handlePressOut = (): void => {\n    Animated.spring(scaleValue, {\n      toValue: 1,\n      useNativeDriver: true,\n      tension: 400,\n      friction: 10,\n    }).start();\n  };\n\n  return (\n    <TouchableOpacity\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      activeOpacity={0.95}\n      className=\"mb-2\"\n    >\n      <Animated.View\n        className=\"flex-row items-center justify-between py-3 px-4 bg-white rounded-lg\"\n        style={{\n          transform: [{ scale: scaleValue }],\n          shadowColor: '#000',\n          shadowOffset: {\n            width: 0,\n            height: 2,\n          },\n          shadowOpacity: 0.05,\n          shadowRadius: 4,\n          elevation: 2,\n        }}\n      >\n        <Text className=\"text-gray-800 font-medium flex-1\">\n          {item.name}\n        </Text>\n        <Text className=\"text-gray-600 font-medium mr-3\">\n          {item.price}\n        </Text>\n\n        {/* Even simpler with convenience wrapper */}\n        {currentQuantity > 0 ? (\n          <QuantityControls\n            quantity={currentQuantity}\n            onIncrease={addToCart}\n            onDecrease={removeFromCart}\n            size=\"sm\"\n            variant=\"primary\"\n          />\n        ) : (\n          <AddButton\n            onPress={addToCart}\n            size=\"sm\"\n          />\n        )}\n      </Animated.View>\n    </TouchableOpacity>\n  );\n};","size_bytes":2360},"components/auth/index.ts":{"content":"export { AuthHeader } from './AuthHeader';\nexport { AuthButton } from './AuthButton';\nexport { FormInput } from './FormInput';\nexport { SignUpCard } from './SignUpCard';\nexport { SignInForm } from './SignInForm';\nexport { PersonalInfoForm } from './PersonalInfoForm';\nexport { BusinessInfoForm } from './BusinessInfoForm';\n","size_bytes":323},"hooks/useProfileEdit.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { UserProfileData } from '@/types';\n\nexport const useProfileEdit = (initialData: UserProfileData, externalId?: string) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [editedData, setEditedData] = useState(initialData);\n\n    // Reset edited data when initial data changes\n    useEffect(() => {\n        setEditedData(initialData);\n    }, [initialData]);\n\n    const handleEdit = useCallback(() => {\n        setIsEditing(true);\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        setIsEditing(false);\n        setEditedData(initialData);\n    }, [initialData]);\n\n    const handleSaveChanges = useCallback(async () => {\n        console.log('💾 Saving changes for externalId:', externalId, editedData);\n        try {\n            // TODO: Update user in database using externalId\n            // await updateUserByExternalId(externalId, editedData);\n\n            setIsEditing(false);\n            console.log('✅ Changes saved successfully');\n            return true;\n        } catch (error) {\n            console.error('❌ Error saving changes:', error);\n            return false;\n        }\n    }, [externalId, editedData]);\n\n    const updateField = useCallback((field: keyof UserProfileData, value: any) => {\n        setEditedData((prev) => ({ ...prev, [field]: value }));\n    }, []);\n\n    return {\n        isEditing,\n        editedData,\n        setIsEditing,\n        handleEdit,\n        handleCancel,\n        handleSaveChanges,\n        updateField,\n    };\n};\n","size_bytes":1557},"components/account/profile/ProfileCard.tsx":{"content":"import Store from '@/db/models/stores';\nimport User from '@/db/models/users';\nimport { Edit, LogOut, User as UserIcon } from 'lucide-react-native';\nimport React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\n\ninterface ProfileCardProps {\n    user: User;\n    store: Store | null;\n    onMyAccountPress: (userExternalId: string) => void;\n    onEditPress: (userExternalId: string) => void;\n    onLogoutPress: () => void;\n}\n\nexport const ProfileCard: React.FC<ProfileCardProps> = ({\n    user,\n    store,\n    onMyAccountPress,\n    onEditPress,\n    onLogoutPress,\n}) => {\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            {/* Action Buttons */}\n            <View className='flex-row justify-around mb-4 pb-4 border-b border-gray-100'>\n                <TouchableOpacity\n                    onPress={() => onMyAccountPress(user.externalId)}\n                    className='flex-row items-center'>\n                    <UserIcon size={18} color='#374151' />\n                    <Text className='ml-2 text-sm text-gray-700'>My Account</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                    onPress={() => onEditPress(user.externalId)}\n                    className='flex-row items-center'>\n                    <Edit size={18} color='#374151' />\n                    <Text className='ml-2 text-sm text-gray-700'>Edit</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity onPress={onLogoutPress} className='flex-row items-center'>\n                    <LogOut size={18} color='#374151' />\n                    <Text className='ml-2 text-sm text-gray-700'>Logout</Text>\n                </TouchableOpacity>\n            </View>\n\n            {/* User Info */}\n            <View className='flex-row items-center'>\n                <View className='w-12 h-12 rounded-full bg-gray-200 items-center justify-center'>\n                    <Text className='text-lg font-semibold text-gray-700'>\n                        {user.name.charAt(0).toUpperCase()}\n                    </Text>\n                </View>\n                <View className='ml-3 flex-1'>\n                    <Text className='font-semibold text-gray-900 text-base'>{user.name}</Text>\n                    <Text className='text-sm text-gray-500'>{user.email}</Text>\n                    <View className='flex-row mt-1'>\n                        <View className='bg-gray-100 rounded px-2 py-1 mr-2'>\n                            <Text className='text-xs text-gray-600'>\n                                {user.name || 'Staff Member'}\n                            </Text>\n                        </View>\n\n                        <View className='bg-gray-100 rounded px-2 py-1'>\n                            <Text className='text-xs text-gray-600'>\n                                {store?.name ?? 'No Store available'}\n                            </Text>\n                        </View>\n                    </View>\n                </View>\n            </View>\n        </View>\n    );\n};\n","size_bytes":3044},"components/account/store/StoreHeader.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface StoreHeaderProps {\n    isEditing: boolean;\n    onBack: () => void;\n    onEdit: () => void;\n}\n\nexport const StoreHeader: React.FC<StoreHeaderProps> = ({ isEditing, onBack, onEdit }) => {\n    return (\n        <View className='bg-white px-4 py-3 flex-row justify-between items-center'>\n            <View className='flex-row items-center'>\n                <TouchableOpacity onPress={onBack} className='mr-3'>\n                    <Ionicons name='arrow-back' size={24} color='#000' />\n                </TouchableOpacity>\n                <Ionicons name='storefront-outline' size={24} color='#000' />\n                <Text className='ml-2 text-lg font-semibold'>Store Information</Text>\n            </View>\n            {!isEditing && (\n                <TouchableOpacity\n                    onPress={onEdit}\n                    className='flex-row items-center bg-gray-900 rounded-lg px-4 py-2'>\n                    <Ionicons name='create-outline' size={16} color='#FFFFFF' />\n                    <Text className='ml-2 text-sm text-white font-medium'>Edit</Text>\n                </TouchableOpacity>\n            )}\n        </View>\n    );\n};\n","size_bytes":1277},"app/(tabs)/checkout/index.tsx":{"content":"import { CartSummaryBar } from '@/components/checkout/CartSummaryBar';\nimport { CategoriesGrid } from '@/components/checkout/CategoriesGrid';\nimport { QuickReferenceSection } from '@/components/checkout/QuickReferenceSection';\nimport { Header } from '@/components/common/Header';\nimport { SearchBar } from '@/components/common/SearchBar';\nimport { CATEGORIES } from '@/constants/categories';\nimport { QUICK_ITEMS } from '@/constants/quickItems';\nimport { useCart } from '@/hooks/useCart';\nimport { Category } from '@/types';\nimport { router } from 'expo-router';\nimport React from 'react';\nimport { ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nconst ShopPOS: React.FC = () => {\n    const [isSearchFocused, setIsSearchFocused] = React.useState(false);\n    const [searchText, setSearchText] = React.useState('');\n\n    const { globalCart, totalCartItems, totalCartPrice, updateGlobalCart } = useCart();\n\n    const handleCategoryPress = (category: Category) => {\n        // Navigate to category screen with params\n        router.push({\n            pathname: '/(tabs)/checkout/category',\n            params: {\n                categoryId: category.id,\n                categoryName: category.name,\n            },\n        });\n    };\n\n    const handleMainCartCheckout = () => {\n        if (totalCartItems > 0) {\n            // Navigate to payment screen\n            router.push('/(tabs)/checkout/payment');\n        }\n    };\n\n    return (\n        <SafeAreaView className='flex-1 bg-white'>\n            <Header title='Shop POS'>\n                <SearchBar\n                    placeholder='Search products...'\n                    isSearchFocused={isSearchFocused}\n                    onFocus={() => setIsSearchFocused(true)}\n                    onBlur={() => setIsSearchFocused(false)}\n                    value={searchText}\n                    onChangeText={setSearchText}\n                />\n            </Header>\n\n            <ScrollView className='flex-1' showsVerticalScrollIndicator={false}>\n                <CategoriesGrid categories={CATEGORIES} onCategoryPress={handleCategoryPress} />\n\n                <QuickReferenceSection\n                    quickItems={QUICK_ITEMS}\n                    globalCart={globalCart}\n                    setGlobalCart={updateGlobalCart}\n                />\n            </ScrollView>\n\n            <CartSummaryBar\n                totalItems={totalCartItems}\n                totalPrice={totalCartPrice}\n                onCheckout={handleMainCartCheckout}\n            />\n        </SafeAreaView>\n    );\n};\n\nexport default ShopPOS;\n","size_bytes":2605},"android/app/src/main/java/com/kagwep/pos/MainActivity.kt":{"content":"package com.kagwep.pos\nimport expo.modules.splashscreen.SplashScreenManager\n\nimport android.os.Build\nimport android.os.Bundle\n\nimport com.facebook.react.ReactActivity\nimport com.facebook.react.ReactActivityDelegate\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled\nimport com.facebook.react.defaults.DefaultReactActivityDelegate\n\nimport expo.modules.ReactActivityDelegateWrapper\n\nclass MainActivity : ReactActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    // Set the theme to AppTheme BEFORE onCreate to support\n    // coloring the background, status bar, and navigation bar.\n    // This is required for expo-splash-screen.\n    // setTheme(R.style.AppTheme);\n    // @generated begin expo-splashscreen - expo prebuild (DO NOT MODIFY) sync-f3ff59a738c56c9a6119210cb55f0b613eb8b6af\n    SplashScreenManager.registerOnActivity(this)\n    // @generated end expo-splashscreen\n    super.onCreate(null)\n  }\n\n  /**\n   * Returns the name of the main component registered from JavaScript. This is used to schedule\n   * rendering of the component.\n   */\n  override fun getMainComponentName(): String = \"main\"\n\n  /**\n   * Returns the instance of the [ReactActivityDelegate]. We use [DefaultReactActivityDelegate]\n   * which allows you to enable New Architecture with a single boolean flags [fabricEnabled]\n   */\n  override fun createReactActivityDelegate(): ReactActivityDelegate {\n    return ReactActivityDelegateWrapper(\n          this,\n          BuildConfig.IS_NEW_ARCHITECTURE_ENABLED,\n          object : DefaultReactActivityDelegate(\n              this,\n              mainComponentName,\n              fabricEnabled\n          ){})\n  }\n\n  /**\n    * Align the back button behavior with Android S\n    * where moving root activities to background instead of finishing activities.\n    * @see <a href=\"https://developer.android.com/reference/android/app/Activity#onBackPressed()\">onBackPressed</a>\n    */\n  override fun invokeDefaultOnBackPressed() {\n      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.R) {\n          if (!moveTaskToBack(false)) {\n              // For non-root activities, use the default implementation to finish them.\n              super.invokeDefaultOnBackPressed()\n          }\n          return\n      }\n\n      // Use the default back button implementation on Android S\n      // because it's doing more than [Activity.moveTaskToBack] in fact.\n      super.invokeDefaultOnBackPressed()\n  }\n}\n","size_bytes":2449},"components/credit/transaction/TransactionDetailsCard.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { Receipt, ShoppingCart } from 'lucide-react-native';\n\ninterface TransactionDetailsCardProps {\n\tamount: number;\n\tdate: string;\n\titems: string[];\n}\n\nexport const TransactionDetailsCard: React.FC<TransactionDetailsCardProps> = ({\n\tamount,\n\tdate,\n\titems,\n}) => {\n\tconst isCredit = amount < 0;\n\n\treturn (\n\t\t<View className='mx-4 mt-4 bg-white rounded-xl p-4 shadow-sm'>\n\t\t\t<View className='flex-row items-center justify-between mb-4 pb-4 border-b border-gray-200'>\n\t\t\t\t<View className='flex-row items-center'>\n\t\t\t\t\t<Receipt size={20} color='#000' />\n\t\t\t\t\t<Text className='text-base font-semibold ml-2'>\n\t\t\t\t\t\t{isCredit ? 'Credit' : 'Payment'}\n\t\t\t\t\t</Text>\n\t\t\t\t</View>\n\t\t\t\t<Text\n\t\t\t\t\tclassName={`text-2xl font-bold ${isCredit ? 'text-red-600' : 'text-green-600'}`}>\n\t\t\t\t\t{isCredit ? '-' : '+'}${Math.abs(amount).toFixed(2)}\n\t\t\t\t</Text>\n\t\t\t</View>\n\n\t\t\t<View className='flex-row items-center justify-between mb-4'>\n\t\t\t\t<Text className='text-sm text-gray-600 mb-1'>Date:</Text>\n\t\t\t\t<Text className='text-base font-medium'>{date}</Text>\n\t\t\t</View>\n\n\t\t\t{items.length > 0 && (\n\t\t\t\t<View>\n\t\t\t\t\t<View className='flex-row items-center mb-3'>\n\t\t\t\t\t\t<ShoppingCart size={18} color='#000' />\n\t\t\t\t\t\t<Text className='text-base font-semibold ml-2'>Items Purchased</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t{items.map((item, index) => (\n\t\t\t\t\t\t<View key={index} className='bg-red-50 rounded-lg px-4 py-3 mb-2'>\n\t\t\t\t\t\t\t<Text className='text-base text-gray-800'>{item}</Text>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t))}\n\t\t\t\t</View>\n\t\t\t)}\n\t\t</View>\n\t);\n};\n","size_bytes":1569},"ios/pos/AppDelegate.swift":{"content":"import Expo\nimport React\nimport ReactAppDependencyProvider\n\n@UIApplicationMain\npublic class AppDelegate: ExpoAppDelegate {\n  var window: UIWindow?\n\n  var reactNativeDelegate: ExpoReactNativeFactoryDelegate?\n  var reactNativeFactory: RCTReactNativeFactory?\n\n  public override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil\n  ) -> Bool {\n    let delegate = ReactNativeDelegate()\n    let factory = ExpoReactNativeFactory(delegate: delegate)\n    delegate.dependencyProvider = RCTAppDependencyProvider()\n\n    reactNativeDelegate = delegate\n    reactNativeFactory = factory\n    bindReactNativeFactory(factory)\n\n#if os(iOS) || os(tvOS)\n    window = UIWindow(frame: UIScreen.main.bounds)\n    factory.startReactNative(\n      withModuleName: \"main\",\n      in: window,\n      launchOptions: launchOptions)\n#endif\n\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n\n  // Linking API\n  public override func application(\n    _ app: UIApplication,\n    open url: URL,\n    options: [UIApplication.OpenURLOptionsKey: Any] = [:]\n  ) -> Bool {\n    return super.application(app, open: url, options: options) || RCTLinkingManager.application(app, open: url, options: options)\n  }\n\n  // Universal Links\n  public override func application(\n    _ application: UIApplication,\n    continue userActivity: NSUserActivity,\n    restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void\n  ) -> Bool {\n    let result = RCTLinkingManager.application(application, continue: userActivity, restorationHandler: restorationHandler)\n    return super.application(application, continue: userActivity, restorationHandler: restorationHandler) || result\n  }\n}\n\nclass ReactNativeDelegate: ExpoReactNativeFactoryDelegate {\n  // Extension point for config-plugins\n\n  override func sourceURL(for bridge: RCTBridge) -> URL? {\n    // needed to return the correct URL for expo-dev-client.\n    bridge.bundleURL ?? bundleURL()\n  }\n\n  override func bundleURL() -> URL? {\n#if DEBUG\n    return RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: \".expo/.virtual-metro-entry\")\n#else\n    return Bundle.main.url(forResource: \"main\", withExtension: \"jsbundle\")\n#endif\n  }\n}\n","size_bytes":2275},"components/account/store/BasicStoreInfoCard.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { StoreAvatar } from './StoreAvatar';\n\ninterface BasicStoreInfoCardProps {\n    name: string;\n    type: string;\n    isEditing: boolean;\n    onNameChange: (text: string) => void;\n    onTypeChange: (text: string) => void;\n}\n\nexport const BasicStoreInfoCard: React.FC<BasicStoreInfoCardProps> = ({\n    name,\n    type,\n    isEditing,\n    onNameChange,\n    onTypeChange,\n}) => {\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <View className='items-center mb-4'>\n                <StoreAvatar storeName={name} size='md' />\n            </View>\n\n            {/* Store Name */}\n            <View className='mb-3'>\n                <Text className='text-sm text-gray-600 font-medium mb-2'>Store Name</Text>\n                {isEditing ? (\n                    <TextInput\n                        value={name}\n                        onChangeText={onNameChange}\n                        className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                    />\n                ) : (\n                    <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                        <Text className='text-gray-900 font-semibold'>{name}</Text>\n                    </View>\n                )}\n            </View>\n\n            {/* Business Type */}\n            <View>\n                <Text className='text-sm text-gray-600 font-medium mb-2'>Business Type</Text>\n                {isEditing ? (\n                    <TextInput\n                        value={type}\n                        onChangeText={onTypeChange}\n                        className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                    />\n                ) : (\n                    <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                        <Text className='text-gray-900'>{type}</Text>\n                    </View>\n                )}\n            </View>\n        </View>\n    );\n};\n","size_bytes":1988},"components/inventory/category/CategoryChip.tsx":{"content":"import React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { Category } from '@/types';\n\ninterface CategoryChipProps {\n    category: Category;\n    isSelected: boolean;\n    onPress: () => void;\n}\n\nexport const CategoryChip: React.FC<CategoryChipProps> = ({ category, isSelected, onPress }) => {\n    return (\n        <TouchableOpacity\n            onPress={onPress}\n            className={`flex-row items-center px-3 py-2 mr-2 mb-2 rounded-full ${\n                isSelected ? 'bg-gray-800' : 'bg-gray-100'\n            }`}>\n            <Text className='text-sm mr-1'>{category.icon}</Text>\n            <Text className={`text-sm font-medium ${isSelected ? 'text-white' : 'text-gray-700'}`}>\n                {category.name}\n            </Text>\n            <Text className={`text-xs ml-1 ${isSelected ? 'text-gray-300' : 'text-gray-500'}`}>\n                {category.count}\n            </Text>\n        </TouchableOpacity>\n    );\n};\n","size_bytes":956},"components/checkout/QuickReferenceSection.tsx":{"content":"import { CartItem, QuickItem } from '@/types';\nimport React from 'react';\nimport { View } from 'react-native';\nimport { SectionTitle } from '../common/SectionTitle';\nimport { QuickReferenceItem } from './QuickReferenceItem';\n\n\ninterface QuickReferenceSectionProps {\n  quickItems: QuickItem[];\n  globalCart: CartItem[];\n  setGlobalCart: (cart: CartItem[]) => void;\n}\n\nexport const QuickReferenceSection: React.FC<QuickReferenceSectionProps> = ({\n  quickItems,\n  globalCart,\n  setGlobalCart\n}) => {\n  return (\n    <View className=\"px-4 mt-6 mb-6\">\n      <SectionTitle title=\"Quick Reference\" />\n      {quickItems.map((item: QuickItem, index: number) => (\n        <QuickReferenceItem \n          key={index} \n          item={item} \n          globalCart={globalCart} \n          setGlobalCart={setGlobalCart}\n        />\n      ))}\n    </View>\n  );\n};","size_bytes":843},"components/inventory/SearchAndFilterRow.tsx":{"content":"import React from 'react';\nimport { View } from 'react-native';\nimport { InventorySearchBar } from './InventorySearchBar';\nimport { FilterButton } from './FilterButton';\nimport { FilterState } from '@/types';\n\n\ninterface SearchAndFilterRowProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  isSearchFocused: boolean;\n  onSearchFocus: () => void;\n  onSearchBlur: () => void;\n  onClear: () => void;\n  selectedFilter: keyof FilterState; \n  onToggleFilter: (filter: keyof FilterState) => void;\n}\n\nexport const SearchAndFilterRow: React.FC<SearchAndFilterRowProps> = ({\n  searchQuery,\n  onSearchChange,\n  isSearchFocused,\n  onSearchFocus,\n  onSearchBlur,\n  onClear,\n  selectedFilter,\n  onToggleFilter\n}) => {\n  return (\n    <View className=\"flex-row items-center mb-4\">\n      <InventorySearchBar\n        searchQuery={searchQuery}\n        onSearchChange={onSearchChange}\n        isSearchFocused={isSearchFocused}\n        onSearchFocus={onSearchFocus}\n        onSearchBlur={onSearchBlur}\n        onClear={onClear}\n      />\n      \n      {!isSearchFocused && searchQuery.length === 0 && (\n        <>\n          <FilterButton\n            type=\"Low\"\n            isActive={selectedFilter === 'Low'}\n            onPress={() => onToggleFilter('Low')}\n          />\n          <FilterButton\n            type=\"Out\"\n            isActive={selectedFilter === 'Out'}\n            onPress={() => onToggleFilter('Out')}\n          />\n          <FilterButton\n            type=\"Ordered\"\n            isActive={selectedFilter === 'Ordered'}\n            onPress={() => onToggleFilter('Ordered')}\n          />\n        </>\n      )}\n    </View>\n  );\n};","size_bytes":1641},"components/credit/CreditSummarySection.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { CreditRatingFilter } from './CreditRatingFilter';\nimport { SearchBar } from '@/components/common/SearchBar';\n\ninterface CreditSummarySectionProps {\n\ttotalAmount: number;\n\tshowCreditRating: boolean;\n\tonCloseCreditRating: () => void;\n\tsearchQuery: string;\n\tonSearchChange: (query: string) => void;\n}\n\nexport const CreditSummarySection: React.FC<CreditSummarySectionProps> = ({\n\ttotalAmount,\n\tshowCreditRating,\n\tonCloseCreditRating,\n\tsearchQuery,\n\tonSearchChange,\n}) => {\n\treturn (\n\t\t<View className='p-4 border-b border-gray-200'>\n\t\t\t<View className='flex-row justify-between items-center mb-3'>\n\t\t\t\t<Text className='text-lg font-semibold'>Credit</Text>\n\t\t\t\t<Text className='text-base text-gray-600'>\n\t\t\t\t\tTotal Amount: <Text className='font-semibold'>${totalAmount.toFixed(2)}</Text>\n\t\t\t\t</Text>\n\t\t\t</View>\n\n\t\t\t{showCreditRating && <CreditRatingFilter onClose={onCloseCreditRating} />}\n\n\t\t\t<SearchBar\n\t\t\t\tplaceholder='Search customers...'\n\t\t\t\tvalue={searchQuery}\n\t\t\t\tonChangeText={onSearchChange}\n\t\t\t/>\n\t\t</View>\n\t);\n};\n","size_bytes":1098},"hooks/useCategoryProducts.ts":{"content":"import { FilterState } from '@/types';\nimport { useMemo, useState } from 'react';\n\nexport const useCategoryProducts = (categoryName: string, allInventoryData: any[]) => {\n    const [searchQuery, setSearchQuery] = useState('');\n    const [selectedFilter, setSelectedFilter] = useState<keyof FilterState>('All');\n    const [isSearchFocused, setIsSearchFocused] = useState(false);\n\n    // Filter products by category\n    const categoryProducts = useMemo(\n        () => allInventoryData.filter((item) => item.category === categoryName),\n        [allInventoryData, categoryName],\n    );\n\n    // Apply search and filters\n    const filteredData = useMemo(() => {\n        return categoryProducts.filter((item) => {\n            const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase());\n\n            let matchesFilter = true;\n            if (selectedFilter === 'Low') {\n                matchesFilter = item.isLowStock;\n            } else if (selectedFilter === 'Out') {\n                matchesFilter = item.isOut;\n            }\n\n            return matchesSearch && matchesFilter;\n        });\n    }, [categoryProducts, searchQuery, selectedFilter]);\n\n    // Calculate stats\n    const stats = useMemo(\n        () => ({\n            totalItems: categoryProducts.length,\n            lowStockItems: categoryProducts.filter((item) => item.isLowStock).length,\n            outOfStockItems: categoryProducts.filter((item) => item.isOut).length,\n        }),\n        [categoryProducts],\n    );\n\n    const toggleFilter = (filter: keyof FilterState) => {\n        setSelectedFilter(selectedFilter === filter ? 'All' : filter);\n    };\n\n    return {\n        searchQuery,\n        setSearchQuery,\n        selectedFilter,\n        toggleFilter,\n        isSearchFocused,\n        setIsSearchFocused,\n        filteredData,\n        stats,\n    };\n};\n","size_bytes":1839},"constants/credit.ts":{"content":"import { Customer } from '@/types';\n\nexport const MOCK_CUSTOMERS: Customer[] = [\n\t{\n\t\tid: '1',\n\t\tfirstName: 'Samuel',\n\t\tlastName: 'Kipchoge',\n\t\tamount: 35.75,\n\t\tphoneNumber: '+254712345678',\n\t\tdueDate: '2024-12-18',\n\t\trating: 'Low',\n\t\tdaysLeft: 1,\n\t},\n\t{\n\t\tid: '2',\n\t\tfirstName: 'Peter',\n\t\tlastName: 'Kamau',\n\t\tamount: 42.25,\n\t\tphoneNumber: '+254723456789',\n\t\tdueDate: '2024-12-20',\n\t\trating: 'Medium',\n\t\tdaysLeft: 1,\n\t},\n\t{\n\t\tid: '3',\n\t\tfirstName: 'Grace',\n\t\tlastName: 'Wanjiru',\n\t\tamount: 75.5,\n\t\tphoneNumber: '+254734567890',\n\t\tdueDate: '2024-12-22',\n\t\trating: 'Good',\n\t\tdaysLeft: 3,\n\t},\n\t{\n\t\tid: '4',\n\t\tfirstName: 'Mary',\n\t\tlastName: 'Akinyi',\n\t\tamount: 120.0,\n\t\tphoneNumber: '+254745678901',\n\t\tdueDate: '2024-12-25',\n\t\trating: 'Good',\n\t\tdaysLeft: 6,\n\t},\n];\n","size_bytes":762},"components/checkout/OrderSummary.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { CartItem } from '@/types';\n\ninterface OrderSummaryProps {\n  cartItems: CartItem[];\n  total: number;\n}\n\nexport const OrderSummary: React.FC<OrderSummaryProps> = ({ cartItems, total }) => {\n  return (\n    <View className=\"bg-white mx-4 mt-4 rounded-xl p-4\">\n      <Text className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Order Summary\n      </Text>\n      \n      {cartItems.map((item) => (\n        <View key={item.id} className=\"flex-row justify-between items-center mb-2\">\n          <View className=\"flex-1\">\n            <Text className=\"text-gray-900 font-medium\">\n              {item.name}\n            </Text>\n            <Text className=\"text-gray-500 text-sm\">\n              ${item.price.toFixed(2)} × {item.quantity}\n            </Text>\n          </View>\n          <Text className=\"text-gray-900 font-semibold\">\n            ${(item.price * item.quantity).toFixed(2)}\n          </Text>\n        </View>\n      ))}\n      \n      <View className=\"border-t border-gray-200 pt-3 mt-3\">\n        <View className=\"flex-row justify-between items-center\">\n          <Text className=\"text-lg font-bold text-gray-900\">\n            Total\n          </Text>\n          <Text className=\"text-lg font-bold text-gray-900\">\n            ${total.toFixed(2)}\n          </Text>\n        </View>\n      </View>\n    </View>\n  );\n};","size_bytes":1394},"components/credit/CreditRatingBadge.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\n\ntype RatingType = 'Low' | 'Medium' | 'Good';\n\ninterface CreditRatingBadgeProps {\n\trating: RatingType;\n\tsize?: 'sm' | 'md';\n}\n\nexport const CreditRatingBadge: React.FC<CreditRatingBadgeProps> = ({ rating, size = 'sm' }) => {\n\tconst getRatingStyles = () => {\n\t\tswitch (rating) {\n\t\t\tcase 'Low':\n\t\t\t\treturn 'bg-red-100 text-red-600';\n\t\t\tcase 'Medium':\n\t\t\t\treturn 'bg-yellow-100 text-yellow-600';\n\t\t\tcase 'Good':\n\t\t\t\treturn 'bg-green-100 text-green-600';\n\t\t\tdefault:\n\t\t\t\treturn 'bg-gray-100 text-gray-600';\n\t\t}\n\t};\n\n\tconst sizeClass = size === 'sm' ? 'px-2 py-0.5 text-xs' : 'px-3 py-1 text-sm';\n\n\treturn (\n\t\t<View className={`rounded ${getRatingStyles()} ${sizeClass}`}>\n\t\t\t<Text className={`font-medium ${getRatingStyles()}`}>{rating}</Text>\n\t\t</View>\n\t);\n};\n","size_bytes":827},"components/checkout/modal/AddCustomerModal.tsx":{"content":"import { ActionButton } from '@/components/ui/ActionButton';\nimport { Customer } from '@/types';\nimport { X } from 'lucide-react-native';\nimport React, { useState } from 'react';\nimport {\n    KeyboardAvoidingView,\n    Modal,\n    Platform,\n    ScrollView,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from 'react-native';\n\ninterface AddCustomerModalProps {\n    visible: boolean;\n    onClose: () => void;\n    onAddCustomer: (customer: Customer) => void;\n}\n\nexport const AddCustomerModal: React.FC<AddCustomerModalProps> = ({\n    visible,\n    onClose,\n    onAddCustomer,\n}) => {\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const resetForm = () => {\n        setFirstName('');\n        setLastName('');\n        setPhoneNumber('');\n        setIsSubmitting(false);\n    };\n\n    const handleClose = () => {\n        resetForm();\n        onClose();\n    };\n\n    const handleSubmit = async () => {\n        if (!firstName.trim() || !lastName.trim() || !phoneNumber.trim()) {\n            return;\n        }\n\n        setIsSubmitting(true);\n\n        try {\n            const newCustomer: Customer = {\n                id: `customer-${Date.now()}`,\n                firstName: firstName.trim(),\n                lastName: lastName.trim(),\n                phoneNumber: phoneNumber.trim(),\n                amount: 0,\n                dueDate: '',\n                rating: 'Low',\n                daysLeft: 0,\n            };\n\n            onAddCustomer(newCustomer);\n            resetForm();\n            onClose();\n        } catch (error) {\n            console.error('Error adding customer:', error);\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    const isFormValid = firstName.trim() && lastName.trim() && phoneNumber.trim();\n\n    return (\n        <Modal visible={visible} transparent animationType='fade' onRequestClose={handleClose}>\n            <View className='flex-1 bg-black/50 justify-center items-center p-4'>\n                <KeyboardAvoidingView\n                    behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n                    className='w-full max-w-sm'>\n                    <View className='bg-white rounded-2xl p-6 w-full'>\n                        {/* Header */}\n                        <View className='flex-row items-center justify-between mb-6'>\n                            <Text className='text-lg font-semibold text-gray-900'>\n                                Add New Customer\n                            </Text>\n                            <TouchableOpacity\n                                onPress={handleClose}\n                                className='p-1'\n                                hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}>\n                                <X size={20} color='#6B7280' />\n                            </TouchableOpacity>\n                        </View>\n\n                        <ScrollView showsVerticalScrollIndicator={false}>\n                            {/* First Name */}\n                            <View className='mb-4'>\n                                <Text className='text-sm font-medium text-gray-900 mb-2'>\n                                    First Name\n                                </Text>\n                                <TextInput\n                                    value={firstName}\n                                    onChangeText={setFirstName}\n                                    placeholder='Enter first name'\n                                    placeholderTextColor='#9CA3AF'\n                                    className='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n                                    autoCapitalize='words'\n                                    returnKeyType='next'\n                                />\n                            </View>\n\n                            {/* Last Name */}\n                            <View className='mb-4'>\n                                <Text className='text-sm font-medium text-gray-900 mb-2'>\n                                    Last Name\n                                </Text>\n                                <TextInput\n                                    value={lastName}\n                                    onChangeText={setLastName}\n                                    placeholder='Enter last name'\n                                    placeholderTextColor='#9CA3AF'\n                                    className='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n                                    autoCapitalize='words'\n                                    returnKeyType='next'\n                                />\n                            </View>\n\n                            {/* Phone Number */}\n                            <View className='mb-6'>\n                                <Text className='text-sm font-medium text-gray-900 mb-2'>\n                                    Phone Number\n                                </Text>\n                                <TextInput\n                                    value={phoneNumber}\n                                    onChangeText={setPhoneNumber}\n                                    placeholder='Enter phone number'\n                                    placeholderTextColor='#9CA3AF'\n                                    className='bg-gray-50 rounded-lg px-3 py-3 text-gray-900 border border-gray-200'\n                                    keyboardType='phone-pad'\n                                    returnKeyType='done'\n                                    onSubmitEditing={handleSubmit}\n                                />\n                            </View>\n\n                            {/* Buttons */}\n                            <View className='flex-row space-x-3'>\n                                <ActionButton\n                                    text='Cancel'\n                                    onPress={handleClose}\n                                    variant='ghost'\n                                    size='md'\n                                    fullWidth\n                                    className='flex-1'\n                                />\n                                <ActionButton\n                                    text='Confirm New Customer'\n                                    onPress={handleSubmit}\n                                    variant='primary'\n                                    size='md'\n                                    fullWidth\n                                    className='flex-1'\n                                    disabled={!isFormValid}\n                                    loading={isSubmitting}\n                                />\n                            </View>\n                        </ScrollView>\n                    </View>\n                </KeyboardAvoidingView>\n            </View>\n        </Modal>\n    );\n};\n","size_bytes":7004},"components/credit/forms/RecordPaymentForm.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { CustomerSuggestionDropdown } from '../CustomerSuggestionDropdown';\nimport { ActionButton } from '@/components/ui/ActionButton';\nimport { CheckCircle } from 'lucide-react-native';\n\ninterface RecordPaymentFormProps {\n\tcustomerName: string;\n\tonCustomerNameChange: (name: string) => void;\n\tamountPaid: string;\n\tonAmountPaidChange: (amount: string) => void;\n\tshowSuggestions: boolean;\n\tsuggestedCustomers: any[];\n\tonSelectCustomer: (customer: any) => void;\n\tonRecord: () => void;\n}\n\nexport const RecordPaymentForm: React.FC<RecordPaymentFormProps> = ({\n\tcustomerName,\n\tonCustomerNameChange,\n\tamountPaid,\n\tonAmountPaidChange,\n\tshowSuggestions,\n\tsuggestedCustomers,\n\tonSelectCustomer,\n\tonRecord,\n}) => {\n\treturn (\n\t\t<View className='p-4 border-b border-gray-200'>\n\t\t\t<Text className='text-lg font-semibold mb-4'>Record Paid Credit</Text>\n\t\t\t<View className='flex-row justify-between mb-4'>\n\t\t\t\t<View className='flex-1 mr-2'>\n\t\t\t\t\t<Text className='text-sm text-gray-600 mb-2'>Customer Name</Text>\n\t\t\t\t\t<View className='relative'>\n\t\t\t\t\t\t<View className='flex-row items-center bg-gray-100 rounded-lg px-3 py-3'>\n\t\t\t\t\t\t\t<Ionicons name='person-outline' size={18} color='#666' />\n\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\tclassName='flex-1 ml-2 text-base'\n\t\t\t\t\t\t\t\tplaceholder='Sam'\n\t\t\t\t\t\t\t\tvalue={customerName}\n\t\t\t\t\t\t\t\tonChangeText={onCustomerNameChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t{showSuggestions && customerName && (\n\t\t\t\t\t\t\t<CustomerSuggestionDropdown\n\t\t\t\t\t\t\t\tcustomers={suggestedCustomers}\n\t\t\t\t\t\t\t\tonSelectCustomer={onSelectCustomer}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\n\t\t\t\t<View className='flex-1 ml-2'>\n\t\t\t\t\t<Text className='text-sm text-gray-600 mb-2'>Amount Paid</Text>\n\t\t\t\t\t<View className='flex-row items-center bg-gray-100 rounded-lg px-3 py-3'>\n\t\t\t\t\t\t<Text className='text-gray-600'>$</Text>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tclassName='flex-1 ml-2 text-base'\n\t\t\t\t\t\t\tplaceholder='20'\n\t\t\t\t\t\t\tvalue={amountPaid}\n\t\t\t\t\t\t\tonChangeText={onAmountPaidChange}\n\t\t\t\t\t\t\tkeyboardType='numeric'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t</View>\n\n\t\t\t{amountPaid && (\n\t\t\t\t<ActionButton\n\t\t\t\t\ttext='Record'\n\t\t\t\t\ticon={CheckCircle}\n\t\t\t\t\tonPress={onRecord}\n\t\t\t\t\tvariant='primary'\n\t\t\t\t\tsize='md'\n\t\t\t\t\tfullWidth\n\t\t\t\t/>\n\t\t\t)}\n\t\t</View>\n\t);\n};\n","size_bytes":2356},"hooks/useTransactionPayment.ts":{"content":"import { useState } from 'react';\n\nexport const useTransactionPayment = () => {\n\tconst [paymentAmount, setPaymentAmount] = useState('');\n\tconst [paymentMethod, setPaymentMethod] = useState('');\n\n\tconst handleSubmit = () => {\n\t\tconsole.log('Processing payment:', { paymentAmount, paymentMethod });\n\t\t// TODO: Process payment\n\t\tsetPaymentAmount('');\n\t\tsetPaymentMethod('');\n\t};\n\n\tconst resetForm = () => {\n\t\tsetPaymentAmount('');\n\t\tsetPaymentMethod('');\n\t};\n\n\treturn {\n\t\tpaymentAmount,\n\t\tsetPaymentAmount,\n\t\tpaymentMethod,\n\t\tsetPaymentMethod,\n\t\thandleSubmit,\n\t\tresetForm,\n\t};\n};\n","size_bytes":577},"db/models/users.ts":{"content":"import { Model, Q, Query } from '@nozbe/watermelondb';\nimport {\n    children,\n    date,\n    field,\n    lazy,\n    reader,\n    readonly,\n    text,\n    writer,\n} from '@nozbe/watermelondb/decorators';\n// Avoid importing database at module top-level to prevent require cycles.\n// Use type-only imports for models to keep runtime dependencies light.\nimport type { Business, Session, Store } from '..';\n\nexport default class User extends Model {\n    static table = 'users';\n    static associations = {\n        sessions: { type: 'has_many' as const, foreignKey: 'user_id' },\n        businesses: { type: 'has_many' as const, foreignKey: 'owner_id' },\n        managed_stores: { type: 'has_many' as const, foreignKey: 'manager_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @text('email') email!: string;\n    @text('name') name!: string;\n    @text('phone') phone!: string;\n    @text('password_hash') passwordHash!: string;\n    @text('pin_hash') pinHash!: string;\n    @readonly @date('created_at') createdAt!: Date;\n    @readonly @date('updated_at') updatedAt!: Date;\n    @field('deleted') deleted!: boolean;\n    @field('is_owner') isOwner!: boolean;\n\n    // Relations\n    @children('sessions') sessions!: Query<Session>;\n    @children('businesses') ownedBusinesses!: Query<Business>;\n    @children('stores') managedStores!: Query<Store>;\n\n    // Computed properties\n    get isActive(): boolean {\n        return !this.deleted;\n    }\n\n    get fullName(): string {\n        return this.name;\n    }\n    @lazy ownerActiveBusinesses = this.ownedBusinesses.extend(Q.where('deleted', false));\n    @lazy activeManagedStores = this.managedStores.extend(\n        Q.where('deleted', false),\n        Q.where('status', 'active'),\n    );\n    // Writers\n    @writer async markAsDeleted() {\n        await this.update((user) => {\n            user.deleted = true;\n        });\n    }\n    @writer async updateUserInfo({\n        name,\n        email,\n        phone,\n        isOwner,\n    }: {\n        name?: string;\n        email?: string;\n        phone?: string;\n        isOwner?: boolean;\n    }) {\n        const { database } = await import('..');\n        await database.write(async () => {\n            await this.update((user) => {\n                if (name !== undefined) user.name = name;\n                if (email !== undefined) user.email = email;\n                if (phone !== undefined) user.phone = phone;\n                if (isOwner !== undefined) user.isOwner = isOwner;\n            });\n        });\n    }\n\n    @writer async updateCredentials({\n        passwordHash,\n        pinHash,\n    }: {\n        passwordHash?: string;\n        pinHash?: string;\n    }) {\n        await this.update((user) => {\n            if (passwordHash !== undefined) user.passwordHash = passwordHash;\n            if (pinHash !== undefined) user.pinHash = pinHash;\n        });\n    }\n    @reader static async userBusiness(userId: string) {\n        const { database } = await import('..');\n        return await database\n            .get<Business>('businesses')\n            .query(Q.where('owner_id', userId))\n            .fetch();\n    }\n\n    // Readers\n    @reader static async findByEmail(email: string) {\n        const { database } = await import('..');\n        const users = await database\n            .get<User>('users')\n            .query(Q.where('email', email.trim()), Q.where('deleted', false))\n            .fetch();\n        return users[0] || null;\n    }\n\n    @reader static async findByExternalId(externalId: string) {\n        const { database } = await import('..');\n        const users = await database\n            .get<User>('users')\n            .query(Q.where('external_id', externalId), Q.where('deleted', false))\n            .fetch();\n        return users[0] || null;\n    }\n    @reader static async findByUserById(id: string) {\n        const { database } = await import('..');\n        const users = await database\n            .get<User>('users')\n            .query(Q.where('id', id), Q.where('deleted', false))\n            .fetch();\n        return users[0] || null;\n    }\n\n    @reader static async findOwners() {\n        const { database } = await import('..');\n        return await database\n            .get<User>('users')\n            .query(Q.where('is_owner', true), Q.where('deleted', false))\n            .fetch();\n    }\n\n    // @reader static async OwnedBusinesses() {\n    //     const business = await this.userBusiness;\n    // }\n\n    @reader static async searchUsers(searchTerm: string) {\n        const { database } = await import('..');\n        return await database\n            .get<User>('users')\n            .query(\n                Q.where('deleted', false),\n                Q.or(\n                    Q.where('name', Q.like(`%${Q.sanitizeLikeString(searchTerm)}%`)),\n                    Q.where('email', Q.like(`%${Q.sanitizeLikeString(searchTerm)}%`)),\n                    Q.where('phone', Q.like(`%${Q.sanitizeLikeString(searchTerm)}%`)),\n                ),\n            )\n            .fetch();\n    }\n\n    @reader async isEmailTaken(excludeUserId?: string) {\n        const { database } = await import('..');\n        let query = database\n            .get<User>('users')\n            .query(Q.where('email', this.email), Q.where('deleted', false));\n\n        if (excludeUserId) {\n            query = query.extend(Q.where('id', Q.notEq(excludeUserId)));\n        }\n\n        const users = await query.fetch();\n        return users.length > 0;\n    }\n}\n","size_bytes":5435},"hooks/useCheckoutLogic.ts":{"content":"import { useState } from 'react';\nimport { CartItem } from '@/types';\n\nexport const useCheckoutLogic = (\n  cartItems: CartItem[],\n  selectedPaymentMethod: string,\n  creditAmount: string,\n  onPaymentComplete: (paymentMethod: string, amount: number) => void\n) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearchFocused, setIsSearchFocused] = useState(false);\n\n  const total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  const maxCredit = total;\n\n  const handlePay = () => {\n    if (selectedPaymentMethod === 'store-credit') {\n      const amount = parseFloat(creditAmount) || 0;\n      if (amount > 0 && amount <= maxCredit) {\n        onPaymentComplete(selectedPaymentMethod, amount);\n      }\n    } else {\n      onPaymentComplete(selectedPaymentMethod, total);\n    }\n  };\n\n  const getPayAmount = () => {\n    if (selectedPaymentMethod === 'store-credit' && creditAmount) {\n      return parseFloat(creditAmount);\n    }\n    return total;\n  };\n\n  const isPayButtonDisabled = () => {\n    return selectedPaymentMethod === 'store-credit' && (!creditAmount || parseFloat(creditAmount) <= 0);\n  };\n\n  const handleSearchFocus = () => setIsSearchFocused(true);\n  const handleSearchBlur = () => setIsSearchFocused(false);\n\n  return {\n    searchQuery,\n    setSearchQuery,\n    isSearchFocused,\n    handleSearchFocus,\n    handleSearchBlur,\n    total,\n    maxCredit,\n    handlePay,\n    getPayAmount,\n    isPayButtonDisabled\n  };\n};","size_bytes":1466},"components/inventory/CategoryTab.tsx":{"content":"import { Ionicons } from \"@expo/vector-icons\";\nimport React, { ComponentProps } from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\n\ninterface CategoryTabProps {\n  name: string;\n  icon: ComponentProps<typeof Ionicons>[\"name\"];\n  count: number;\n}\n\ninterface Props {\n  category: CategoryTabProps;\n  isSelected: boolean;\n  onPress: () => void;\n}\n\nconst CategoryTab = ({ category, isSelected, onPress }: Props) => {\n  return (\n    <TouchableOpacity\n      className={`flex-row items-center px-4 py-2 rounded-full ${\n        isSelected ? \"bg-black\" : \"bg-gray-100\"\n      } ml-2`}\n      onPress={onPress}\n    >\n      <Ionicons\n        name={category.icon}\n        size={16}\n        color={isSelected ? \"white\" : \"#666\"}\n      />\n      <Text\n        className={`ml-2 font-medium ${\n          isSelected ? \"text-white\" : \"text-gray-700\"\n        }`}\n      >\n        {category.name}\n      </Text>\n      <View\n        className={`ml-2 px-2 py-1 rounded-full ${\n          isSelected ? \"bg-white/20\" : \"bg-gray-200\"\n        }`}\n      >\n        <Text\n          className={`text-xs font-bold ${\n            isSelected ? \"text-white\" : \"text-gray-600\"\n          }`}\n        >\n          {category.count}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default CategoryTab;\n","size_bytes":1300},"app/(tabs)/account/settings.tsx":{"content":"import { View, Text } from 'react-native';\n\nexport default function Settings() {\n    return (\n        <View className='flex-1 items-center justify-center bg-white dark:bg-black'>\n            <Text className='text-lg text-gray-900 dark:text-white'>Settings</Text>\n            <Text className='text-gray-600 dark:text-gray-400'>Settings coming soon</Text>\n        </View>\n    );\n}\n","size_bytes":379},"db/models/stores.ts":{"content":"import { Model, Relation } from '@nozbe/watermelondb';\nimport { date, field, readonly, relation, text, writer } from '@nozbe/watermelondb/decorators';\nimport type Business from './business';\nimport type User from './users';\n// avoid importing database at top-level to prevent require cycles\n// import { database } from '..';\n\nexport default class Store extends Model {\n    static table = 'stores';\n    static associations = {\n        businesses: { type: 'belongs_to' as const, key: 'business_id' },\n        users: { type: 'belongs_to' as const, key: 'manager_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @text('name') name!: string;\n    @text('address') address!: string;\n    @text('phone') phone!: string;\n    @text('email') email!: string;\n    @text('status') status!: string;\n    @text('currency') currency!: string;\n    @readonly @date('created_at') createdAt!: Date;\n    @readonly @date('updated_at') updatedAt!: Date;\n    @field('deleted') deleted!: boolean;\n\n    // Relations\n    @relation('businesses', 'business_id') business!: Relation<Business>;\n    @relation('users', 'manager_id') manager!: Relation<User>;\n\n    // Computed properties\n    get isActive(): boolean {\n        return this.status === 'active' && !this.deleted;\n    }\n\n    get displayName(): string {\n        return this.name;\n    }\n\n    // Writers\n    @writer async markAsDeleted() {\n        await this.update((store) => {\n            store.deleted = true;\n        });\n    }\n\n    @writer async updateStatus(status: string) {\n        await this.update((store) => {\n            store.status = status;\n        });\n    }\n}\n","size_bytes":1615},"components/common/CategoryHeader.tsx":{"content":"import { BackButton } from '@/components/common/BackButton';\nimport { Category } from '@/types';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\ninterface CategoryHeaderProps {\n    category: Category;\n    onBack: () => void;\n    productCount?: number;\n    children?: React.ReactNode;\n}\n\nexport const CategoryHeader: React.FC<CategoryHeaderProps> = ({\n    category,\n    productCount,\n    onBack,\n    children,\n}) => {\n    return (\n        <View className='bg-white px-4 pt-4 pb-2'>\n            <View className='flex-row items-center mb-4'>\n                <BackButton onPress={onBack} />\n                <View className='flex-1'>\n                    <View className='flex-row items-center'>\n                        <Text className='text-xl font-bold text-gray-900 mr-2'>\n                            {category.icon} {category.name}\n                        </Text>\n                    </View>\n                    <Text className='text-sm text-gray-500 mt-1'>\n                        {productCount} products available\n                    </Text>\n                </View>\n            </View>\n            {children}\n        </View>\n    );\n};\n","size_bytes":1158},"components/auth/FormInput.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface FormInputProps {\n  label: string;\n  placeholder: string;\n  value: string;\n  onChangeText: (text: string) => void;\n  secureTextEntry?: boolean;\n  keyboardType?: 'default' | 'email-address' | 'numeric' | 'phone-pad';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  maxLength?: number;\n  showPasswordToggle?: boolean;\n  onTogglePassword?: () => void;\n  showPassword?: boolean;\n}\n\nexport function FormInput({\n  label,\n  placeholder,\n  value,\n  onChangeText,\n  secureTextEntry = false,\n  keyboardType = 'default',\n  autoCapitalize = 'sentences',\n  maxLength,\n  showPasswordToggle = false,\n  onTogglePassword,\n  showPassword = false,\n}: FormInputProps) {\n  return (\n    <View className=\"mb-4\">\n      <Text className=\"text-sm font-medium text-gray-900 mb-2\">{label}</Text>\n      <View className=\"relative\">\n        <TextInput\n          className={`bg-gray-100 rounded-lg px-4 py-3 text-gray-900 ${\n            showPasswordToggle ? 'pr-12' : ''\n          }`}\n          placeholder={placeholder}\n          value={value}\n          onChangeText={onChangeText}\n          secureTextEntry={secureTextEntry}\n          keyboardType={keyboardType}\n          autoCapitalize={autoCapitalize}\n          maxLength={maxLength}\n        />\n        {showPasswordToggle && onTogglePassword && (\n          <TouchableOpacity\n            className=\"absolute right-4 top-1/2 -translate-y-1/2\"\n            onPress={onTogglePassword}\n          >\n            <Ionicons \n              name={showPassword ? \"eye-off-outline\" : \"eye-outline\"} \n              size={20} \n              color=\"#6B7280\" \n            />\n          </TouchableOpacity>\n        )}\n      </View>\n    </View>\n  );\n}\n","size_bytes":1830},"components/inventory/InventoryItemsList.tsx":{"content":"import { Category } from '@/db';\nimport { CategoryData, CategoryItem, InventoryViewItem } from '@/types';\nimport React from 'react';\nimport { FlatList, Text, View } from 'react-native';\nimport { InventoryItem } from './InventoryItem';\n\ninterface InventoryListProps {\n    data: InventoryViewItem[];\n    filterText: string | undefined;\n    onSave: (updatedItem: InventoryViewItem) => void;\n    onDelete: (itemId: string) => void;\n    availableCategories: CategoryItem[];\n    addCategory?: (newCategoryData: CategoryData) => Promise<Category | undefined>;\n    loadingCategories?: boolean;\n    refreshCategories?: () => Promise<void>;\n    updateProduct?: (\n        productId: string,\n        updates: Partial<{\n            name: string;\n            categoryId: string;\n            cost: number;\n            barcode: string;\n            description: string;\n            unit: string;\n            status: string;\n        }>,\n    ) => Promise<void>;\n    updateInventory?: (\n        inventoryId: string,\n        updates: {\n            price?: number;\n            wholeSalePrice?: number;\n            minStock?: number;\n            maxStock?: number;\n            location?: string;\n        },\n    ) => Promise<void>;\n}\n\nexport const InventoryList: React.FC<InventoryListProps> = ({\n    data,\n    filterText,\n    onSave,\n    onDelete,\n    availableCategories,\n    addCategory,\n    loadingCategories,\n    refreshCategories,\n    updateProduct,\n    updateInventory,\n}) => {\n    return (\n        <View className='flex-1'>\n            <View className='flex-row justify-between items-center px-4 py-3'>\n                <Text className='text-lg font-semibold text-gray-900'>Inventory Items</Text>\n                <Text className='text-gray-600'>{filterText}</Text>\n            </View>\n\n            <FlatList\n                data={data}\n                keyExtractor={(item) => item.id}\n                showsVerticalScrollIndicator={false}\n                contentContainerStyle={{ paddingBottom: 20 }}\n                renderItem={({ item }) => (\n                    <InventoryItem\n                        item={item}\n                        onSave={onSave}\n                        onDelete={onDelete}\n                        availableCategories={availableCategories}\n                        addCategory={addCategory}\n                        loadingCategories={loadingCategories}\n                        refreshCategories={refreshCategories}\n                        updateProduct={updateProduct}\n                        updateInventory={updateInventory}\n                    />\n                )}\n            />\n        </View>\n    );\n};\n","size_bytes":2617},"components/common/EmptyState.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\n\ninterface EmptyStateProps {\n  icon: string;\n  title: string;\n  description: string;\n  className?: string;\n}\n\nexport const EmptyState: React.FC<EmptyStateProps> = ({\n  icon,\n  title,\n  description,\n  className = \"flex-1 items-center justify-center py-20\"\n}) => {\n  return (\n    <View className={className}>\n      <Text className=\"text-6xl mb-4\">{icon}</Text>\n      <Text className=\"text-gray-500 text-lg font-medium mb-2\">\n        {title}\n      </Text>\n      <Text className=\"text-gray-400 text-center\">\n        {description}\n      </Text>\n    </View>\n  );\n};","size_bytes":629},"components/auth/SignInForm.tsx":{"content":"import { AuthData } from \"@/types\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport React, { useState } from \"react\";\nimport { Text, TextInput, TouchableOpacity, View } from \"react-native\";\n\ninterface SignInFormProps {\n  onSignUp: () => void;\n  login: (userdata: AuthData) => void;\n}\n\nexport function SignInForm({ onSignUp, login }: SignInFormProps) {\n  const [formData, setFormData] = useState({\n    email: \"test123@gmail.com\",\n    pin: \"1234\",\n  });\n  const [showPin, setShowPin] = useState(false);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleSignIn = () => {\n    // Validate form data\n    if (!formData.email || !formData.pin) {\n      // Handle validation error\n      return;\n    }\n    // Handle sign in logic\n    console.log(\"Signing in...\");\n    login(formData);\n  };\n\n  return (\n    <View className=\"bg-white rounded-2xl p-6 shadow-sm\">\n      {/* Header */}\n      <View className=\"flex-row items-center mb-6\">\n        <View className=\"w-8 h-8 bg-gray-900 rounded-full items-center justify-center mr-3\">\n          <Ionicons name=\"log-in-outline\" size={16} color=\"white\" />\n        </View>\n        <Text className=\"text-lg font-semibold text-gray-900\">Sign In</Text>\n      </View>\n\n      {/* Email */}\n      <View className=\"mb-4\">\n        <Text className=\"text-sm font-medium text-gray-900 mb-2\">Email</Text>\n        <TextInput\n          className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n          placeholder=\"Enter your email\"\n          value={formData.email}\n          onChangeText={(value) => handleInputChange(\"email\", value)}\n          keyboardType=\"email-address\"\n          autoCapitalize=\"none\"\n        />\n      </View>\n\n      {/* PIN */}\n      <View className=\"mb-6\">\n        <Text className=\"text-sm font-medium text-gray-900 mb-2\">\n          4-digit PIN\n        </Text>\n        <View className=\"relative\">\n          <TextInput\n            className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900 pr-12\"\n            placeholder=\"Enter your 4-digit PIN\"\n            value={formData.pin}\n            onChangeText={(value) => handleInputChange(\"pin\", value)}\n            secureTextEntry={!showPin}\n            keyboardType=\"numeric\"\n            maxLength={4}\n          />\n          <TouchableOpacity\n            className=\"absolute right-4 top-1/2 -translate-y-1/2\"\n            onPress={() => setShowPin(!showPin)}\n          >\n            <Ionicons\n              name={showPin ? \"eye-off-outline\" : \"eye-outline\"}\n              size={20}\n              color=\"#6B7280\"\n            />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Sign In Button */}\n      <TouchableOpacity\n        className=\"bg-gray-900 rounded-lg py-4 mb-6\"\n        onPress={handleSignIn}\n      >\n        <Text className=\"text-white text-center font-semibold text-base\">\n          Sign In\n        </Text>\n      </TouchableOpacity>\n\n      {/* Sign Up Link */}\n      <View className=\"items-center\">\n        <Text className=\"text-gray-600\">\n          Don&apos;t have an account?{\" \"}\n          <Text className=\"text-gray-900 font-medium\" onPress={onSignUp}>\n            Sign up here\n          </Text>\n        </Text>\n      </View>\n    </View>\n  );\n}\n","size_bytes":3266},"components/inventory/category/ProductsList.tsx":{"content":"import React from 'react';\nimport { View, Text, FlatList } from 'react-native';\nimport { ProductItem } from './ProductItem';\n\ninterface ProductsListProps {\n  data: any[];\n  onEditProduct: (item: any) => void;\n}\n\nexport const ProductsList: React.FC<ProductsListProps> = ({ data, onEditProduct }) => {\n  return (\n    <View className=\"flex-1\">\n      <View className=\"flex-row justify-between items-center px-4 py-3\">\n        <Text className=\"text-lg font-semibold text-gray-900\">Products</Text>\n        <Text className=\"text-gray-600\">{data.length} products</Text>\n      </View>\n      \n      <FlatList\n        data={data}\n        keyExtractor={item => item.id}\n        showsVerticalScrollIndicator={false}\n        contentContainerStyle={{ paddingBottom: 20 }}\n        renderItem={({ item }) => (\n          <ProductItem item={item} onEdit={onEditProduct} />\n        )}\n      />\n    </View>\n  );\n};","size_bytes":893},"app/auth/signup.tsx":{"content":"import { AuthHeader } from '@/components/auth/AuthHeader';\nimport { BusinessInfoForm } from '@/components/auth/BusinessInfoForm';\nimport { PersonalInfoForm } from '@/components/auth/PersonalInfoForm';\nimport { SignUpCard } from '@/components/auth/SignUpCard';\nimport { createBusinessWithStore } from '@/db/services/businessService';\nimport { createUser } from '@/db/services/userService';\n\n// import { createBusinessWithStore } from '@/models/db/services/businessService';\n// import { createUser } from '@/models/db/services/userService';\nimport { BusinessStoreData, UserData } from '@/types';\nimport { router } from 'expo-router';\nimport React, { useState } from 'react';\nimport { ScrollView, View } from 'react-native';\n\nexport default function CreateAccountScreen() {\n    const [activeTab, setActiveTab] = useState<'personal' | 'business'>('personal');\n    const [personalInfo, setPersonalInfo] = useState<UserData | null>(null);\n\n    const handleContinueToBusiness = async (personalInfo: UserData) => {\n        setPersonalInfo(personalInfo);\n        setActiveTab('business');\n\n        console.log('user created', personalInfo.name, personalInfo.externalId);\n    };\n\n    const handleBackToPersonal = () => {\n        setActiveTab('personal');\n    };\n\n    const handleCreateAccount = async (businessStoreData: BusinessStoreData) => {\n        if (!personalInfo) return;\n        const user = await createUser({\n            email: personalInfo.email,\n            name: personalInfo.name,\n            phone: personalInfo.phone,\n            password: personalInfo.password,\n            pin: personalInfo.pin,\n            isOwner: true,\n        });\n\n        console.log('user created', user.id, user.externalId);\n        if (!user) {\n            console.log('Account creation failed');\n            return;\n        }\n        console.warn('creating business with', businessStoreData);\n\n        // create business and store for this user and select them in the app\n        const { business, store } = await createBusinessWithStore(businessStoreData, user.id);\n        if (!business || !store) {\n            console.error('Failed to create business and/or store for new user');\n            return;\n        }\n\n        // navigate the user into the main app (root)\n        router.replace('/');\n    };\n\n    const handleSignIn = () => {\n        router.replace('/auth/login');\n    };\n\n    return (\n        <View className='flex-1 bg-gray-50'>\n            <ScrollView className='flex-1' showsVerticalScrollIndicator={false}>\n                <AuthHeader title='Create Account' subtitle='Set up your POS system' />\n\n                <View className='px-6 pb-8'>\n                    <SignUpCard\n                        activeTab={activeTab}\n                        onTabChange={setActiveTab}\n                        onSignIn={handleSignIn}>\n                        {activeTab === 'personal' ? (\n                            <PersonalInfoForm onContinue={handleContinueToBusiness} />\n                        ) : (\n                            <BusinessInfoForm\n                                onBack={handleBackToPersonal}\n                                onCreateAccount={handleCreateAccount}\n                            />\n                        )}\n                    </SignUpCard>\n                </View>\n            </ScrollView>\n        </View>\n    );\n}\n","size_bytes":3338},"db/models/inventory.ts":{"content":"import { Model, Relation } from '@nozbe/watermelondb';\nimport { date, field, readonly, relation, text, writer } from '@nozbe/watermelondb/decorators';\nimport Product from './products';\nimport Store from './stores';\n\nexport default class Inventory extends Model {\n    static table = 'inventory';\n    static associations = {\n        products: { type: 'belongs_to' as const, key: 'product_id' },\n        stores: { type: 'belongs_to' as const, key: 'store_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('product_id') productId!: string;\n    @field('store_id') storeId!: string;\n    @field('quantity') quantity!: number;\n    @field('min_stock') minStock!: number;\n    @field('max_stock') maxStock!: number;\n    @field('price') price!: number;\n    @field('whole_sale_price') wholeSalePrice!: number;\n    @field('weighted_avg_cost') weightedAvgCost!: number;\n    @field('last_purchase_price') lastPurchasePrice!: number;\n    @text('location') location!: string;\n    @readonly @date('last_updated') lastUpdated!: Date;\n    @field('deleted') deleted!: boolean;\n\n    @relation('products', 'product_id') product!: Relation<Product>;\n    @relation('stores', 'store_id') store!: Relation<Store>;\n\n    @writer async adjustQuantity(delta: number) {\n        await this.update((i) => {\n            i.quantity = (i.quantity || 0) + delta;\n        });\n    }\n}\n","size_bytes":1367},"components/inventory/InventorySearchBar.tsx":{"content":"import React from 'react';\nimport { View, TextInput, TouchableOpacity } from 'react-native';\nimport { Feather } from '@expo/vector-icons';\n\ninterface InventorySearchBarProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  isSearchFocused: boolean;\n  onSearchFocus: () => void;\n  onSearchBlur: () => void;\n  onClear: () => void;\n}\n\nexport const InventorySearchBar: React.FC<InventorySearchBarProps> = ({\n  searchQuery,\n  onSearchChange,\n  isSearchFocused,\n  onSearchFocus,\n  onSearchBlur,\n  onClear\n}) => {\n  return (\n    <View className={\n      isSearchFocused || searchQuery.length > 0 \n        ? \"flex-1 flex-row items-center bg-gray-100 rounded-lg px-3 py-2\" \n        : \"flex-1 flex-row items-center bg-gray-100 rounded-lg px-3 py-2 mr-2\"\n    }>\n      <Feather name=\"search\" size={16} color=\"#9CA3AF\" />\n      <TextInput\n        className=\"flex-1 ml-2 text-gray-900\"\n        placeholder=\"Search\"\n        placeholderTextColor=\"#9CA3AF\"\n        value={searchQuery}\n        onChangeText={onSearchChange}\n        onFocus={onSearchFocus}\n        onBlur={onSearchBlur}\n      />\n      {isSearchFocused && (\n        <TouchableOpacity onPress={onClear}>\n          <Feather name=\"x\" size={16} color=\"#9CA3AF\" />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};","size_bytes":1283},"db/services/userService.ts":{"content":"import { AuthData, UserData } from '@/types';\nimport { Q } from '@nozbe/watermelondb';\nimport { Observable, firstValueFrom, of } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { database, userCollection } from '..';\nimport Session from '../models/sessions';\nimport User from '../models/users';\nimport {\n    activateSession,\n    activeSession$,\n    createSession,\n    deactivateUserSessions,\n    endCurrentSession,\n    storedSessionId$,\n} from './sessionsService';\n\nexport const currentUser$: Observable<User | null> = activeSession$.pipe(\n    switchMap((s) => {\n        if (!s?.userId) return of(null);\n        return userCollection.findAndObserve(s.userId).pipe(map((u) => u ?? null));\n    }),\n    distinctUntilChanged((a, b) => a?.id === b?.id),\n    shareReplay(1),\n);\n\nexport async function authenticateUser(data: AuthData): Promise<User | null> {\n    const user = await firstValueFrom(\n        userCollection\n            .query(Q.where('email', data.email.trim()))\n            .observe()\n            .pipe(map((users) => (users.length > 0 ? users[0] : null))),\n    );\n    if (!user?.id) {\n        throw new Error('User not found');\n    }\n\n    const existing = await database\n        .get<Session>('sessions')\n        .query(Q.where('user_id', user.id))\n        .fetch();\n\n    if (existing.length === 0) {\n        const s = await createSession(user.id);\n        if (s) return user;\n        return null;\n    }\n\n    if (!existing[0].isActive) {\n        await activateSession(existing[0].id);\n    } else {\n        storedSessionId$.next(existing[0].id);\n    }\n\n    return user;\n}\n\nexport async function logout(): Promise<void> {\n    const user = await firstValueFrom(currentUser$);\n    if (!user?.id) {\n        await endCurrentSession();\n        return;\n    }\n    await deactivateUserSessions(user.id);\n    await endCurrentSession();\n}\n\nexport async function createUser(userData: UserData): Promise<User> {\n    try {\n        const user = await database.write(async () => {\n            return await userCollection.create((u) => {\n                u.externalId = `usr_${Date.now()}_${Math.random().toString(36).slice(2)}`;\n                u.email = userData.email.trim();\n                u.name = userData.name.trim();\n                u.phone = userData.phone.trim();\n                u.passwordHash = userData.password?.trim() || '';\n                u.pinHash = userData.pin || '';\n                u.deleted = false;\n                u.isOwner = !!userData.isOwner;\n            });\n        });\n        await createSession(user.id);\n        return user;\n    } catch (e) {\n        throw Error(`error adding user ${e}`);\n    }\n}\n\nexport function observeUserById(id: string): Observable<User | null> {\n    return new Observable<User | null>((observer) => {\n        userCollection\n            .find(id)\n            .then((u) => {\n                if (u) {\n                    const sub = u.observe().subscribe(observer);\n                    return () => sub.unsubscribe();\n                } else {\n                    observer.next(null);\n                    observer.complete();\n                }\n            })\n            .catch((e) => observer.error(e));\n    }).pipe(shareReplay(1));\n}\n","size_bytes":3236},"components/common/Header.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\n\ninterface HeaderProps {\n  title: string;\n  children?: React.ReactNode;\n}\n\nexport const Header: React.FC<HeaderProps> = ({ title, children }) => {\n  return (\n    <View className=\"px-4 pt-4 pb-2\">\n      <Text className=\"text-2xl font-bold text-gray-900 mb-4\">\n        {title}\n      </Text>\n      {children}\n    </View>\n  );\n};","size_bytes":395},"components/hello-wave.tsx":{"content":"import Animated from 'react-native-reanimated';\n\nexport function HelloWave() {\n  return (\n    <Animated.Text\n      style={{\n        fontSize: 28,\n        lineHeight: 32,\n        marginTop: -6,\n        animationName: {\n          '50%': { transform: [{ rotate: '25deg' }] },\n        },\n        animationIterationCount: 4,\n        animationDuration: '300ms',\n      }}>\n      👋\n    </Animated.Text>\n  );\n}\n","size_bytes":405},"contexts/BusinessContext.tsx":{"content":"import type Business from '@/db/models/business';\nimport {\n    activeBusinesses$,\n    // initSelectedBiz,\n    selectedBusiness$,\n    selectBusiness as svcSelectBusiness,\n} from '@/db/services/businessService';\nimport {\n    activeStores$,\n    selectedStore$,\n    selectStore as svcSelectStore,\n} from '@/db/services/storeService';\nimport { currentUser$ } from '@/db/services/userService';\nimport type Store from '@/db/models/stores';\nimport React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\n// Broadcasts business change events so dependent services can reset caches.\nexport type BusinessChangedPayload = {\n    businessId: string | null;\n    storeId: string | null;\n    reason?: string;\n};\nexport const businessChanged$ = new BehaviorSubject<BusinessChangedPayload | null>(null);\n\nexport type BusinessContextValue = {\n    selectedBusiness: Business | null;\n    selectedStore: Store | null;\n    businesses: Business[];\n    stores: Store[];\n    isLoading: boolean;\n    selectBusiness: (id: string | null) => void;\n    selectStore: (id: string | null) => void;\n    refresh: () => Promise<void>;\n};\n\nconst BusinessContext = createContext<BusinessContextValue | undefined>(undefined);\n\nexport const BusinessProvider: React.FC<React.PropsWithChildren> = ({ children }) => {\n    const [selectedBusiness, setSelectedBusiness] = useState<Business | null>(null);\n    const [selectedStore, setSelectedStore] = useState<Store | null>(null);\n    const [businesses, setBusinesses] = useState<Business[]>([]);\n    const [stores, setStores] = useState<Store[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // initSelectedBiz(currentUser$.);\n        const subs: Subscription[] = [];\n\n        // react to the selected business observable\n        subs.push(selectedBusiness$.subscribe((b) => setSelectedBusiness(b)));\n\n        // react to the selected store observable\n        subs.push(selectedStore$.subscribe((s) => setSelectedStore(s)));\n\n        // update list of businesses for the UI\n        subs.push(\n            activeBusinesses$.subscribe((list) => {\n                setBusinesses(list);\n                setIsLoading(false);\n            }),\n        );\n\n        // update list of active stores (flat list across all businesses)\n        subs.push(activeStores$.subscribe((list) => setStores(list)));\n\n        // subscribe to currentUser$ and apply default selection policy\n        subs.push(\n            currentUser$.subscribe(async (user) => {\n                console.log('AuthContext user changed:', user?.ownerActiveBusinesses.fetch());\n                // when user logs out, clear selection\n                if (!user) {\n                    svcSelectBusiness(null);\n                    svcSelectStore(null);\n                    businessChanged$.next({\n                        businessId: null,\n                        storeId: null,\n                        reason: 'logout',\n                    });\n                    return;\n                }\n\n                // user logged in: try to pick a default business\n                // Strategy: prefer businesses owned by the user, else any active business\n                try {\n                    // initSelectedBiz(user.externalId);\n                    const owned = await user.ownedBusinesses.fetch();\n\n                    owned.forEach((biz) =>\n                        console.log(`owned business ${biz.id}  name:${biz.name}`),\n                    );\n\n                    const visible = businesses.filter((b) => !b.deleted);\n\n                    let pickBusiness: Business | null = null;\n                    if (owned && owned.length > 0) pickBusiness = owned[0];\n                    else if (visible && visible.length > 0) pickBusiness = visible[0];\n\n                    if (pickBusiness) {\n                        svcSelectBusiness(pickBusiness.id);\n                        // pick the first active store for the business if available\n                        const activeStoresForBiz = await pickBusiness.activeStores.fetch();\n                        const storePick =\n                            activeStoresForBiz && activeStoresForBiz.length > 0\n                                ? activeStoresForBiz[0]\n                                : null;\n                        svcSelectStore(storePick ? storePick.id : null);\n                        businessChanged$.next({\n                            businessId: pickBusiness.id,\n                            storeId: storePick ? storePick.id : null,\n                            reason: 'login-or-user-change',\n                        });\n                    } else {\n                        // no business available for this user\n                        svcSelectBusiness(null);\n                        svcSelectStore(null);\n                        businessChanged$.next({\n                            businessId: null,\n                            storeId: null,\n                            reason: 'no-business-available',\n                        });\n                    }\n                } catch (e) {\n                    console.log('BusinessContext user subscription error', e);\n                }\n            }),\n        );\n\n        return () => subs.forEach((s) => s.unsubscribe());\n    }, [businesses]);\n    useEffect(() => {\n        console.log(`the selected business ${selectedBusiness?.name} id:${selectedBusiness?.id}`);\n        console.log(`the selected store ${selectedStore} id: ${selectedStore?.id}`);\n    }, []);\n    const selectBusiness = (id: string | null) => {\n        svcSelectBusiness(id);\n        // businessService will update selectedBusiness$ which we subscribe to above\n    };\n\n    const selectStore = (id: string | null) => {\n        svcSelectStore(id);\n    };\n\n    const refresh = useCallback(async () => {\n        // placeholder allowing consumers to trigger a refresh. We can expand later.\n        // For now this is a noop that preserves the API.\n        setIsLoading(true);\n        setIsLoading(false);\n    }, []);\n\n    const value = useMemo(\n        () => ({\n            selectedBusiness,\n            selectedStore,\n            businesses,\n            stores,\n            isLoading,\n            selectBusiness,\n            selectStore,\n            refresh,\n        }),\n        [selectedBusiness, selectedStore, businesses, stores, isLoading, refresh],\n    );\n\n    return <BusinessContext.Provider value={value}>{children}</BusinessContext.Provider>;\n};\n\nexport const useBusiness = (): BusinessContextValue => {\n    const ctx = useContext(BusinessContext);\n    if (!ctx) throw new Error('useBusiness must be used within BusinessProvider');\n    return ctx;\n};\n\nexport default BusinessContext;\n","size_bytes":6756},"eslint.config.js":{"content":"// https://docs.expo.dev/guides/using-eslint/\nconst { defineConfig } = require('eslint/config');\nconst expoConfig = require('eslint-config-expo/flat');\nconst eslintPluginPrettierRecommended = require('eslint-plugin-prettier/recommended');\n\nmodule.exports = defineConfig([\n  expoConfig,\n  eslintPluginPrettierRecommended,\n  {\n    ignores: ['dist/*'],\n  },\n]);\n","size_bytes":359},"components/StoreSwitcher.tsx":{"content":"import { useBusiness } from '@/contexts/BusinessContext';\nimport React from 'react';\nimport { FlatList, Text, TouchableOpacity, View } from 'react-native';\n\nconst StoreSwitcher: React.FC = () => {\n    const { stores, selectedStore, selectStore } = useBusiness();\n\n    if (!stores || stores.length === 0) {\n        return (\n            <View>\n                <Text className='text-gray-500'>No stores available</Text>\n            </View>\n        );\n    }\n\n    return (\n        <View>\n            <Text className='text-lg font-semibold mb-2'>Active Stores</Text>\n            <FlatList\n                data={stores}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => {\n                    const isSelected = selectedStore?.id === item.id;\n                    return (\n                        <TouchableOpacity\n                            className={`p-3 rounded-lg mb-2 ${isSelected ? 'bg-blue-50' : 'bg-white'}`}\n                            onPress={() => selectStore(item.id)}>\n                            <Text\n                                className={`text-sm ${isSelected ? 'text-blue-600 font-semibold' : 'text-gray-800'}`}>\n                                {item.displayName}\n                            </Text>\n                            {item.address ? (\n                                <Text className='text-xs text-gray-500'>{item.address}</Text>\n                            ) : null}\n                        </TouchableOpacity>\n                    );\n                }}\n            />\n        </View>\n    );\n};\n\nexport default StoreSwitcher;\n","size_bytes":1593},"components/auth/BusinessInfoForm.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { BusinessStoreData } from '@/types';\n\ninterface BusinessInfoFormProps {\n  onBack: () => void;\n  onCreateAccount: (businessStoreData: BusinessStoreData) => void;\n}\n\nexport function BusinessInfoForm({ onBack, onCreateAccount }: BusinessInfoFormProps) {\n  const [formData, setFormData] = useState<BusinessStoreData>({\n    businessName: 'test Business',\n    storeName: 'best prices',\n    storeAddress: '123 Main Street, Nairobi',\n    storePhone: '+254712345678',\n    storeEmail: 'store@freshmart.com',\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleCreateAccount = () => {\n    // Validate form data\n    if (!formData.businessName || !formData.storeName || !formData.storeAddress) {\n      // Handle validation error\n      return;\n    }\n    onCreateAccount(formData);\n  };\n\n  return (\n    <View>\n      {/* Business Information Section */}\n      <View className=\"mb-6\">\n        <View className=\"flex-row items-center mb-4\">\n          <Ionicons name=\"business-outline\" size={20} color=\"#374151\" />\n          <Text className=\"text-lg font-semibold text-gray-900 ml-2\">Business Information</Text>\n        </View>\n        \n        <View className=\"mb-4\">\n          <Text className=\"text-sm font-medium text-gray-900 mb-2\">Business Name</Text>\n          <TextInput\n            className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n            placeholder=\"e.g., FreshMart Group\"\n            value={formData.businessName}\n            onChangeText={(value) => handleInputChange('businessName', value)}\n          />\n        </View>\n      </View>\n\n      {/* First Store Information Section */}\n      <View className=\"mb-6\">\n        <View className=\"flex-row items-center mb-4\">\n          <Ionicons name=\"location-outline\" size={20} color=\"#374151\" />\n          <Text className=\"text-lg font-semibold text-gray-900 ml-2\">First Store Information</Text>\n        </View>\n        \n        <View className=\"mb-4\">\n          <Text className=\"text-sm font-medium text-gray-900 mb-2\">Store Name</Text>\n          <TextInput\n            className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n            placeholder=\"e.g., FreshMart Downtown\"\n            value={formData.storeName}\n            onChangeText={(value) => handleInputChange('storeName', value)}\n          />\n        </View>\n\n        <View className=\"mb-4\">\n          <Text className=\"text-sm font-medium text-gray-900 mb-2\">Store Address</Text>\n          <TextInput\n            className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n            placeholder=\"Enter store address\"\n            value={formData.storeAddress}\n            onChangeText={(value) => handleInputChange('storeAddress', value)}\n          />\n        </View>\n\n        <View className=\"mb-4\">\n          <Text className=\"text-sm font-medium text-gray-900 mb-2\">Store Phone (Optional)</Text>\n          <TextInput\n            className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n            placeholder=\"Enter store phone\"\n            value={formData.storePhone}\n            onChangeText={(value) => handleInputChange('storePhone', value)}\n            keyboardType=\"phone-pad\"\n          />\n        </View>\n\n        <View className=\"mb-6\">\n          <Text className=\"text-sm font-medium text-gray-900 mb-2\">Store Email (Optional)</Text>\n          <TextInput\n            className=\"bg-gray-100 rounded-lg px-4 py-3 text-gray-900\"\n            placeholder=\"Enter store email\"\n            value={formData.storeEmail}\n            onChangeText={(value) => handleInputChange('storeEmail', value)}\n            keyboardType=\"email-address\"\n            autoCapitalize=\"none\"\n          />\n        </View>\n      </View>\n\n      {/* Action Buttons */}\n      <View className=\"flex-row space-x-3\">\n        <TouchableOpacity\n          className=\"flex-1 bg-white border border-gray-300 rounded-lg py-4\"\n          onPress={onBack}\n        >\n          <Text className=\"text-gray-900 text-center font-semibold text-base\">\n            Back\n          </Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          className=\"flex-1 bg-gray-900 rounded-lg py-4\"\n          onPress={handleCreateAccount}\n        >\n          <Text className=\"text-white text-center font-semibold text-base\">\n            Create Account\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n","size_bytes":4576},"components/account/stats/OverviewTab.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport {\n    DollarSign,\n    TrendingUp,\n    Receipt,\n    BarChart3,\n    CreditCard,\n    ChevronDown,\n} from 'lucide-react-native';\nimport { StatsCard } from './StatsCard';\nimport { TodayStats } from '@/types';\n\ninterface OverviewTabProps {\n    stats: TodayStats;\n    selectedPeriod: string;\n    onPeriodChange: () => void;\n}\n\nexport const OverviewTab: React.FC<OverviewTabProps> = ({\n    stats,\n    selectedPeriod,\n    onPeriodChange,\n}) => {\n    return (\n        <>\n            {/* Today's Sales Header */}\n            <View className='mb-4 flex-row justify-between items-center'>\n                <View className='flex-row items-center'>\n                    <DollarSign size={20} color='#374151' />\n                    <Text className='ml-2 font-semibold text-gray-900'>Today&apos;s Sales</Text>\n                </View>\n                <TouchableOpacity\n                    onPress={onPeriodChange}\n                    className='flex-row items-center bg-gray-100 rounded-lg px-3 py-2'>\n                    <Text className='text-sm text-gray-700 mr-1'>{selectedPeriod}</Text>\n                    <ChevronDown size={16} color='#374151' />\n                </TouchableOpacity>\n            </View>\n\n            {/* Sales Cards */}\n            <View className='flex-row mb-4 gap-2'>\n                <StatsCard\n                    icon={TrendingUp}\n                    iconColor='#10B981'\n                    label='Revenue'\n                    value={`$${stats.revenue.toFixed(2)}`}\n                    bgColor='bg-gray-100'\n                />\n                <StatsCard\n                    icon={Receipt}\n                    iconColor='#3B82F6'\n                    label='Orders'\n                    value={stats.orders}\n                    bgColor='bg-blue-50'\n                />\n            </View>\n\n            <View className='flex-row mb-4 gap-2'>\n                <StatsCard\n                    icon={BarChart3}\n                    iconColor='#10B981'\n                    label='Profit'\n                    value={`$${stats.profit.toFixed(2)}`}\n                    valueColor='text-green-600'\n                    bgColor='bg-green-50'\n                />\n                <StatsCard\n                    icon={CreditCard}\n                    iconColor='#F97316'\n                    label='Net Credit'\n                    value={`$${stats.netCredit.toFixed(2)}`}\n                    valueColor='text-orange-600'\n                    bgColor='bg-orange-50'\n                />\n            </View>\n        </>\n    );\n};\n","size_bytes":2603},"scripts/reset-project.js":{"content":"#!/usr/bin/env node\n\n/**\n * This script is used to reset the project to a blank state.\n * It deletes or moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example based on user input and creates a new /app directory with an index.tsx and _layout.tsx file.\n * You can remove the `reset-project` script from package.json and safely delete this file after running it.\n */\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst readline = require(\"readline\");\n\nconst root = process.cwd();\nconst oldDirs = [\"app\", \"components\", \"hooks\", \"constants\", \"scripts\"];\nconst exampleDir = \"app-example\";\nconst newAppDir = \"app\";\nconst exampleDirPath = path.join(root, exampleDir);\n\nconst indexContent = `import { Text, View } from \"react-native\";\n\nexport default function Index() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Text>Edit app/index.tsx to edit this screen.</Text>\n    </View>\n  );\n}\n`;\n\nconst layoutContent = `import { Stack } from \"expo-router\";\n\nexport default function RootLayout() {\n  return <Stack />;\n}\n`;\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nconst moveDirectories = async (userInput) => {\n  try {\n    if (userInput === \"y\") {\n      // Create the app-example directory\n      await fs.promises.mkdir(exampleDirPath, { recursive: true });\n      console.log(`📁 /${exampleDir} directory created.`);\n    }\n\n    // Move old directories to new app-example directory or delete them\n    for (const dir of oldDirs) {\n      const oldDirPath = path.join(root, dir);\n      if (fs.existsSync(oldDirPath)) {\n        if (userInput === \"y\") {\n          const newDirPath = path.join(root, exampleDir, dir);\n          await fs.promises.rename(oldDirPath, newDirPath);\n          console.log(`➡️ /${dir} moved to /${exampleDir}/${dir}.`);\n        } else {\n          await fs.promises.rm(oldDirPath, { recursive: true, force: true });\n          console.log(`❌ /${dir} deleted.`);\n        }\n      } else {\n        console.log(`➡️ /${dir} does not exist, skipping.`);\n      }\n    }\n\n    // Create new /app directory\n    const newAppDirPath = path.join(root, newAppDir);\n    await fs.promises.mkdir(newAppDirPath, { recursive: true });\n    console.log(\"\\n📁 New /app directory created.\");\n\n    // Create index.tsx\n    const indexPath = path.join(newAppDirPath, \"index.tsx\");\n    await fs.promises.writeFile(indexPath, indexContent);\n    console.log(\"📄 app/index.tsx created.\");\n\n    // Create _layout.tsx\n    const layoutPath = path.join(newAppDirPath, \"_layout.tsx\");\n    await fs.promises.writeFile(layoutPath, layoutContent);\n    console.log(\"📄 app/_layout.tsx created.\");\n\n    console.log(\"\\n✅ Project reset complete. Next steps:\");\n    console.log(\n      `1. Run \\`npx expo start\\` to start a development server.\\n2. Edit app/index.tsx to edit the main screen.${\n        userInput === \"y\"\n          ? `\\n3. Delete the /${exampleDir} directory when you're done referencing it.`\n          : \"\"\n      }`\n    );\n  } catch (error) {\n    console.error(`❌ Error during script execution: ${error.message}`);\n  }\n};\n\nrl.question(\n  \"Do you want to move existing files to /app-example instead of deleting them? (Y/n): \",\n  (answer) => {\n    const userInput = answer.trim().toLowerCase() || \"y\";\n    if (userInput === \"y\" || userInput === \"n\") {\n      moveDirectories(userInput).finally(() => rl.close());\n    } else {\n      console.log(\"❌ Invalid input. Please enter 'Y' or 'N'.\");\n      rl.close();\n    }\n  }\n);\n","size_bytes":3608},"components/inventory/category/ProductItem.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Feather } from '@expo/vector-icons';\n\ninterface ProductData {\n  id: string;\n  name: string;\n  brand: string;\n  code: string;\n  price: number;\n  quantity: number;\n  unit: string;\n  isLowStock: boolean;\n  isOut: boolean;\n  quantityText: string;\n}\n\ninterface ProductItemProps {\n  item: ProductData;\n  onEdit: (item: ProductData) => void;\n}\n\nexport const ProductItem: React.FC<ProductItemProps> = ({ item, onEdit }) => {\n  const getBorderClass = () => {\n    if (item.isLowStock) return 'border-2 border-orange-400';\n    if (item.isOut) return 'border border-red-300';\n    return 'border border-gray-100';\n  };\n\n  return (\n    <View className={`bg-white rounded-lg mx-4 mb-2 px-4 py-3 ${getBorderClass()}`}>\n      <View className=\"flex-row justify-between items-center\">\n        <View className=\"flex-1\">\n          <View className=\"flex-row items-center mb-1\">\n            <Text className=\"text-base font-medium text-gray-900\">\n              {item.name}\n            </Text>\n            {item.isLowStock && (\n              <View className=\"bg-orange-500 px-2 py-0.5 rounded ml-2\">\n                <Text className=\"text-white text-xs font-semibold\">Low Stock</Text>\n              </View>\n            )}\n            {item.isOut && (\n              <View className=\"bg-red-500 px-2 py-0.5 rounded ml-2\">\n                <Text className=\"text-white text-xs font-semibold\">Out of Stock</Text>\n              </View>\n            )}\n          </View>\n          <Text className=\"text-gray-600 text-sm\">\n            {item.brand} | {item.code} | ${item.price.toFixed(2)} | {item.unit}\n          </Text>\n        </View>\n        <View className=\"items-end mr-3 flex-row items-center\">\n          <Text className={`text-xs font-bold mr-1 ${\n            item.isLowStock ? 'text-orange-500' : 'text-gray-600'\n          }`}>\n            {item.quantity}\n          </Text>\n          <Text className={`text-xs ${\n            item.isLowStock ? 'text-orange-500 font-medium' : 'text-gray-600'\n          }`}>\n            {item.quantityText}\n          </Text>\n        </View>\n        <TouchableOpacity \n          className=\"w-6 h-6 bg-gray-100 rounded items-center justify-center\"\n          onPress={() => onEdit(item)}\n        >\n          <Feather name=\"edit\" size={14} color=\"#6B7280\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};","size_bytes":2416},"components/credit/transaction/TransactionItem.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Receipt, DollarSign } from 'lucide-react-native';\n\ninterface Transaction {\n\tid: string;\n\ttype: 'Purchase' | 'Payment';\n\tdate: string;\n\tamount: number;\n}\n\ninterface TransactionItemProps {\n\ttransaction: Transaction;\n\tonPress: (transaction: Transaction) => void;\n}\n\nexport const TransactionItem: React.FC<TransactionItemProps> = ({ transaction, onPress }) => {\n\treturn (\n\t\t<TouchableOpacity\n\t\t\tclassName='bg-white rounded-lg p-4 mb-2 flex-row items-center shadow-sm active:bg-gray-50'\n\t\t\tonPress={() => onPress(transaction)}>\n\t\t\t<View className='w-10 h-10 bg-gray-100 rounded-full items-center justify-center mr-3'>\n\t\t\t\t{transaction.type === 'Purchase' ? (\n\t\t\t\t\t<Receipt size={20} color='#666' />\n\t\t\t\t) : (\n\t\t\t\t\t<DollarSign size={20} color='#666' />\n\t\t\t\t)}\n\t\t\t</View>\n\t\t\t<View className='flex-1'>\n\t\t\t\t<View\n\t\t\t\t\tclassName={`self-start px-2 py-1 rounded ${\n\t\t\t\t\t\ttransaction.type === 'Purchase' ? 'bg-red-500' : 'bg-gray-800'\n\t\t\t\t\t}`}>\n\t\t\t\t\t<Text className='text-white text-xs font-medium'>{transaction.type}</Text>\n\t\t\t\t</View>\n\t\t\t\t<Text className='text-sm text-gray-500 mt-1'>{transaction.date}</Text>\n\t\t\t</View>\n\t\t\t<Text\n\t\t\t\tclassName={`text-lg font-semibold ${\n\t\t\t\t\ttransaction.amount < 0 ? 'text-red-600' : 'text-green-600'\n\t\t\t\t}`}>\n\t\t\t\t{transaction.amount < 0 ? '-' : '+'}${Math.abs(transaction.amount).toFixed(2)}\n\t\t\t</Text>\n\t\t</TouchableOpacity>\n\t);\n};\n","size_bytes":1453},"constants/account.ts":{"content":"import { Business, Store, StoreData, TodayStats, UserProfileData } from '@/types';\n\n// Default mock data if not provided\nexport const stats: TodayStats = {\n    revenue: 0.0,\n    orders: 0,\n    profit: 0.0,\n    netCredit: 0.0,\n};\n\nexport const store: Store = {\n    id: '1',\n    name: 'FreshMart Downtown',\n    businessId: 'FreshMart Group',\n};\n\nexport const business: Business = {\n    externalId: '1',\n    name: 'FreshMart Downtown',\n    businessType: 'FreshMart Group',\n};\n\n// TODO: Fetch user data using externalId\n// For now, using placeholder data\nexport const userData: UserProfileData = {\n    firstName: 'Amara',\n    lastName: 'Ochieng',\n    role: 'Store Manager',\n    email: 'amara.ochieng@amarasduka.com',\n    phone: '+254 701 234 567',\n    emergencyContact: '+254 722 345 678',\n    joinDate: 'March 15, 2019',\n    permissions: ['Sales', 'Inventory', 'User Management', 'Reports'],\n};\n\nexport const initialStoreData: StoreData = {\n    name: \"Amara's Duka\",\n    type: 'Convenience Store',\n    establishedYear: '2019',\n    phone: '+254 712 345 678',\n    email: 'info@amarasduka.com',\n    address: '123 Kenyatta Avenue, Nairobi 00100, Kenya',\n    description:\n        'Your friendly neighborhood convenience store offering fresh products and everyday essentials. We pride ourselves on quality service and community support.',\n    businessHours: {\n        weekdays: 'Monday - Saturday: 7:00 AM - 8:00 PM',\n        weekend: 'Sunday: 8:00 AM - 6:00 PM',\n    },\n    taxId: 'P051234567M',\n};\n","size_bytes":1491},"db/models/sessions.ts":{"content":"import { Model, Q, Relation } from '@nozbe/watermelondb';\nimport { date, field, reader, readonly, relation, writer } from '@nozbe/watermelondb/decorators';\n// avoid importing database at module top-level to prevent require cycles\n// import { database } from '..';\nimport type User from './users';\n\nexport default class Session extends Model {\n    static table = 'sessions';\n    static associations = {\n        users: { type: 'belongs_to' as const, key: 'user_id' },\n    };\n    @field('session_id') sessionId!: string;\n    @field('user_id') userId!: string;\n    @readonly @date('created_at') createdAt!: Date;\n    @field('is_active') isActive!: boolean;\n\n    // Relations\n    @relation('users', 'user_id') user!: Relation<User>;\n\n    // Computed properties\n    get isExpired(): boolean {\n        const expirationTime = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n        return !this.isActive || Date.now() - this.createdAt.getTime() > expirationTime;\n    }\n\n    // Query helpers\n    @reader static async findBySessionId(sessionId: string) {\n        const { database } = await import('..');\n        const sessions = await database\n            .get<Session>('sessions')\n            .query(Q.where('session_id', sessionId))\n            .fetch();\n        return sessions[0] || null;\n    }\n\n    // Writers\n    @writer async deactivate() {\n        await this.update((session) => {\n            session.isActive = false;\n        });\n    }\n}\n","size_bytes":1438},"hooks/use-color-scheme.ts":{"content":"export { useColorScheme } from 'react-native';\n","size_bytes":47},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./app/**/*.{js,ts,tsx}', './components/**/*.{js,ts,tsx}'],\n\n  presets: [require('nativewind/preset')],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n","size_bytes":229},"app/_layout.tsx":{"content":"import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';\nimport { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport 'react-native-reanimated';\nimport '../global.css';\n\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { useColorScheme } from '@/hooks/use-color-scheme';\n\nimport DatabaseProvider from '@nozbe/watermelondb/react/DatabaseProvider';\nimport { BusinessProvider } from '@/contexts/BusinessContext';\nimport { database } from '@/db';\n\nexport default function RootLayout() {\n    const colorScheme = useColorScheme();\n\n    return (\n        <DatabaseProvider database={database}>\n            <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n                <BusinessProvider>\n                    <AuthProvider>\n                        <Stack screenOptions={{ headerShown: false }}>\n                            <Stack.Screen name='index' />\n                            <Stack.Screen name='(tabs)' />\n                            <Stack.Screen name='auth' />\n                        </Stack>\n                    </AuthProvider>\n                </BusinessProvider>\n                <StatusBar style='auto' />\n            </ThemeProvider>\n        </DatabaseProvider>\n    );\n}\n","size_bytes":1268},"components/credit/CreditRatingFilter.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { CreditRatingBadge } from './CreditRatingBadge';\n\ninterface CreditRatingFilterProps {\n\tonClose: () => void;\n}\n\nexport const CreditRatingFilter: React.FC<CreditRatingFilterProps> = ({ onClose }) => {\n\treturn (\n\t\t<View className='flex-row items-center mb-4'>\n\t\t\t<View className='flex-row items-center bg-blue-50 rounded-lg px-3 py-2 mr-2'>\n\t\t\t\t<Text className='text-blue-600 text-sm mr-1'>Customer credit rating</Text>\n\t\t\t\t<Ionicons name='information-circle-outline' size={16} color='#2563eb' />\n\t\t\t</View>\n\t\t\t<CreditRatingBadge rating='Good' />\n\t\t\t<View className='ml-1'>\n\t\t\t\t<CreditRatingBadge rating='Medium' />\n\t\t\t</View>\n\t\t\t<View className='ml-1'>\n\t\t\t\t<CreditRatingBadge rating='Low' />\n\t\t\t</View>\n\t\t\t<TouchableOpacity className='ml-2' onPress={onClose}>\n\t\t\t\t<Ionicons name='close-circle-outline' size={20} color='#666' />\n\t\t\t</TouchableOpacity>\n\t\t</View>\n\t);\n};\n","size_bytes":1009},"components/inventory/category/CategoriesGrid.tsx":{"content":"import React from 'react';\nimport { View } from 'react-native';\nimport { CategoryChip } from './CategoryChip';\nimport { Category } from '@/types';\n\ninterface CategoriesGridProps {\n    categories: Category[];\n    selectedCategory: string;\n    onCategoryPress: (category: Category) => void;\n}\n\nexport const CategoriesGrid: React.FC<CategoriesGridProps> = ({\n    categories,\n    selectedCategory,\n    onCategoryPress,\n}) => {\n    return (\n        <View className='flex-row flex-wrap'>\n            {categories.map((category) => (\n                <CategoryChip\n                    key={category.name}\n                    category={category}\n                    isSelected={selectedCategory === category.name}\n                    onPress={() => onCategoryPress(category)}\n                />\n            ))}\n        </View>\n    );\n};\n","size_bytes":827},"components/account/profile/BasicInfoCard.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { ProfileAvatar } from './ProfileAvatar';\n\ninterface BasicInfoCardProps {\n    firstName: string;\n    lastName: string;\n    role: string;\n    isEditing: boolean;\n    onFirstNameChange: (text: string) => void;\n    onLastNameChange: (text: string) => void;\n    onRoleChange: (text: string) => void;\n}\n\nexport const BasicInfoCard: React.FC<BasicInfoCardProps> = ({\n    firstName,\n    lastName,\n    role,\n    isEditing,\n    onFirstNameChange,\n    onLastNameChange,\n    onRoleChange,\n}) => {\n    const userInitials = `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <View className='items-center mb-4'>\n                <ProfileAvatar initials={userInitials} size='md' />\n            </View>\n\n            {/* First and Last Name */}\n            <View className='flex-row gap-3 mb-3'>\n                <View className='flex-1'>\n                    <Text className='text-sm text-gray-600 font-medium mb-2'>First Name</Text>\n                    {isEditing ? (\n                        <TextInput\n                            value={firstName}\n                            onChangeText={onFirstNameChange}\n                            className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                        />\n                    ) : (\n                        <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                            <Text className='text-gray-900 font-semibold'>{firstName}</Text>\n                        </View>\n                    )}\n                </View>\n                <View className='flex-1'>\n                    <Text className='text-sm text-gray-600 font-medium mb-2'>Last Name</Text>\n                    {isEditing ? (\n                        <TextInput\n                            value={lastName}\n                            onChangeText={onLastNameChange}\n                            className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                        />\n                    ) : (\n                        <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                            <Text className='text-gray-900 font-semibold'>{lastName}</Text>\n                        </View>\n                    )}\n                </View>\n            </View>\n\n            {/* Role */}\n            <View>\n                <Text className='text-sm text-gray-600 font-medium mb-2'>Role</Text>\n                {isEditing ? (\n                    <TextInput\n                        value={role}\n                        onChangeText={onRoleChange}\n                        className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                    />\n                ) : (\n                    <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                        <Text className='text-gray-900'>{role}</Text>\n                    </View>\n                )}\n            </View>\n        </View>\n    );\n};\n","size_bytes":3028},"components/account/store/StoreAvatar.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\n\ninterface StoreAvatarProps {\n    storeName: string;\n    size?: 'sm' | 'md' | 'lg';\n}\n\nexport const StoreAvatar: React.FC<StoreAvatarProps> = ({ storeName, size = 'md' }) => {\n    const sizeConfig = {\n        sm: 'w-12 h-12 text-lg',\n        md: 'w-16 h-16 text-2xl',\n        lg: 'w-24 h-24 text-4xl',\n    };\n\n    const storeInitials =\n        storeName\n            .split(' ')\n            .map((n) => n[0])\n            .join('')\n            .toUpperCase()\n            .slice(0, 2) || 'AD';\n\n    return (\n        <View\n            className={`${sizeConfig[size]} rounded-full bg-gray-200 items-center justify-center`}>\n            <Text className={`${sizeConfig[size].split(' ')[2]} font-semibold text-gray-700`}>\n                {storeInitials}\n            </Text>\n        </View>\n    );\n};\n","size_bytes":862},"components/auth/AuthHeader.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface AuthHeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nexport function AuthHeader({ title, subtitle }: AuthHeaderProps) {\n  return (\n    <View className=\"items-center pt-16 pb-8\">\n      <View className=\"w-16 h-16 bg-gray-900 rounded-full items-center justify-center mb-4\">\n        <Ionicons name=\"storefront-outline\" size={32} color=\"white\" />\n      </View>\n      <Text className=\"text-3xl font-bold text-gray-900 mb-2\">{title}</Text>\n      <Text className=\"text-base text-gray-600\">{subtitle}</Text>\n    </View>\n  );\n}\n","size_bytes":651},"types/index.ts":{"content":"export type Screen = 'main' | 'checkout-category' | 'checkout' | 'inventory' | 'inventory-category'; //- suggesting a better approach\n\n// Type definitions\nexport interface CartItem {\n    id: string;\n    name: string;\n    price: number;\n    quantity: number;\n}\n\nexport interface PaymentMethod {\n    id: string;\n    name: string;\n    description: string;\n    icon: any;\n    color: string;\n    bgColor: string;\n}\n\n// Type definitions\nexport interface CategoryItem {\n    id: string;\n    name: string;\n    count: number;\n    icon: string;\n    color: string;\n}\n\n// Compatibility alias for components that import `Category` from '@/types'\nexport interface Category extends CategoryItem {\n    externalId?: string;\n    businessId?: string;\n    createdAt?: number;\n    deleted?: boolean;\n}\n\nexport interface StoreData {\n    name: string;\n    type: string;\n    phone: string;\n    email: string;\n    address: string;\n    description: string;\n    businessName?: string;\n    storeName?: string;\n    storeAddress?: string;\n    storePhone?: string;\n    storeEmail?: string;\n    taxId?: string;\n    establishedYear?: string;\n    currency?: string;\n    timezone?: string;\n    logoUrl?: string;\n    receiptFooter?: string;\n    businessType?: string;\n    businessId?: string;\n    storeId?: string;\n    businessHours?: {\n        weekdays: string;\n        weekend: string;\n    };\n}\n\nexport interface Store {\n    id?: string;\n    businessId?: string;\n    name?: string;\n    address?: string;\n    phone?: string;\n    email?: string;\n    managerId?: string;\n    status?: string;\n    currency?: string;\n    createdAt?: number;\n    updatedAt?: number;\n    deleted?: boolean;\n}\n\n// Type definitions\nexport interface CategoryData {\n    name: string;\n    icon: string;\n    color: string;\n}\n\nexport interface QuickItem {\n    name: string;\n    price: string;\n}\n\n// ???????\nexport interface Product {\n    // Core identification\n    id: string;\n    name: string;\n    brand?: string;\n    code?: string; // SKU/barcode\n    category: string;\n    type?: string; // Product type/subcategory\n    price: number;\n    quantity?: number;\n    stock?: number; // Alias for quantity (for backward compatibility)\n    unit: string; // 'pcs', 'kg', 'ltr', etc.\n    lowStockThreshold?: number; // When to show low stock warning\n    isLowStock?: boolean;\n    isOut?: boolean;\n    isOrdered?: boolean;\n    quantityText?: string; // \"5 pcs\", \"2.5 kg\", etc.\n    size?: string; // \"500ml\", \"1kg\", etc. - for display\n    inCart?: number;\n    description?: string;\n    createdAt?: number;\n    updatedAt?: number;\n    minimumAlert?: number;\n    purchasePrice?: number;\n}\n\nexport interface SizeConfig {\n    padding: string;\n    iconSize: number;\n    textSize: string;\n    minWidth?: string;\n    height?: string;\n}\n\nexport interface VariantConfig {\n    bg: string;\n    bgDisabled: string;\n    textColor: string;\n    textColorDisabled: string;\n    iconColor: string;\n    iconColorDisabled: string;\n    borderColor?: string;\n}\n\nexport interface AnimationConfig {\n    scale: number;\n    tension: number;\n    friction: number;\n}\n\nexport type CreditRating = 'Low' | 'Medium' | 'Good';\n\nexport interface Customer {\n    id: string;\n    firstName: string;\n    lastName: string;\n    amount: number;\n    phoneNumber: string;\n    dueDate: string;\n    rating: CreditRating;\n    daysLeft: number;\n}\n\nexport type FilterState = {\n    Low: 'Low';\n    Out: 'Out';\n    All?: 'All';\n    Ordered?: 'Ordered';\n};\n\nexport interface ProductData {\n    categoryId: string;\n    name: string;\n    cost: string;\n    barcode: string;\n    description: string;\n    unit: string;\n    minStock: number;\n    maxStock: number;\n    price: number;\n    location: string;\n    initialQuantity: number;\n}\nexport interface InventoryItemData {\n    // poductId: string;\n    // storeId: string;\n    quantity: number;\n    minStock: number;\n    maxStock: number;\n    price: number;\n    wholeSalePrice: number;\n    weightedAvgCost: number;\n    lastPurchasePrice: number;\n    location: string;\n}\n\n// Combined view type used by inventory lists (product + inventory fields)\nexport interface InventoryViewItem {\n    id: string; // inventory id\n    productId: string;\n    name: string;\n    category: string;\n    categoryId: string;\n    categoryIcon?: string;\n    categoryColor?: string;\n    quantity: number;\n    minStock: number;\n    maxStock: number;\n    price: number;\n    cost?: number;\n    unit: string;\n    barcode?: string;\n    location?: string;\n    lastUpdated?: Date;\n}\n\nexport interface UserData {\n    externalId?: string; // Now optional - will be generated if not provided\n    email: string;\n    name: string;\n    phone: string;\n    password: string;\n    pin?: string;\n    isOwner?: boolean;\n}\nexport interface AuthData {\n    email: string;\n    password?: string;\n    pin?: string;\n}\n\nexport interface BusinessStoreData {\n    businessName: string;\n    storeName: string;\n    storeAddress?: string;\n    storePhone?: string;\n    storeEmail?: string;\n}\n\nexport interface Business {\n    externalId?: string;\n    name: string;\n    businessType?: string;\n    ownerId: string;\n    createdAt: number;\n    updatedAt: number;\n    deleted?: boolean;\n}\n\nexport type PaymentMethodType = 'Cash' | 'M-Pesa' | 'Bank Transfer' | 'Card';\n\n// this will be worked on - idealy use the same type\n\nexport interface User {\n    externalId: string;\n    name: string;\n    email: string;\n    role?: string;\n}\n\nexport interface UserProfileData {\n    firstName: string;\n    lastName: string;\n    role: string;\n    email: string;\n    phone: string;\n    emergencyContact: string;\n    joinDate: string;\n    permissions: string[];\n}\n\nexport interface TodayStats {\n    revenue: number;\n    orders: number;\n    profit: number;\n    netCredit: number;\n}\n\nexport interface CreditSummary {\n    totalOwed: number;\n    customersWithCredit: number;\n    overdueAmount: number;\n}\n\nexport type TabType = 'Overview' | 'Sales' | 'History';\n","size_bytes":5891},"components/common/SearchBar.tsx":{"content":"import React from 'react';\nimport { View, TextInput } from 'react-native';\nimport { Search } from 'lucide-react-native';\n\ninterface SearchBarProps {\n  placeholder?: string;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  isSearchFocused?: boolean;\n  value?: string;\n  onChangeText?: (text: string) => void;\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = ({\n  placeholder = \"Search products...\",\n  onFocus,\n  onBlur,\n  isSearchFocused = false,\n  value,\n  onChangeText\n}) => {\n  return (\n    <View\n      className={`flex-row items-center bg-white rounded-xl px-4 py-3 mb-4 ${\n        isSearchFocused ? 'border border-gray-200' : 'border border-transparent'\n      }`}\n      style={{\n        shadowColor: '#000',\n        shadowOffset: {\n          width: 0,\n          height: isSearchFocused ? 2 : 1,\n        },\n        shadowOpacity: isSearchFocused ? 0.1 : 0.05,\n        shadowRadius: isSearchFocused ? 4 : 2,\n        elevation: isSearchFocused ? 3 : 1,\n      }}\n    >\n      <Search size={20} color=\"#9CA3AF\" />\n      <TextInput\n        placeholder={placeholder}\n        className=\"flex-1 ml-3 text-gray-700\"\n        placeholderTextColor=\"#9CA3AF\"\n        onFocus={onFocus}\n        onBlur={onBlur}\n        value={value}\n        onChangeText={onChangeText}\n      />\n    </View>\n  );\n};","size_bytes":1289},"components/auth/SignUpCard.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface SignUpCardProps {\n  activeTab: 'personal' | 'business';\n  onTabChange: (tab: 'personal' | 'business') => void;\n  onSignIn: () => void;\n  children: React.ReactNode;\n}\n\nexport function SignUpCard({ activeTab, onTabChange, onSignIn, children }: SignUpCardProps) {\n  return (\n    <View className=\"bg-white rounded-2xl p-6 shadow-sm\">\n      {/* Header */}\n      <View className=\"flex-row items-center mb-6\">\n        <View className=\"w-8 h-8 bg-gray-900 rounded-full items-center justify-center mr-3\">\n          <Ionicons name=\"person-add-outline\" size={16} color=\"white\" />\n        </View>\n        <Text className=\"text-lg font-semibold text-gray-900\">Sign Up</Text>\n      </View>\n\n      {/* Tabs */}\n      <View className=\"flex-row bg-gray-100 rounded-lg p-1 mb-6\">\n        <TouchableOpacity\n          className={`flex-1 py-3 rounded-md ${\n            activeTab === 'personal' ? 'bg-gray-900' : 'bg-transparent'\n          }`}\n          onPress={() => onTabChange('personal')}\n        >\n          <Text\n            className={`text-center font-medium ${\n              activeTab === 'personal' ? 'text-white' : 'text-gray-700'\n            }`}\n          >\n            Personal Info\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          className={`flex-1 py-3 rounded-md ${\n            activeTab === 'business' ? 'bg-gray-900' : 'bg-transparent'\n          }`}\n          onPress={() => onTabChange('business')}\n        >\n          <Text\n            className={`text-center font-medium ${\n              activeTab === 'business' ? 'text-white' : 'text-gray-700'\n            }`}\n          >\n            Business Info\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Content */}\n      {children}\n\n      {/* Sign In Link */}\n      <View className=\"items-center mt-6\">\n        <Text className=\"text-gray-600\">\n          Already have an account?{' '}\n          <Text className=\"text-gray-900 font-medium\" onPress={onSignIn}>\n            Sign in here\n          </Text>\n        </Text>\n      </View>\n    </View>\n  );\n}\n","size_bytes":2198},"components/credit/CreditHeader.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport const CreditHeader: React.FC = () => {\n\treturn (\n\t\t<View className='flex-row items-center px-4 py-3 border-b border-gray-200'>\n\t\t\t<Ionicons name='card-outline' size={24} color='#000' />\n\t\t\t<Text className='text-xl font-semibold ml-2'>Customer Credit</Text>\n\t\t</View>\n\t);\n};\n","size_bytes":399},"app/(tabs)/_layout.tsx":{"content":"import { Tabs } from 'expo-router';\nimport React from 'react';\n\nimport { HapticTab } from '@/components/haptic-tab';\nimport { IconSymbol } from '@/components/ui/icon-symbol';\nimport { Colors } from '@/constants/theme';\nimport { useColorScheme } from '@/hooks/use-color-scheme';\n\nexport default function TabLayout() {\n    const colorScheme = useColorScheme();\n\n    return (\n        <Tabs\n            screenOptions={{\n                tabBarActiveTintColor: '#FFFFFF', // White text/icon for active tab\n                tabBarInactiveTintColor: Colors[colorScheme ?? 'light'].tabIconDefault,\n                tabBarActiveBackgroundColor: '#000000', // Dark background for active tab\n                headerShown: false,\n                tabBarButton: HapticTab,\n                tabBarStyle: {\n                    backgroundColor: Colors[colorScheme ?? 'light'].background,\n                },\n            }}>\n            <Tabs.Screen\n                name='checkout'\n                options={{\n                    title: 'Checkout',\n                    tabBarIcon: ({ color, focused }) => (\n                        <IconSymbol size={28} name={focused ? 'cart.fill' : 'cart'} color={color} />\n                    ),\n                }}\n            />\n            <Tabs.Screen\n                name='credit'\n                options={{\n                    title: 'Credit',\n                    tabBarIcon: ({ color, focused }) => (\n                        <IconSymbol\n                            size={28}\n                            name={focused ? 'creditcard.fill' : 'creditcard'}\n                            color={color}\n                        />\n                    ),\n                }}\n            />\n            <Tabs.Screen\n                name='inventory'\n                options={{\n                    title: 'Inventory',\n                    tabBarIcon: ({ color, focused }) => (\n                        <IconSymbol\n                            size={28}\n                            name={focused ? 'cube.box.fill' : 'cube.box'}\n                            color={color}\n                        />\n                    ),\n                }}\n            />\n            <Tabs.Screen\n                name='account'\n                options={{\n                    title: 'Account',\n                    tabBarIcon: ({ color, focused }) => (\n                        <IconSymbol\n                            size={28}\n                            name={focused ? 'person.fill' : 'person'}\n                            color={color}\n                        />\n                    ),\n                }}\n            />\n        </Tabs>\n    );\n}\n","size_bytes":2626},"components/themed-text.tsx":{"content":"import { StyleSheet, Text, type TextProps } from 'react-native';\n\nimport { useThemeColor } from '@/hooks/use-theme-color';\n\nexport type ThemedTextProps = TextProps & {\n  lightColor?: string;\n  darkColor?: string;\n  type?: 'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link';\n};\n\nexport function ThemedText({\n  style,\n  lightColor,\n  darkColor,\n  type = 'default',\n  ...rest\n}: ThemedTextProps) {\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return (\n    <Text\n      style={[\n        { color },\n        type === 'default' ? styles.default : undefined,\n        type === 'title' ? styles.title : undefined,\n        type === 'defaultSemiBold' ? styles.defaultSemiBold : undefined,\n        type === 'subtitle' ? styles.subtitle : undefined,\n        type === 'link' ? styles.link : undefined,\n        style,\n      ]}\n      {...rest}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  default: {\n    fontSize: 16,\n    lineHeight: 24,\n  },\n  defaultSemiBold: {\n    fontSize: 16,\n    lineHeight: 24,\n    fontWeight: '600',\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    lineHeight: 32,\n  },\n  subtitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    lineHeight: 30,\n    fontSize: 16,\n    color: '#0a7ea4',\n  },\n});\n","size_bytes":1285},"components/account/UnauthenticatedView.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router } from 'expo-router';\n\nexport const UnauthenticatedView: React.FC = () => {\n    return (\n        <SafeAreaView className='flex-1 bg-gray-50'>\n            <View className='flex-1 justify-center items-center px-4'>\n                <View className='bg-white rounded-2xl p-6 shadow-md w-full max-w-md'>\n                    <Text className='text-xl font-semibold text-center mb-4'>Welcome Back</Text>\n                    <Text className='text-gray-500 text-center mb-6'>\n                        Please sign in to access your account\n                    </Text>\n                    <TouchableOpacity\n                        className='w-full rounded-lg bg-blue-600 px-4 py-3'\n                        onPress={() => router.push('/auth/signup')}>\n                        <Text className='font-semibold text-white text-center'>Sign In</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        </SafeAreaView>\n    );\n};\n","size_bytes":1118},"hooks/useAccountActions.ts":{"content":"import { useBusiness } from '@/contexts/BusinessContext';\nimport { logout } from '@/db/services/userService';\nimport { router } from 'expo-router';\nimport { useCallback } from 'react';\n\nexport const useAccountActions = () => {\n    const { selectedStore, selectedBusiness } = useBusiness();\n    const handleMyAccount = useCallback((userExternalId: string) => {\n        console.log('Navigate to My Account details');\n        router.push({\n            pathname: '/account/profile',\n            params: {\n                externalId: userExternalId,\n                edit: 'false',\n            },\n        });\n    }, []);\n\n    const handleEdit = useCallback((userExternalId: string) => {\n        console.log('Navigate to Edit Profile');\n        router.push({\n            pathname: '/account/profile',\n            params: {\n                externalId: userExternalId,\n                edit: 'true',\n            },\n        });\n    }, []);\n\n    const handleStoreEdit = useCallback((storeExternalId: string) => {\n        console.log('Navigate to Edit Profile');\n        router.push({\n            pathname: '/account/store-profile',\n            params: {\n                externalId: storeExternalId,\n                edit: 'true',\n            },\n        });\n    }, []);\n\n    const handleLogout = useCallback(async () => {\n        console.log('🚪 Logging out...');\n        await logout();\n        router.push('/auth/login');\n    }, []);\n\n    const handleSettings = useCallback(() => {\n        console.log('Navigate to Settings');\n        router.push('/account/settings');\n    }, []);\n\n    const handleSwitchStore = useCallback(() => {\n        console.log('Open store switcher');\n        // Show modal or navigate to store selection\n    }, []);\n\n    const handleManageCredit = useCallback(() => {\n        console.log('Navigate to Manage Credit');\n        router.push('/credit');\n    }, []);\n\n    const handleSalesHistory = useCallback(() => {\n        console.log('Navigate to Sales History');\n        router.push('/account/sales');\n    }, []);\n\n    return {\n        handleMyAccount,\n        handleEdit,\n        handleLogout,\n        handleSettings,\n        handleSwitchStore,\n        handleManageCredit,\n        handleSalesHistory,\n        handleStoreEdit,\n    };\n};\n","size_bytes":2253},"nativewind-env.d.ts":{"content":"/// <reference types=\"nativewind/types\" />\n\n// NOTE: This file should not be edited and should be committed with your source code. It is generated by NativeWind.","size_bytes":161},"constants/categories.ts":{"content":"//NOTE: this will be updated based on the db schema\n\nimport { CategoryItem } from '@/types';\n\nexport const CATEGORIES: CategoryItem[] = [\n    { id: 'beverages', name: 'Beverages', count: 8, icon: '🥤', color: 'bg-white' },\n    { id: 'snacks', name: 'Snacks', count: 8, icon: '🍿', color: 'bg-white' },\n    { id: 'dairy', name: 'Dairy', count: 5, icon: '🥛', color: 'bg-white' },\n    { id: 'bakery', name: 'Bakery', count: 4, icon: '🍞', color: 'bg-white' },\n    { id: 'fruits', name: 'Fruits', count: 5, icon: '🍎', color: 'bg-white' },\n    { id: 'vegetables', name: 'Vegetables', count: 8, icon: '🥕', color: 'bg-white' },\n    { id: 'meat', name: 'Meat', count: 4, icon: '🥩', color: 'bg-white' },\n    { id: 'frozen', name: 'Frozen', count: 3, icon: '🧊', color: 'bg-white' },\n    { id: 'household', name: 'Household', count: 6, icon: '🧽', color: 'bg-white' },\n    { id: 'personal-care', name: 'Personal Care', count: 5, icon: '🧴', color: 'bg-white' },\n];\n\nexport const ALL_CATEGORIES_WITH_ALL = [\n    { id: 'all', name: 'All', count: 51, icon: '📋', color: 'bg-gray-600' },\n    ...CATEGORIES,\n];\n","size_bytes":1122},"db/models/staff.ts":{"content":"import { Model, Relation } from '@nozbe/watermelondb';\nimport { date, field, readonly, relation, writer } from '@nozbe/watermelondb/decorators';\nimport User from './users';\nimport Store from './stores';\nimport Role from './roles';\n\nexport default class Staff extends Model {\n    static table = 'staff';\n    static associations = {\n        users: { type: 'belongs_to' as const, key: 'user_id' },\n        stores: { type: 'belongs_to' as const, key: 'store_id' },\n        roles: { type: 'belongs_to' as const, key: 'role_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('user_id') userId!: string;\n    @field('store_id') storeId!: string;\n    @field('role_id') roleId!: string;\n    @readonly @date('assigned_at') assignedAt!: Date;\n    @field('deleted') deleted!: boolean;\n\n    @relation('users', 'user_id') user!: Relation<User>;\n    @relation('stores', 'store_id') store!: Relation<Store>;\n    @relation('roles', 'role_id') role!: Relation<Role>;\n\n    @writer async markAsDeleted() {\n        await this.update((s) => {\n            s.deleted = true;\n        });\n    }\n}\n","size_bytes":1092},"components/checkout/ProductCard.tsx":{"content":"import { Category, Product } from '@/types';\nimport { Minus, Plus } from 'lucide-react-native';\nimport React, { useRef } from 'react';\nimport { Animated, Text, TouchableOpacity, View } from 'react-native';\n\ninterface ProductCardProps {\n    category: Category;\n    product: Product;\n    onAddToCart: (product: Product) => void;\n    onRemoveFromCart: (product: Product) => void;\n}\n// Helper function to get appropriate stock unit based on category\nconst getStockUnit = (categoryName: string): string => {\n    switch (categoryName) {\n        case 'Beverages':\n            return 'bottles';\n        case 'Snacks':\n            return 'packs';\n        case 'Dairy':\n            return 'items';\n        case 'Bakery':\n            return 'loaves';\n        case 'Fruits':\n        case 'Vegetables':\n            return 'kg';\n        case 'Meat':\n            return 'kg';\n        case 'Frozen':\n            return 'items';\n        case 'Household':\n        case 'Personal Care':\n            return 'items';\n        default:\n            return 'items';\n    }\n};\n\nconst ProductCard: React.FC<ProductCardProps> = ({\n    category,\n    product,\n    onAddToCart,\n    onRemoveFromCart,\n}) => {\n    const scaleValue = useRef(new Animated.Value(1)).current;\n\n    const handlePressIn = (): void => {\n        Animated.spring(scaleValue, {\n            toValue: 0.98,\n            useNativeDriver: true,\n            tension: 400,\n            friction: 10,\n        }).start();\n    };\n\n    const handlePressOut = (): void => {\n        Animated.spring(scaleValue, {\n            toValue: 1,\n            useNativeDriver: true,\n            tension: 400,\n            friction: 10,\n        }).start();\n    };\n\n    const inCart = product.inCart || 0;\n\n    return (\n        <TouchableOpacity\n            onPressIn={handlePressIn}\n            onPressOut={handlePressOut}\n            activeOpacity={0.95}\n            className='mb-3'>\n            <Animated.View\n                className='bg-white rounded-xl p-4'\n                style={{\n                    transform: [{ scale: scaleValue }],\n                    shadowColor: '#000',\n                    shadowOffset: {\n                        width: 0,\n                        height: 2,\n                    },\n                    shadowOpacity: 0.06,\n                    shadowRadius: 6,\n                    elevation: 3,\n                }}>\n                <View className='flex-row justify-between items-start mb-2'>\n                    <View className='flex-1'>\n                        <Text className='text-lg font-semibold text-gray-900 mb-1'>\n                            {product.name}\n                        </Text>\n                        <Text className='text-sm text-gray-600 mb-1'>{product.brand}</Text>\n                        <Text className='text-lg font-bold text-gray-900 mb-1'>\n                            ${product.price.toFixed(2)}\n                        </Text>\n                        <Text className='text-sm text-gray-500 mb-2'>{product.size}</Text>\n                    </View>\n\n                    <View className='items-end'>\n                        <Text className='text-sm text-gray-500 mb-2'>\n                            Stock: {product.stock} {getStockUnit(category.name)}\n                        </Text>\n                        {inCart > 0 && (\n                            <View className='bg-red-500 rounded-full px-2 py-1 mb-2'>\n                                <Text className='text-white text-xs font-medium'>\n                                    {inCart} in cart\n                                </Text>\n                            </View>\n                        )}\n                    </View>\n                </View>\n\n                <Text className='text-sm text-gray-600 mb-4'>{product.description}</Text>\n\n                {inCart > 0 ? (\n                    <View className='flex-row items-center justify-between'>\n                        <View className='flex-row items-center bg-gray-100 rounded-full'>\n                            <TouchableOpacity\n                                onPress={() => onRemoveFromCart(product)}\n                                className='p-2'>\n                                <Minus size={16} color='#374151' />\n                            </TouchableOpacity>\n                            <Text className='mx-4 font-semibold text-gray-900'>{inCart}</Text>\n                            <TouchableOpacity onPress={() => onAddToCart(product)} className='p-2'>\n                                <Plus size={16} color='#374151' />\n                            </TouchableOpacity>\n                        </View>\n                        <Text className='text-lg font-bold text-gray-900'>\n                            ${(product.price * inCart).toFixed(2)}\n                        </Text>\n                    </View>\n                ) : (\n                    <TouchableOpacity\n                        onPress={() => onAddToCart(product)}\n                        className='bg-gray-900 rounded-xl py-3 flex-row items-center justify-center'>\n                        <Plus size={16} color='#FFFFFF' />\n                        <Text className='text-white font-semibold ml-2'>Add to Cart</Text>\n                    </TouchableOpacity>\n                )}\n            </Animated.View>\n        </TouchableOpacity>\n    );\n};\n\nexport default ProductCard;\n","size_bytes":5318},"components/account/TabSelector.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\n\ntype TabType = 'Overview' | 'Sales' | 'History';\n\ninterface TabSelectorProps {\n    activeTab: TabType;\n    onTabChange: (tab: TabType) => void;\n}\n\nexport const TabSelector: React.FC<TabSelectorProps> = ({ activeTab, onTabChange }) => {\n    const tabs: TabType[] = ['Overview', 'Sales', 'History'];\n\n    return (\n        <View className='mb-4 flex-row bg-white rounded-lg p-1 shadow-sm'>\n            {tabs.map((tab) => (\n                <TouchableOpacity\n                    key={tab}\n                    onPress={() => onTabChange(tab)}\n                    className={`flex-1 rounded-lg py-2 ${\n                        activeTab === tab ? 'bg-black' : 'bg-transparent'\n                    }`}>\n                    <Text\n                        className={`text-sm font-medium text-center ${\n                            activeTab === tab ? 'text-white' : 'text-gray-700'\n                        }`}>\n                        {tab}\n                    </Text>\n                </TouchableOpacity>\n            ))}\n        </View>\n    );\n};\n","size_bytes":1124},"hooks/useCreditNavigation.ts":{"content":"import { useState } from 'react';\nimport { Customer } from '@/types';\n\ntype CreditScreen = 'list' | 'detail';\n\nexport const useCreditNavigation = () => {\n\tconst [currentScreen, setCurrentScreen] = useState<CreditScreen>('list');\n\tconst [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n\n\tconst navigateToDetail = (customer: Customer) => {\n\t\tsetSelectedCustomer(customer);\n\t\tsetCurrentScreen('detail');\n\t};\n\n\tconst navigateBack = () => {\n\t\tsetSelectedCustomer(null);\n\t\tsetCurrentScreen('list');\n\t};\n\n\treturn {\n\t\tcurrentScreen,\n\t\tselectedCustomer,\n\t\tnavigateToDetail,\n\t\tnavigateBack,\n\t};\n};\n","size_bytes":614},"components/account/store/BusinessDetailsCard.tsx":{"content":"import React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface BusinessDetailsCardProps {\n    description: string;\n    weekdayHours: string;\n    weekendHours: string;\n    taxId: string;\n    established: string;\n    isEditing: boolean;\n    onDescriptionChange: (text: string) => void;\n    onWeekdayHoursChange: (text: string) => void;\n    onWeekendHoursChange: (text: string) => void;\n}\n\nexport const BusinessDetailsCard: React.FC<BusinessDetailsCardProps> = ({\n    description,\n    weekdayHours,\n    weekendHours,\n    taxId,\n    established,\n    isEditing,\n    onDescriptionChange,\n    onWeekdayHoursChange,\n    onWeekendHoursChange,\n}) => {\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <View className='flex-row items-center mb-4'>\n                <Ionicons name='briefcase-outline' size={20} color='#374151' />\n                <Text className='ml-2 font-semibold text-gray-900'>Business Details</Text>\n            </View>\n\n            {/* Store Description */}\n            <View className='mb-4'>\n                <Text className='text-sm text-gray-600 font-medium mb-2'>Store Description</Text>\n                {isEditing ? (\n                    <TextInput\n                        value={description}\n                        onChangeText={onDescriptionChange}\n                        className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                        multiline\n                        numberOfLines={5}\n                    />\n                ) : (\n                    <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                        <Text className='text-gray-900'>{description}</Text>\n                    </View>\n                )}\n            </View>\n\n            {/* Business Hours */}\n            <View className='mb-4'>\n                <View className='flex-row items-center mb-2'>\n                    <Ionicons name='time-outline' size={16} color='#6B7280' />\n                    <Text className='ml-2 text-sm text-gray-600 font-medium'>Business Hours</Text>\n                </View>\n                {isEditing ? (\n                    <View>\n                        <TextInput\n                            value={weekdayHours}\n                            onChangeText={onWeekdayHoursChange}\n                            className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900 mb-2'\n                            placeholder='Monday - Saturday hours'\n                        />\n                        <TextInput\n                            value={weekendHours}\n                            onChangeText={onWeekendHoursChange}\n                            className='bg-gray-50 rounded-lg px-4 py-3 text-gray-900'\n                            placeholder='Sunday hours'\n                        />\n                    </View>\n                ) : (\n                    <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                        <Text className='text-gray-900'>{weekdayHours}</Text>\n                        <Text className='text-gray-900 mt-1'>{weekendHours}</Text>\n                    </View>\n                )}\n            </View>\n\n            {/* Tax ID and Established */}\n            <View className='flex-row gap-3'>\n                <View className='flex-1'>\n                    <View className='flex-row items-center mb-2'>\n                        <Ionicons name='document-text-outline' size={16} color='#6B7280' />\n                        <Text className='ml-2 text-sm text-gray-600 font-medium'>Tax ID</Text>\n                    </View>\n                    <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                        <Text className='text-gray-900'>{taxId}</Text>\n                    </View>\n                </View>\n                <View className='flex-1'>\n                    <View className='flex-row items-center mb-2'>\n                        <Ionicons name='calendar-outline' size={16} color='#6B7280' />\n                        <Text className='ml-2 text-sm text-gray-600 font-medium'>Established</Text>\n                    </View>\n                    <View className='bg-gray-50 rounded-lg px-4 py-3'>\n                        <Text className='text-gray-900'>{established}</Text>\n                    </View>\n                </View>\n            </View>\n        </View>\n    );\n};\n","size_bytes":4370},"components/auth/AuthButton.tsx":{"content":"import React from 'react';\nimport { TouchableOpacity, Text } from 'react-native';\n\ninterface AuthButtonProps {\n  title: string;\n  onPress: () => void;\n  variant?: 'primary' | 'secondary';\n  disabled?: boolean;\n}\n\nexport function AuthButton({ \n  title, \n  onPress, \n  variant = 'primary', \n  disabled = false \n}: AuthButtonProps) {\n  const baseClasses = \"rounded-lg py-4\";\n  const variantClasses = variant === 'primary' \n    ? \"bg-gray-900\" \n    : \"bg-white border border-gray-300\";\n  const textClasses = variant === 'primary' \n    ? \"text-white\" \n    : \"text-gray-900\";\n  const disabledClasses = disabled ? \"opacity-50\" : \"\";\n\n  return (\n    <TouchableOpacity\n      className={`${baseClasses} ${variantClasses} ${disabledClasses}`}\n      onPress={onPress}\n      disabled={disabled}\n    >\n      <Text className={`text-center font-semibold text-base ${textClasses}`}>\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n}\n","size_bytes":927},"README.md":{"content":"# Welcome to your Expo app 👋\n\nThis is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).\n\n## Get started\n\n1. Install dependencies\n\n   ```bash\n   npm install\n   ```\n\n2. Start the app\n\n   ```bash\n   npx expo start\n   ```\n\nIn the output, you'll find options to open the app in a\n\n- [development build](https://docs.expo.dev/develop/development-builds/introduction/)\n- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)\n- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)\n- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo\n\nYou can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).\n\n## Get a fresh project\n\nWhen you're ready, run:\n\n```bash\nnpm run reset-project\n```\n\nThis command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.\n\n## Learn more\n\nTo learn more about developing your project with Expo, look at the following resources:\n\n- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).\n- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.\n\n## Join the community\n\nJoin our community of developers creating universal apps.\n\n- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.\n- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.\n","size_bytes":1741},"components/account/QuickActionsCard.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Zap, CreditCard, Receipt, ChevronRight } from 'lucide-react-native';\n\ninterface QuickActionsCardProps {\n    onManageCredit: () => void;\n    onSalesHistory: () => void;\n}\n\nexport const QuickActionsCard: React.FC<QuickActionsCardProps> = ({\n    onManageCredit,\n    onSalesHistory,\n}) => {\n    return (\n        <View className='mb-4 rounded-2xl bg-white p-4 shadow-sm'>\n            <View className='flex-row items-center mb-4'>\n                <Zap size={20} color='#374151' />\n                <Text className='ml-2 font-semibold text-gray-900'>Quick Actions</Text>\n            </View>\n\n            <TouchableOpacity\n                onPress={onManageCredit}\n                className='flex-row items-center p-3 mb-3 bg-orange-50 rounded-xl'>\n                <View className='w-10 h-10 bg-orange-500 rounded-lg items-center justify-center'>\n                    <CreditCard size={20} color='#FFFFFF' />\n                </View>\n                <View className='ml-3 flex-1'>\n                    <Text className='font-semibold text-gray-900'>Manage Credit</Text>\n                    <Text className='text-xs text-gray-500'>View customer accounts</Text>\n                </View>\n                <ChevronRight size={20} color='#9CA3AF' />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n                onPress={onSalesHistory}\n                className='flex-row items-center p-3 bg-blue-50 rounded-xl'>\n                <View className='w-10 h-10 bg-blue-500 rounded-lg items-center justify-center'>\n                    <Receipt size={20} color='#FFFFFF' />\n                </View>\n                <View className='ml-3 flex-1'>\n                    <Text className='font-semibold text-gray-900'>Sales History</Text>\n                    <Text className='text-xs text-gray-500'>View recent transactions</Text>\n                </View>\n                <ChevronRight size={20} color='#9CA3AF' />\n            </TouchableOpacity>\n        </View>\n    );\n};\n","size_bytes":2052},"components/checkout/CategoriesGrid.tsx":{"content":"import CategoryCard from '@/components/checkout/category/CategoryCard';\nimport { Category } from '@/types';\nimport React from 'react';\nimport { View } from 'react-native';\nimport { SectionTitle } from '../common/SectionTitle';\n\ninterface CategoriesGridProps {\n    categories: Category[];\n    onCategoryPress: (category: Category) => void;\n}\n\nexport const CategoriesGrid: React.FC<CategoriesGridProps> = ({ categories, onCategoryPress }) => {\n    return (\n        <View className='px-4'>\n            <SectionTitle title='Categories' />\n            <View className='flex-row flex-wrap justify-between'>\n                {categories.map((category: Category, index: number) => (\n                    <CategoryCard key={index} category={category} onPress={onCategoryPress} />\n                ))}\n            </View>\n        </View>\n    );\n};\n","size_bytes":835},"hooks/useNavigation.ts":{"content":"import { useState } from 'react';\nimport { Category, CartItem, Screen } from '@/types';\n\ninterface NavigationState {\n  currentScreen: Screen;\n  selectedCategory?: Category;\n  cartItems?: CartItem[];\n}\n\nexport const useNavigation = () => {\n  const [navigation, setNavigation] = useState<NavigationState>({\n    currentScreen: 'main'\n  });\n\n  const navigateToCheckoutCategory = (category: Category) => {\n    setNavigation({\n      currentScreen: 'checkout-category',\n      selectedCategory: category\n    });\n  };\n\n    const navigateToInventoryCategory = (category: Category) => {\n    setNavigation({\n      currentScreen: 'inventory-category',\n      selectedCategory: category\n    });\n  };\n\n  const navigateToCheckout = (cartItems: CartItem[]) => {\n    setNavigation({\n      currentScreen: 'checkout',\n      cartItems\n    });\n  };\n\n    const navigateToInventory = (cartItems: CartItem[]) => {\n    setNavigation({\n      currentScreen: 'inventory',\n      cartItems\n    });\n  };\n\n  const navigateBack = () => {\n    setNavigation({ currentScreen: 'main' });\n  };\n\n  return {\n    navigation,\n    navigateToCheckoutCategory,\n    navigateToInventoryCategory,\n    navigateToInventory,\n    navigateToCheckout,\n    navigateBack\n  };\n};","size_bytes":1220},"components/checkout/category/CategoryCard.tsx":{"content":"import { Category } from '@/types';\nimport { useDatabase } from '@nozbe/watermelondb/react';\nimport React, { useRef } from 'react';\nimport { Animated, Text, TouchableOpacity, View } from 'react-native';\n\ninterface CategoryCardProps {\n    category: Category;\n    onPress: (category: Category) => void;\n}\n\n// import User from \"@/models/db/users\";\n// import { addUser } from \"@/models/service/UserService\";\n\nconst CategoryCard: React.FC<CategoryCardProps> = ({ category, onPress }) => {\n    const scaleValue = useRef(new Animated.Value(1)).current;\n    const [isPressed, setIsPressed] = React.useState(false);\n    const database = useDatabase();\n\n    const handlePressIn = (): void => {\n        setIsPressed(true);\n        Animated.spring(scaleValue, {\n            toValue: 0.95,\n            useNativeDriver: true,\n            tension: 300,\n            friction: 10,\n        }).start();\n    };\n\n    const handlePressOut = (): void => {\n        setIsPressed(false);\n        Animated.spring(scaleValue, {\n            toValue: 1,\n            useNativeDriver: true,\n            tension: 300,\n            friction: 10,\n        }).start();\n    };\n\n    //DEBUG: This is just a placeholder code to make calls to the db to see if its working.\n    // But should be removed as soon as we have the proper logic in place.\n    // const dummyDBCall = async () => {\n    //   console.log('We tapped the button and this is the provider');\n\n    //   try {\n    //     await database.get('users').query().fetch();\n    //     console.log(database);\n    //     console.log(\"Fetching users from database...\");\n    //     await addUser(database, \"John\", \"Doe\", \"1234567890\", \"hashedpassword\");\n    //     console.log(\"User added successfully\");\n    //     database.get<User>('users').query().fetch().then(users => {\n    //       console.log(\"Users in database:\", users);\n    //     })\n    //   } catch (error) {\n    //     console.error(\"Error fetching users:\", error);\n    //   }\n    // }\n\n    const handlePress = (): void => {\n        console.log(`Selected category: ${category.name}`);\n        onPress(category);\n        //DEBUG: This is just a placeholder code to make calls to the db to see if its working.\n        // But should be removed as soon as we have the proper logic in place.\n    };\n\n    return (\n        <TouchableOpacity\n            onPressIn={handlePressIn}\n            onPressOut={handlePressOut}\n            onPress={handlePress}\n            activeOpacity={1} // Disable default opacity change\n            className='flex-1 min-w-[45%] max-w-[45%] m-2'>\n            <Animated.View\n                className={`${category.color} rounded-2xl p-4`}\n                style={{\n                    transform: [{ scale: scaleValue }],\n                    shadowColor: '#000',\n                    shadowOffset: {\n                        width: 0,\n                        height: isPressed ? 6 : 4,\n                    },\n                    shadowOpacity: isPressed ? 0.15 : 0.1,\n                    shadowRadius: isPressed ? 8 : 6,\n                    elevation: isPressed ? 6 : 4,\n                }}>\n                <View className='flex-row items-center justify-between mb-2'>\n                    <Text className='text-2xl'>{category.icon}</Text>\n                    <Animated.View\n                        className='bg-white rounded-full px-2 py-1'\n                        style={{\n                            transform: [{ scale: scaleValue }],\n                        }}>\n                        <Text className='text-xs font-medium text-gray-600'>{category.count}</Text>\n                    </Animated.View>\n                </View>\n                <Text className='text-gray-800 font-medium text-sm'>{category.name}</Text>\n            </Animated.View>\n        </TouchableOpacity>\n    );\n};\n\nexport default CategoryCard;\n","size_bytes":3810},"start-web.sh":{"content":"#!/bin/bash\nnpm install\nexport EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0\nexport PORT=5000\nexport EXPO_METRO_WAIT_ON_URL=http://0.0.0.0:5000\nnpx expo start --web --port 5000\n","size_bytes":168},"db/index.native.ts":{"content":"import { Database } from '@nozbe/watermelondb';\nimport SQLiteAdapter from '@nozbe/watermelondb/adapters/sqlite';\n\nimport Business from './models/business';\nimport Category from './models/categories';\nimport Customer from './models/customers';\nimport Inventory from './models/inventory';\nimport InventoryBatch from './models/inventory_batches';\nimport Product from './models/products';\nimport Role from './models/roles';\nimport Sale from './models/sales';\nimport SaleItem from './models/sales_items';\nimport Session from './models/sessions';\nimport Staff from './models/staff';\nimport Store from './models/stores';\nimport User from './models/users';\nimport schema from './schema';\n\nexport {\n    Business,\n    Category,\n    Customer,\n    Inventory,\n    InventoryBatch,\n    Product,\n    Role,\n    Sale,\n    SaleItem,\n    Session,\n    Staff,\n    Store,\n    User,\n};\n\n// First, create the adapter to the underlying database:\nconst adapter = new SQLiteAdapter({\n    schema,\n    jsi: true,\n    onSetUpError: (error) => {\n        console.error('Database setup failed', error);\n    },\n});\n\n// Then, make a Watermelon database from it\nexport const database = new Database({\n    adapter,\n    modelClasses: [\n        User,\n        Session,\n        Business,\n        Store,\n        Role,\n        Staff,\n        Category,\n        Product,\n        Inventory,\n        InventoryBatch,\n        Customer,\n        Sale,\n        SaleItem,\n    ],\n});\n","size_bytes":1429},"db/index.web.ts":{"content":"import { Database } from '@nozbe/watermelondb';\nimport LokiJSAdapter from '@nozbe/watermelondb/adapters/lokijs';\n\nimport Business from './models/business';\nimport Category from './models/categories';\nimport Customer from './models/customers';\nimport Inventory from './models/inventory';\nimport InventoryBatch from './models/inventory_batches';\nimport Product from './models/products';\nimport Role from './models/roles';\nimport Sale from './models/sales';\nimport SaleItem from './models/sales_items';\nimport Session from './models/sessions';\nimport Staff from './models/staff';\nimport Store from './models/stores';\nimport User from './models/users';\nimport schema from './schema';\n\nexport {\n    Business,\n    Category,\n    Customer,\n    Inventory,\n    InventoryBatch,\n    Product,\n    Role,\n    Sale,\n    SaleItem,\n    Session,\n    Staff,\n    Store,\n    User,\n};\n\n// First, create the adapter to the underlying database:\nconst adapter = new LokiJSAdapter({\n    schema,\n    useWebWorker: false,\n    useIncrementalIndexedDB: true,\n    dbName: 'pos',\n    onSetUpError: (error) => {\n        console.error('Database setup failed', error);\n    },\n});\n\n// Then, make a Watermelon database from it\nexport const database = new Database({\n    adapter,\n    modelClasses: [\n        User,\n        Session,\n        Business,\n        Store,\n        Role,\n        Staff,\n        Category,\n        Product,\n        Inventory,\n        InventoryBatch,\n        Customer,\n        Sale,\n        SaleItem,\n    ],\n});\n","size_bytes":1493},"replit.md":{"content":"# POS (Point of Sale) - Expo React Native App\n\n## Overview\nThis is an Expo-based Point of Sale (POS) application built with React Native, supporting web, iOS, and Android platforms. The app uses WatermelonDB for local data persistence and includes features for inventory management, checkout, credit transactions, and account management.\n\n## Project Setup - Replit Environment\n\n### Date: October 15, 2025\n\n### Technology Stack\n- **Framework**: Expo SDK 54\n- **React**: v19.1.0\n- **React Native**: v0.81.4\n- **Database**: WatermelonDB with platform-specific adapters\n  - Web: LokiJS (IndexedDB)\n  - Native: SQLite\n- **Styling**: NativeWind (Tailwind CSS for React Native)\n- **Routing**: Expo Router v6\n- **Language**: TypeScript v5.9\n\n### Key Configuration Changes for Replit\n\n1. **Node.js Version**: Upgraded to Node.js 22 (required by React Native 0.81.4 and Metro bundler)\n\n2. **TypeScript Configuration** (`tsconfig.json`):\n   - Added `useDefineForClassFields: false` to support WatermelonDB decorators\n   - This prevents TypeScript/Babel conflicts with class field initialization\n\n3. **Babel Configuration** (`babel.config.js`):\n   - Added `@babel/plugin-proposal-class-properties` with `{ loose: true }`\n   - Maintained `@babel/plugin-proposal-decorators` with `{ legacy: true }`\n   - Both plugins required for WatermelonDB decorator support\n\n4. **Platform-Specific Database Adapters**:\n   - Created `db/index.web.ts` - Uses LokiJS adapter for web (IndexedDB)\n   - Created `db/index.native.ts` - Uses SQLite adapter for native platforms\n   - This prevents bundler errors trying to import native SQLite modules on web\n\n5. **Metro Configuration** (`metro.config.js`):\n   - Configured with NativeWind integration\n   - Added CORS headers for development\n\n### Running the Project\n\nThe app runs on **port 5000** and is configured to work with Replit's proxy environment.\n\n**Start Command**: `bash start-web.sh`\n\nThe workflow is configured as:\n- Name: Web Server\n- Command: `bash start-web.sh`\n- Port: 5000\n- Output: webview\n\n### Known Issues & Warnings\n\n1. **Require Cycles**: There are circular dependencies between database models and the index file. These are allowed but may cause initialization issues in some cases.\n\n2. **Missing Default Exports**: \n   - `./(tabs)/account/sales.tsx`\n   - `./(tabs)/account/settings.tsx`\n   These routes need default React component exports.\n\n3. **Package Versions**: Some Expo packages are slightly behind the recommended versions for SDK 54:\n   - expo@54.0.10 (recommended: 54.0.13)\n   - expo-font@14.0.8 (recommended: ~14.0.9)\n   - expo-image@3.0.8 (recommended: ~3.0.9)\n   - expo-router@6.0.8 (recommended: ~6.0.12)\n   - expo-web-browser@15.0.7 (recommended: ~15.0.8)\n\n### Project Structure\n\n```\n/\n├── app/              # Expo Router pages\n│   ├── (tabs)/      # Tab-based navigation\n│   │   ├── account/ # Account management\n│   │   ├── checkout/# Checkout flow\n│   │   ├── credit/  # Credit management\n│   │   └── inventory/# Inventory management\n│   └── auth/        # Authentication screens\n├── components/      # Reusable UI components\n├── contexts/        # React contexts (Auth, Business)\n├── db/              # WatermelonDB setup\n│   ├── models/     # Database models\n│   ├── services/   # Database services\n│   ├── index.web.ts    # Web database config (LokiJS)\n│   └── index.native.ts # Native database config (SQLite)\n├── hooks/          # Custom React hooks\n└── utils/          # Utility functions\n```\n\n### Database Schema\n\nThe app uses WatermelonDB with the following main models:\n- User\n- Session\n- Business\n- Store\n- Role\n- Staff\n- Category\n- Product\n- Inventory\n- InventoryBatch (NEW - tracks all inventory movements)\n- Customer\n- Sale\n- SaleItem\n\n**Schema Version**: 1 (no migrations - fresh development setup)\n\n⚠️ **Important**: The current schema includes all tables at version 1 without migrations. This is suitable for fresh development installations. For production deployments, proper WatermelonDB migrations should be implemented to handle schema upgrades safely.\n\n### POS Features Implemented\n\n#### 1. Inventory Management\n- **Add Products Modal** (`components/inventory/modal/productModal.tsx`)\n  - Modal-based product creation (replaces separate page navigation)\n  - Dynamic category loading from database\n  - Create products with name, SKU, price, category, and initial stock\n  - Automatic inventory record creation on product creation\n  - Form validation and error handling\n  - Real-time inventory refresh after adding products\n\n- **Edit Product Modal** (`components/inventory/modal/EditProductModal.tsx`)\n  - Modal for editing existing products and inventory\n  - Update product details (name, category, barcode, description, unit)\n  - Update inventory pricing (retail, wholesale, cost)\n  - Update stock levels (min/max alerts) and location\n  - Category selection and creation UI (same as Add Products Modal)\n  - Proper number handling to support zero values\n  - Form validation with explicit TypeScript types\n  - Uses productService.updateProduct and inventoryService.updateInventoryPricing\n  \n- **Inventory List** (`app/(tabs)/inventory/index.tsx`)\n  - Database-backed inventory loading via `useInventoryData` hook\n  - Real-time product filtering by category and search\n  - Low stock and out-of-stock indicators\n  - Edit and delete product functionality\n  \n- **Manage Categories** (`app/(tabs)/inventory/manage-categories.tsx`)\n  - Add, edit, and delete product categories\n  - Real-time category list updates\n  - Confirmation dialogs for deletions\n\n- **Adjust Inventory** (`app/(tabs)/inventory/adjust-inventory.tsx`)\n  - Manual stock adjustments (add/remove inventory)\n  - Batch type tracking (purchase, return, adjustment, damage, expired, transfer)\n  - Reason tracking for all inventory changes\n  - Automatic inventory batch record creation\n\n#### 2. Checkout/Sales Flow\n- **Category-Based Checkout** (`app/(tabs)/checkout/category.tsx`)\n  - Database-backed product loading via `useCheckoutProducts` hook\n  - Products filtered by category from inventory\n  - Real-time cart state management with proper ID handling\n  - Cart persistence across category navigation\n  - Search and filter products within category\n  \n- **Complete Sale** (`app/(tabs)/checkout/complete-sale.tsx`)\n  - Cash, card, and mobile payment methods\n  - Credit sale support with customer selection\n  - Discount application\n  - Automatic inventory deduction on sale completion\n  - Customer balance updates for credit sales\n  - Sale and sale item record creation\n\n#### 3. Database Services\nAll services are located in `db/services/`:\n\n- **productService.ts**: Product CRUD operations\n  - Create products with initial inventory\n  - Search products by name, SKU, or barcode\n  - Get products by category or business\n\n- **categoryService.ts**: Category management\n  - Create, update, delete categories\n  - Get categories by business\n\n- **inventoryService.ts**: Inventory tracking with batch support\n  - Adjust inventory quantities with batch recording\n  - Track inventory movements (purchase, return, adjustment, damage, expired, transfer)\n  - Get current inventory levels by product/store\n\n- **salesService.ts**: Sales transaction processing\n  - Complete sales (cash and credit)\n  - Automatic inventory deduction\n  - Customer balance updates for credit sales\n  - Sale and sale item creation\n\n- **customerService.ts**: Customer management\n  - Create and update customers\n  - Track customer balances for credit sales\n  - Get customers by business\n\n#### 4. Custom Hooks\n- **useInventoryData.ts**: Manages inventory state with real-time WatermelonDB observables\n  - Loads inventory data by store\n  - Fetches related product and category information\n  - Provides refresh functionality for real-time updates\n  \n- **useCheckoutProducts.ts**: Database-backed checkout product management\n  - Loads products from inventory by category\n  - Maintains cart state with proper product ID handling\n  - Syncs with global cart for checkout flow\n  - Prevents cart regression by using consistent product IDs\n  \n- **useCheckoutData.ts**: Manages checkout flow state (not yet used, prepared for future enhancements)\n\n### Development Notes\n\n- The web version uses IndexedDB for storage via LokiJS adapter\n- Native versions (iOS/Android) use SQLite via JSI for better performance\n- The app supports dark mode with automatic theme switching\n- Authentication context provides user management\n- Business context manages multi-store POS operations\n- All inventory movements are tracked via inventory_batches table\n- Credit sales automatically update customer balances\n- Inventory is automatically deducted when sales are completed\n\n### Recent Updates\n\n#### October 15, 2025\n- **Edit Product Modal Implementation**\n  - Created `EditProductModal.tsx` with proper TypeScript types (no 'any' types)\n  - Category selection and creation UI matching ProductModal\n  - Product update functionality using productService.updateProduct\n  - Inventory update functionality using inventoryService.updateInventoryPricing\n  - Robust number handling to support zero values (wholesale price, min/max stock)\n  - Form validation and error handling\n  - Connected to product update button in inventory list\n  - Fixed category update issue by implementing proper inventory data refresh in useInventoryData hook\n\n#### October 13, 2025\n\n#### Modal-Based Product Addition\n- Converted add-product page to a modal component (`AddProductModal.tsx`)\n- Modal opens from the main inventory screen\n- Integrated with database services for real-time category loading\n- Automatic inventory refresh after product creation\n\n#### Database-Backed Checkout\n- Created `useCheckoutProducts` hook for loading products from database\n- Products are now loaded from inventory instead of mock data\n- Fixed cart state regression by ensuring consistent product ID usage\n- Cart items properly persist across category navigation\n- Products added to inventory immediately appear in checkout\n\n#### Type System Updates\n- Enhanced `Product` interface with additional fields:\n  - `inventoryId`: Reference to inventory record\n  - `productId`: Reference to product record\n  - `categoryId`, `categoryIcon`, `categoryColor`: Category metadata\n  - `cost`, `barcode`, `location`, `minStock`, `maxStock`: Inventory fields\n- Ensures type safety across inventory and checkout flows\n","size_bytes":10452},"db/services/inventoryService.ts":{"content":"import { Q } from '@nozbe/watermelondb';\nimport { database, inventoryBatchesCollection, inventoryCollection } from '..';\nexport const inventoryService = {\n    async createInventory(data: {\n        productId: string;\n        storeId: string;\n        quantity?: number;\n        minStock?: number;\n        maxStock?: number;\n        price: number;\n        wholeSalePrice?: number;\n        weightedAvgCost?: number;\n        lastPurchasePrice?: number;\n        location?: string;\n    }) {\n        return await database.write(async () => {\n            return await inventoryCollection.create((inventory) => {\n                inventory.externalId = `inv_${Date.now()}`;\n                inventory.productId = data.productId;\n                inventory.storeId = data.storeId;\n                inventory.quantity = data.quantity || 0;\n                inventory.minStock = data.minStock || 0;\n                inventory.maxStock = data.maxStock || 100;\n                inventory.price = data.price;\n                inventory.wholeSalePrice = data.wholeSalePrice || 0;\n                inventory.weightedAvgCost = data.weightedAvgCost || 0;\n                inventory.lastPurchasePrice = data.lastPurchasePrice || 0;\n                inventory.location = data.location || '';\n                inventory.deleted = false;\n            });\n        });\n    },\n\n    async adjustInventoryWithBatch(\n        inventoryId: string,\n        quantityChange: number,\n        batchData: {\n            userId: string;\n            costPerUnit?: number;\n            batchType: 'purchase' | 'sale' | 'adjustment' | 'return' | 'damage';\n            referenceId?: string;\n            notes?: string;\n        },\n    ) {\n        const inventory = await inventoryCollection.find(inventoryId);\n        // const batchesCollection = database.collections.get<InventoryBatch>('inventory_batches');\n\n        return await database.write(async () => {\n            const quantityBefore = inventory.quantity || 0;\n            const quantityAfter = quantityBefore + quantityChange;\n\n            await inventory.update((inv) => {\n                inv.quantity = quantityAfter;\n\n                if (batchData.costPerUnit && batchData.batchType === 'purchase') {\n                    inv.lastPurchasePrice = batchData.costPerUnit;\n\n                    const totalValue =\n                        (inv.weightedAvgCost || 0) * quantityBefore +\n                        batchData.costPerUnit * Math.abs(quantityChange);\n                    inv.weightedAvgCost = totalValue / quantityAfter;\n                }\n            });\n\n            await inventoryBatchesCollection.create((batch) => {\n                batch.externalId = `batch_${Date.now()}`;\n                batch.inventoryId = inventoryId;\n                batch.productId = inventory.productId;\n                batch.storeId = inventory.storeId;\n                batch.userId = batchData.userId;\n                batch.quantityChange = quantityChange;\n                batch.quantityBefore = quantityBefore;\n                batch.quantityAfter = quantityAfter;\n                batch.costPerUnit = batchData.costPerUnit || 0;\n                batch.batchType = batchData.batchType;\n                batch.referenceId = batchData.referenceId || '';\n                batch.notes = batchData.notes || '';\n            });\n\n            return inventory;\n        });\n    },\n\n    async updateInventoryPricing(\n        inventoryId: string,\n        updates: {\n            price?: number;\n            wholeSalePrice?: number;\n            minStock?: number;\n            maxStock?: number;\n            location?: string;\n        },\n    ) {\n        const inventory = await inventoryCollection.find(inventoryId);\n\n        return await database.write(async () => {\n            return await inventory.update((inv) => {\n                if (updates.price !== undefined) inv.price = updates.price;\n                if (updates.wholeSalePrice !== undefined)\n                    inv.wholeSalePrice = updates.wholeSalePrice;\n                if (updates.minStock !== undefined) inv.minStock = updates.minStock;\n                if (updates.maxStock !== undefined) inv.maxStock = updates.maxStock;\n                if (updates.location !== undefined) inv.location = updates.location;\n            });\n        });\n    },\n\n    async getInventoryByStore(storeId: string) {\n        return await inventoryCollection\n            .query(\n                Q.where('store_id', storeId),\n                Q.where('deleted', false),\n                Q.sortBy('last_updated', Q.desc),\n            )\n            .fetch();\n    },\n\n    async getInventoryByProduct(productId: string, storeId: string) {\n        const inventories = await inventoryCollection\n            .query(\n                Q.where('product_id', productId),\n                Q.where('store_id', storeId),\n                Q.where('deleted', false),\n            )\n            .fetch();\n\n        return inventories.length > 0 ? inventories[0] : null;\n    },\n\n    async getLowStockItems(storeId: string) {\n        const allInventory = await inventoryCollection\n            .query(Q.where('store_id', storeId), Q.where('deleted', false))\n            .fetch();\n\n        return allInventory.filter((inv) => (inv.quantity || 0) <= (inv.minStock || 0));\n    },\n\n    async getInventoryBatches(inventoryId: string, limit: number = 50) {\n        return await inventoryBatchesCollection\n            .query(\n                Q.where('inventory_id', inventoryId),\n                Q.sortBy('created_at', Q.desc),\n                Q.take(limit),\n            )\n            .fetch();\n    },\n\n    async getInventoryWithProduct(inventoryId: string) {\n        const inventory = await inventoryCollection.find(inventoryId);\n        const product = await inventory.product.fetch();\n        const category = await product.category.fetch();\n        return { inventory, product, category };\n    },\n};\n","size_bytes":5880},"db/services/categoryService.ts":{"content":"import { Q } from '@nozbe/watermelondb';\nimport Category from '../models/categories';\nimport { categoriesCollection, database } from '..';\n\nexport const categoryService = {\n    async createCategory(data: {\n        businessId: string;\n        name: string;\n        icon?: string;\n        color?: string;\n    }) {\n        return await database.write(async () => {\n            return await categoriesCollection.create((category) => {\n                category.externalId = `cat_${data.name}_${Date.now()}`;\n                category.businessId = data.businessId;\n                category.name = data.name;\n                category.icon = data.icon || '📦';\n                category.color = data.color || '#6B7280';\n                category.deleted = false;\n            });\n        });\n    },\n\n    async updateCategory(\n        categoryId: string,\n        updates: Partial<{\n            name: string;\n            icon: string;\n            color: string;\n        }>,\n    ) {\n        const category = await categoriesCollection.find(categoryId);\n\n        return await database.write(async () => {\n            return await category.update((c) => {\n                if (updates.name !== undefined) c.name = updates.name;\n                if (updates.icon !== undefined) c.icon = updates.icon;\n                if (updates.color !== undefined) c.color = updates.color;\n            });\n        });\n    },\n\n    async deleteCategory(categoryId: string) {\n        const category = await categoriesCollection.find(categoryId);\n\n        return await database.write(async () => {\n            return await category.update((c) => {\n                c.deleted = true;\n            });\n        });\n    },\n\n    async getCategoryById(categoryId: string) {\n        return await categoriesCollection.find(categoryId);\n    },\n\n    async getCategoriesByBusiness(businessId: string) {\n        return await categoriesCollection\n            .query(\n                Q.where('business_id', businessId),\n                Q.where('deleted', false),\n                Q.sortBy('name', Q.asc),\n            )\n            .fetch();\n    },\n    async observeCategoriesByBusiness(businessId: string, callback: (cats: Category[]) => void) {\n        const subscription = categoriesCollection\n            .query(\n                Q.where('business_id', businessId),\n                Q.where('deleted', false),\n                Q.sortBy('name', Q.asc),\n            )\n            .observe()\n            .subscribe(callback);\n\n        return () => subscription.unsubscribe();\n    },\n\n    async getCategoryWithProducts(categoryId: string) {\n        const category = await categoriesCollection.find(categoryId);\n        const products = await category.products.fetch();\n        return { category, products };\n    },\n};\n","size_bytes":2760},"app/(tabs)/inventory/adjust-inventory.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    ScrollView,\n    Alert,\n    ActivityIndicator,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router, useLocalSearchParams } from 'expo-router';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { inventoryService } from '@/db/services/inventoryService';\n\nexport default function AdjustInventoryScreen() {\n    const { inventoryId } = useLocalSearchParams<{ inventoryId: string }>();\n    const { selectedStore } = useBusiness();\n    const { user } = useAuth();\n    const [loading, setLoading] = useState(true);\n    const [inventory, setInventory] = useState<any>(null);\n    const [product, setProduct] = useState<any>(null);\n    const [adjustmentType, setAdjustmentType] = useState<'add' | 'remove'>('add');\n    const [quantity, setQuantity] = useState('');\n    const [costPerUnit, setCostPerUnit] = useState('');\n    const [notes, setNotes] = useState('');\n    const [batchType, setBatchType] = useState<'purchase' | 'adjustment' | 'return' | 'damage'>('purchase');\n\n    useEffect(() => {\n        loadInventory();\n    }, []);\n\n    const loadInventory = async () => {\n        if (!inventoryId) return;\n        \n        try {\n            const data = await inventoryService.getInventoryWithProduct(inventoryId);\n            setInventory(data.inventory);\n            setProduct(data.product);\n            setCostPerUnit(data.inventory.lastPurchasePrice?.toString() || '');\n        } catch (error) {\n            console.error('Error loading inventory:', error);\n            Alert.alert('Error', 'Failed to load inventory');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleSubmit = async () => {\n        if (!quantity || parseFloat(quantity) <= 0) {\n            Alert.alert('Error', 'Please enter a valid quantity');\n            return;\n        }\n\n        if (!user) {\n            Alert.alert('Error', 'User not found');\n            return;\n        }\n\n        setLoading(true);\n\n        try {\n            const quantityChange = adjustmentType === 'add' \n                ? parseFloat(quantity) \n                : -parseFloat(quantity);\n\n            await inventoryService.adjustInventoryWithBatch(\n                inventoryId,\n                quantityChange,\n                {\n                    userId: user.id,\n                    costPerUnit: parseFloat(costPerUnit) || 0,\n                    batchType,\n                    notes,\n                }\n            );\n\n            Alert.alert('Success', 'Inventory adjusted successfully!', [\n                {\n                    text: 'OK',\n                    onPress: () => router.back(),\n                },\n            ]);\n        } catch (error) {\n            console.error('Error adjusting inventory:', error);\n            Alert.alert('Error', 'Failed to adjust inventory');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    if (loading && !inventory) {\n        return (\n            <SafeAreaView className=\"flex-1 bg-white items-center justify-center\">\n                <ActivityIndicator size=\"large\" color=\"#3B82F6\" />\n            </SafeAreaView>\n        );\n    }\n\n    return (\n        <SafeAreaView className=\"flex-1 bg-white\">\n            <View className=\"px-4 py-3 border-b border-gray-200\">\n                <View className=\"flex-row items-center justify-between\">\n                    <TouchableOpacity onPress={() => router.back()}>\n                        <Text className=\"text-blue-600 text-base\">Cancel</Text>\n                    </TouchableOpacity>\n                    <Text className=\"text-lg font-semibold\">Adjust Inventory</Text>\n                    <TouchableOpacity onPress={handleSubmit} disabled={loading}>\n                        {loading ? (\n                            <ActivityIndicator size=\"small\" color=\"#3B82F6\" />\n                        ) : (\n                            <Text className=\"text-blue-600 text-base font-semibold\">Save</Text>\n                        )}\n                    </TouchableOpacity>\n                </View>\n            </View>\n\n            <ScrollView className=\"flex-1 px-4 py-4\">\n                {product && (\n                    <View className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n                        <Text className=\"text-lg font-semibold mb-1\">{product.name}</Text>\n                        <Text className=\"text-sm text-gray-600\">\n                            Current Stock: {inventory?.quantity || 0} {product.unit}\n                        </Text>\n                        <Text className=\"text-sm text-gray-600\">\n                            Price: ${inventory?.price?.toFixed(2) || '0.00'}\n                        </Text>\n                    </View>\n                )}\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-2\">Adjustment Type</Text>\n                    <View className=\"flex-row gap-3\">\n                        <TouchableOpacity\n                            className={`flex-1 py-3 rounded-lg ${\n                                adjustmentType === 'add' ? 'bg-green-600' : 'bg-gray-200'\n                            }`}\n                            onPress={() => setAdjustmentType('add')}\n                        >\n                            <Text className={`text-center font-semibold ${\n                                adjustmentType === 'add' ? 'text-white' : 'text-gray-700'\n                            }`}>\n                                Add Stock\n                            </Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity\n                            className={`flex-1 py-3 rounded-lg ${\n                                adjustmentType === 'remove' ? 'bg-red-600' : 'bg-gray-200'\n                            }`}\n                            onPress={() => setAdjustmentType('remove')}\n                        >\n                            <Text className={`text-center font-semibold ${\n                                adjustmentType === 'remove' ? 'text-white' : 'text-gray-700'\n                            }`}>\n                                Remove Stock\n                            </Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-2\">Reason</Text>\n                    <View className=\"flex-row flex-wrap gap-2\">\n                        {['purchase', 'adjustment', 'return', 'damage'].map((type) => (\n                            <TouchableOpacity\n                                key={type}\n                                className={`px-4 py-2 rounded-full ${\n                                    batchType === type ? 'bg-blue-600' : 'bg-gray-200'\n                                }`}\n                                onPress={() => setBatchType(type as any)}\n                            >\n                                <Text className={`capitalize ${\n                                    batchType === type ? 'text-white' : 'text-gray-700'\n                                }`}>\n                                    {type}\n                                </Text>\n                            </TouchableOpacity>\n                        ))}\n                    </View>\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Quantity *</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={quantity}\n                        onChangeText={setQuantity}\n                        placeholder=\"Enter quantity\"\n                        keyboardType=\"numeric\"\n                    />\n                </View>\n\n                {(batchType === 'purchase' || adjustmentType === 'add') && (\n                    <View className=\"mb-4\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Cost Per Unit</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                            value={costPerUnit}\n                            onChangeText={setCostPerUnit}\n                            placeholder=\"0.00\"\n                            keyboardType=\"decimal-pad\"\n                        />\n                    </View>\n                )}\n\n                <View className=\"mb-6\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Notes</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={notes}\n                        onChangeText={setNotes}\n                        placeholder=\"Add notes (optional)\"\n                        multiline\n                        numberOfLines={3}\n                        textAlignVertical=\"top\"\n                    />\n                </View>\n\n                {quantity && parseFloat(quantity) > 0 && (\n                    <View className=\"p-4 bg-blue-50 rounded-lg\">\n                        <Text className=\"text-sm text-gray-700\">\n                            New Stock Level: {' '}\n                            <Text className=\"font-semibold\">\n                                {adjustmentType === 'add'\n                                    ? (inventory?.quantity || 0) + parseFloat(quantity)\n                                    : (inventory?.quantity || 0) - parseFloat(quantity)\n                                }{' '}\n                                {product?.unit}\n                            </Text>\n                        </Text>\n                    </View>\n                )}\n            </ScrollView>\n        </SafeAreaView>\n    );\n}\n","size_bytes":9953},"db/models/inventory_batches.ts":{"content":"import { Model, Relation } from '@nozbe/watermelondb';\nimport { date, field, readonly, relation, text } from '@nozbe/watermelondb/decorators';\nimport Inventory from './inventory';\nimport Product from './products';\nimport Store from './stores';\nimport User from './users';\n\nexport default class InventoryBatch extends Model {\n    static table = 'inventory_batches';\n    static associations = {\n        inventory: { type: 'belongs_to' as const, key: 'inventory_id' },\n        products: { type: 'belongs_to' as const, key: 'product_id' },\n        stores: { type: 'belongs_to' as const, key: 'store_id' },\n        users: { type: 'belongs_to' as const, key: 'user_id' },\n    };\n\n    @field('external_id') externalId!: string;\n    @field('inventory_id') inventoryId!: string;\n    @field('product_id') productId!: string;\n    @field('store_id') storeId!: string;\n    @field('user_id') userId!: string;\n    @field('quantity_change') quantityChange!: number;\n    @field('quantity_before') quantityBefore!: number;\n    @field('quantity_after') quantityAfter!: number;\n    @field('cost_per_unit') costPerUnit!: number;\n    @text('batch_type') batchType!: 'purchase' | 'sale' | 'adjustment' | 'return' | 'damage';\n    @field('reference_id') referenceId!: string;\n    @text('notes') notes!: string;\n    @readonly @date('created_at') createdAt!: Date;\n\n    @relation('inventory', 'inventory_id') inventory!: Relation<Inventory>;\n    @relation('products', 'product_id') product!: Relation<Product>;\n    @relation('stores', 'store_id') store!: Relation<Store>;\n    @relation('users', 'user_id') user!: Relation<User>;\n}\n","size_bytes":1604},"db/services/productService.ts":{"content":"import { Q } from '@nozbe/watermelondb';\nimport Product from '../models/products';\nimport { database, productsCollection } from '..';\n\nexport const productService = {\n    async createProduct(data: {\n        businessId: string;\n        categoryId: string;\n        name: string;\n        cost?: number;\n        barcode?: string;\n        description?: string;\n        unit?: string;\n        status?: string;\n    }) {\n        const newProduct = await database.write(async () => {\n            return await productsCollection.create((product) => {\n                product.externalId = `prod_${Date.now()}`;\n                product.businessId = data.businessId;\n                product.categoryId = data.categoryId;\n                product.name = data.name;\n                // product.cost = data.cost || 0;\n                product.barcode = data.barcode || '';\n                product.description = data.description || '';\n                product.unit = data.unit || 'pcs';\n                product.status = data.status || 'active';\n                product.deleted = false;\n            });\n        });\n\n        console.log('New Product:', newProduct);\n        return newProduct;\n    },\n\n    async updateProduct(\n        productId: string,\n        updates: Partial<{\n            name: string;\n            categoryId: string;\n            cost: number;\n            barcode: string;\n            description: string;\n            unit: string;\n            status: string;\n        }>,\n    ) {\n        const product = await database.collections.get<Product>('products').find(productId);\n\n        return await database.write(async () => {\n            return await product.update((p) => {\n                if (updates.name !== undefined) p.name = updates.name;\n                if (updates.categoryId !== undefined) p.categoryId = updates.categoryId;\n                // if (updates.cost !== undefined) p.cost = updates.cost;\n                if (updates.barcode !== undefined) p.barcode = updates.barcode;\n                if (updates.description !== undefined) p.description = updates.description;\n                if (updates.unit !== undefined) p.unit = updates.unit;\n                if (updates.status !== undefined) p.status = updates.status;\n            });\n        });\n    },\n\n    async deleteProduct(productId: string) {\n        const product = await productsCollection.find(productId);\n\n        return await database.write(async () => {\n            return await product.update((p) => {\n                p.deleted = true;\n                p.status = 'inactive';\n            });\n        });\n    },\n\n    async getProductById(productId: string) {\n        return await productsCollection.find(productId);\n    },\n\n    async getProductsByBusiness(businessId: string) {\n        return await productsCollection\n            .query(\n                Q.where('business_id', businessId),\n                Q.where('deleted', false),\n                Q.sortBy('created_at', Q.desc),\n            )\n            .fetch();\n    },\n\n    async getProductsByCategory(categoryId: string) {\n        return await productsCollection\n            .query(\n                Q.where('category_id', categoryId),\n                Q.where('deleted', false),\n                Q.sortBy('name', Q.asc),\n            )\n            .fetch();\n    },\n\n    async searchProducts(businessId: string, searchTerm: string) {\n        return await productsCollection\n            .query(\n                Q.where('business_id', businessId),\n                Q.where('deleted', false),\n                Q.or(\n                    Q.where('name', Q.like(`%${Q.sanitizeLikeString(searchTerm)}%`)),\n                    Q.where('barcode', Q.like(`%${Q.sanitizeLikeString(searchTerm)}%`)),\n                ),\n                Q.sortBy('name', Q.asc),\n            )\n            .fetch();\n    },\n\n    async getProductWithCategory(productId: string) {\n        const product = await productsCollection.find(productId);\n        const category = await product.category.fetch();\n        return { product, category };\n    },\n};\n","size_bytes":4035},"db/services/salesService.ts":{"content":"import { Q } from '@nozbe/watermelondb';\nimport {\n    customersCollection,\n    database,\n    productsCollection,\n    saleItemsCollection,\n    salesCollection,\n} from '..';\nimport { inventoryService } from './inventoryService';\n\nexport const salesService = {\n    async createSale(\n        saleData: {\n            storeId: string;\n            userId: string;\n            customerId?: string;\n            subtotal: number;\n            discountAmount?: number;\n            discountPercentage?: number;\n            totalAmount: number;\n            paymentMethod: string;\n            onCredit: boolean;\n        },\n        items: {\n            productId: string;\n            quantity: number;\n            unitPrice: number;\n            totalPrice: number;\n        }[],\n    ) {\n        return await database.write(async () => {\n            const sale = await salesCollection.create((s) => {\n                s.externalId = `sale_${Date.now()}`;\n                s.storeId = saleData.storeId;\n                s.userId = saleData.userId;\n                s.customerId = saleData.customerId || '';\n                s.subtotal = saleData.subtotal;\n                s.discountAmount = saleData.discountAmount || 0;\n                s.discountPercentage = saleData.discountPercentage || 0;\n                s.totalAmount = saleData.totalAmount;\n                s.paymentMethod = saleData.paymentMethod;\n                s.onCredit = saleData.onCredit;\n                s.status = 'pending';\n            });\n\n            for (const item of items) {\n                await saleItemsCollection.create((saleItem) => {\n                    saleItem.externalId = `item_${Date.now()}_${Math.random()}`;\n                    saleItem.saleId = sale.id;\n                    saleItem.productId = item.productId;\n                    saleItem.quantity = item.quantity;\n                    saleItem.unitPrice = item.unitPrice;\n                    saleItem.totalPrice = item.totalPrice;\n                });\n            }\n\n            return sale;\n        });\n    },\n\n    async completeSale(saleId: string, userId: string) {\n        const sale = await salesCollection.find(saleId);\n        const saleItems = await sale.items.fetch();\n\n        return await database.write(async () => {\n            for (const item of saleItems) {\n                const inventory = await inventoryService.getInventoryByProduct(\n                    item.productId,\n                    sale.storeId,\n                );\n\n                if (inventory) {\n                    await inventoryService.adjustInventoryWithBatch(inventory.id, -item.quantity, {\n                        userId,\n                        batchType: 'sale',\n                        referenceId: saleId,\n                        notes: `Sale completed - ${item.quantity} units sold`,\n                    });\n                }\n            }\n\n            await sale.markAsCompleted();\n\n            if (sale.onCredit && sale.customerId) {\n                const customer = await customersCollection.find(sale.customerId);\n\n                await customer.update((c: any) => {\n                    c.currentBalance = (c.currentBalance || 0) + sale.totalAmount;\n                });\n            }\n\n            return sale;\n        });\n    },\n\n    async getSaleById(saleId: string) {\n        return await salesCollection.find(saleId);\n    },\n\n    async getSalesByStore(storeId: string, limit: number = 100) {\n        return await salesCollection\n            .query(Q.where('store_id', storeId), Q.sortBy('created_at', Q.desc), Q.take(limit))\n            .fetch();\n    },\n\n    async getSalesByDateRange(storeId: string, startDate: Date, endDate: Date) {\n        return await salesCollection\n            .query(\n                Q.where('store_id', storeId),\n                Q.where('created_at', Q.between(startDate.getTime(), endDate.getTime())),\n                Q.sortBy('created_at', Q.desc),\n            )\n            .fetch();\n    },\n\n    async getSalesByCustomer(customerId: string) {\n        return await salesCollection\n            .query(Q.where('customer_id', customerId), Q.sortBy('created_at', Q.desc))\n            .fetch();\n    },\n\n    async getCreditSales(storeId: string) {\n        return await salesCollection\n            .query(\n                Q.where('store_id', storeId),\n                Q.where('on_credit', true),\n                Q.sortBy('created_at', Q.desc),\n            )\n            .fetch();\n    },\n\n    async getSaleWithItems(saleId: string) {\n        const sale = await salesCollection.find(saleId);\n        const items = await sale.items.fetch();\n\n        const itemsWithProducts = await Promise.all(\n            items.map(async (item) => {\n                const product = await productsCollection.find(item.productId);\n                return { item, product };\n            }),\n        );\n\n        return { sale, items: itemsWithProducts };\n    },\n\n    async getTodaySales(storeId: string) {\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        const tomorrow = new Date(today);\n        tomorrow.setDate(tomorrow.getDate() + 1);\n\n        return await this.getSalesByDateRange(storeId, today, tomorrow);\n    },\n\n    async getSalesStats(storeId: string, startDate: Date, endDate: Date) {\n        const sales = await this.getSalesByDateRange(storeId, startDate, endDate);\n\n        const stats = sales.reduce(\n            (acc, sale) => {\n                acc.totalSales += 1;\n                acc.totalRevenue += sale.totalAmount;\n                acc.totalDiscount += sale.discountAmount || 0;\n                if (sale.onCredit) {\n                    acc.creditSales += 1;\n                    acc.creditAmount += sale.totalAmount;\n                }\n                if (sale.status === 'completed') {\n                    acc.completedSales += 1;\n                }\n                return acc;\n            },\n            {\n                totalSales: 0,\n                completedSales: 0,\n                totalRevenue: 0,\n                totalDiscount: 0,\n                creditSales: 0,\n                creditAmount: 0,\n            },\n        );\n\n        return stats;\n    },\n};\n","size_bytes":6121},"db/services/customerService.ts":{"content":"import { Q } from '@nozbe/watermelondb';\nimport { customersCollection, database } from '..';\n\nexport const customerService = {\n    async createCustomer(data: {\n        businessId: string;\n        name: string;\n        phone?: string;\n        email?: string;\n        creditLimit?: number;\n    }) {\n        return await database.write(async () => {\n            return await customersCollection.create((customer) => {\n                customer.externalId = `cust_${data.name}_${Date.now()}`;\n                customer.businessId = data.businessId;\n                customer.name = data.name;\n                customer.phone = data.phone || '';\n                customer.email = data.email || '';\n                customer.creditLimit = data.creditLimit || 0;\n                customer.currentBalance = 0;\n                customer.reputationScore = 100;\n                customer.deleted = false;\n            });\n        });\n    },\n\n    async updateCustomer(\n        customerId: string,\n        updates: Partial<{\n            name: string;\n            phone: string;\n            email: string;\n            creditLimit: number;\n            reputationScore: number;\n        }>,\n    ) {\n        const customer = await customersCollection.find(customerId);\n\n        return await database.write(async () => {\n            return await customer.update((c) => {\n                if (updates.name !== undefined) c.name = updates.name;\n                if (updates.phone !== undefined) c.phone = updates.phone;\n                if (updates.email !== undefined) c.email = updates.email;\n                if (updates.creditLimit !== undefined) c.creditLimit = updates.creditLimit;\n                if (updates.reputationScore !== undefined)\n                    c.reputationScore = updates.reputationScore;\n            });\n        });\n    },\n\n    async recordPayment(customerId: string, amount: number) {\n        const customer = await customersCollection.find(customerId);\n\n        return await database.write(async () => {\n            return await customer.update((c) => {\n                c.currentBalance = Math.max(0, (c.currentBalance || 0) - amount);\n            });\n        });\n    },\n\n    async deleteCustomer(customerId: string) {\n        const customer = await customersCollection.find(customerId);\n\n        return await database.write(async () => {\n            return await customer.update((c) => {\n                c.deleted = true;\n            });\n        });\n    },\n\n    async getCustomerById(customerId: string) {\n        return await customersCollection.find(customerId);\n    },\n\n    async getCustomersByBusiness(businessId: string) {\n        return await customersCollection\n            .query(\n                Q.where('business_id', businessId),\n                Q.where('deleted', false),\n                Q.sortBy('name', Q.asc),\n            )\n            .fetch();\n    },\n\n    async searchCustomers(businessId: string, searchTerm: string) {\n        return await customersCollection\n            .query(\n                Q.where('business_id', businessId),\n                Q.where('deleted', false),\n                Q.or(\n                    Q.where('name', Q.like(`%${Q.sanitizeLikeString(searchTerm)}%`)),\n                    Q.where('phone', Q.like(`%${Q.sanitizeLikeString(searchTerm)}%`)),\n                ),\n                Q.sortBy('name', Q.asc),\n            )\n            .fetch();\n    },\n\n    async getCustomersWithCredit(businessId: string) {\n        const customers = await customersCollection\n            .query(Q.where('business_id', businessId), Q.where('deleted', false))\n            .fetch();\n\n        return customers.filter((c) => (c.currentBalance || 0) > 0);\n    },\n\n    async getCustomerWithSales(customerId: string) {\n        const customer = await customersCollection.find(customerId);\n        const sales = await customer.sales.fetch();\n        return { customer, sales };\n    },\n};\n","size_bytes":3893},"hooks/useInventoryData.ts":{"content":"import { useBusiness } from '@/contexts/BusinessContext';\nimport { inventoryCollection } from '@/db';\nimport { categoryService } from '@/db/services/categoryService';\nimport { CategoryItem, InventoryViewItem } from '@/types';\nimport { Q } from '@nozbe/watermelondb';\nimport { useEffect, useMemo, useState } from 'react';\n\nexport function useInventoryData(): {\n    inventory: InventoryViewItem[];\n    categories: CategoryItem[];\n    rawCategories: CategoryItem[];\n    loading: boolean;\n    refreshinvetoryData: () => Promise<void>;\n} {\n    const { selectedStore, selectedBusiness } = useBusiness();\n    const [inventory, setInventory] = useState<InventoryViewItem[]>([]);\n    const [rawCategories, setRawCategories] = useState<CategoryItem[]>([]);\n    const [loading, setLoading] = useState(true);\n\n    // Subscribe to inventory changes\n    useEffect(() => {\n        if (!selectedStore) {\n            setLoading(false);\n            return;\n        }\n\n        const subscription = inventoryCollection\n            .query(Q.where('store_id', selectedStore.id))\n            .observeWithColumns(['quantity', 'price', 'min_stock', 'max_stock', 'location'])\n            .subscribe(async (invData) => {\n                try {\n                    const inventoryWithDetails = await Promise.all(\n                        invData.map(async (inv: any) => {\n                            const product = await inv.product.fetch();\n                            const category = await product.category.fetch();\n\n                            const viewItem: InventoryViewItem = {\n                                id: inv.id,\n                                productId: product.id,\n                                name: product.name,\n                                category: category.name,\n                                categoryId: category.id,\n                                categoryIcon: category.icon,\n                                categoryColor: category.color,\n                                quantity: inv.quantity || 0,\n                                minStock: inv.minStock || 0,\n                                maxStock: inv.maxStock || 100,\n                                price: inv.price || 0,\n                                cost: inv.weightedAvgCost || product.cost || 0,\n                                unit: product.unit || 'pcs',\n                                barcode: product.barcode || '',\n                                location: inv.location || '',\n                                lastUpdated: inv.lastUpdated || new Date(),\n                            };\n\n                            return viewItem;\n                        }),\n                    );\n\n                    setInventory(inventoryWithDetails);\n                    setLoading(false);\n                } catch (error) {\n                    console.error('Error processing inventory data:', error);\n                    setLoading(false);\n                }\n            });\n\n        return () => subscription.unsubscribe();\n    }, [selectedStore]);\n\n    // Subscribe to category changes\n    useEffect(() => {\n        if (!selectedBusiness) {\n            // clear categories if no business selected\n            setRawCategories([]);\n            return;\n        }\n        const businessId = selectedBusiness.id;\n        // Capture the id to ensure it's non-null within async callbacks\n\n        if (!businessId) {\n            return;\n        }\n\n        let cancelled = false;\n        let subscription: any | undefined;\n\n        async function startSubscription() {\n            try {\n                subscription = await categoryService.observeCategoriesByBusiness(\n                    businessId,\n                    (catData: any[]) => {\n                        if (cancelled) return;\n                        const mapped: CategoryItem[] = catData.map((cat: any) => ({\n                            id: cat.id,\n                            name: cat.name,\n                            icon: cat.icon,\n                            color: cat.color,\n                            count: 0,\n                        }));\n\n                        setRawCategories(mapped);\n                    },\n                );\n            } catch (err) {\n                // handle or log error if observe fails\n                console.error('Failed to observe categories:', err);\n            }\n        }\n\n        startSubscription();\n\n        return () => {\n            cancelled = true;\n            if (subscription?.unsubscribe) {\n                subscription.unsubscribe();\n            }\n        };\n    }, [selectedBusiness, selectedBusiness?.id]);\n\n    // Calculate categories with counts based on current inventory\n    const categories = useMemo(() => {\n        const categoriesWithCounts: CategoryItem[] = rawCategories.map((cat) => ({\n            ...cat,\n            count: inventory.filter((item) => item.categoryId === cat.id).length,\n        }));\n\n        const allCategory: CategoryItem = {\n            id: 'all',\n            name: 'All',\n            icon: '📋',\n            color: 'bg-gray-600',\n            count: inventory.length,\n        };\n\n        return [allCategory, ...categoriesWithCounts];\n    }, [rawCategories, inventory]);\n\n    const refreshinvetoryData = async () => {\n        if (!selectedStore) {\n            return;\n        }\n\n        setLoading(true);\n        \n        try {\n            const invData = await inventoryCollection\n                .query(Q.where('store_id', selectedStore.id))\n                .fetch();\n\n            const inventoryWithDetails = await Promise.all(\n                invData.map(async (inv: any) => {\n                    const product = await inv.product.fetch();\n                    const category = await product.category.fetch();\n\n                    const viewItem: InventoryViewItem = {\n                        id: inv.id,\n                        productId: product.id,\n                        name: product.name,\n                        category: category.name,\n                        categoryId: category.id,\n                        categoryIcon: category.icon,\n                        categoryColor: category.color,\n                        quantity: inv.quantity || 0,\n                        minStock: inv.minStock || 0,\n                        maxStock: inv.maxStock || 100,\n                        price: inv.price || 0,\n                        cost: inv.weightedAvgCost || product.cost || 0,\n                        unit: product.unit || 'pcs',\n                        barcode: product.barcode || '',\n                        location: inv.location || '',\n                        lastUpdated: inv.lastUpdated || new Date(),\n                    };\n\n                    return viewItem;\n                }),\n            );\n\n            setInventory(inventoryWithDetails);\n        } catch (error) {\n            console.error('Error refreshing inventory data:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return {\n        inventory,\n        categories,\n        rawCategories,\n        loading,\n        refreshinvetoryData,\n    };\n}\n","size_bytes":7073},"app/(tabs)/checkout/complete-sale.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    TouchableOpacity,\n    ScrollView,\n    TextInput,\n    Alert,\n    ActivityIndicator,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router, useLocalSearchParams } from 'expo-router';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/hooks/useCart';\nimport { salesService } from '@/db/services/salesService';\nimport { customerService } from '@/db/services/customerService';\n\nexport default function CompleteSaleScreen() {\n    const { selectedStore, selectedBusiness } = useBusiness();\n    const { user } = useAuth();\n    const { globalCart, totalCartPrice, clearCart } = useCart();\n    const [loading, setLoading] = useState(false);\n    const [customers, setCustomers] = useState<any[]>([]);\n    const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\n    const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card' | 'mobile'>('cash');\n    const [onCredit, setOnCredit] = useState(false);\n    const [discount, setDiscount] = useState('0');\n    const [searchCustomer, setSearchCustomer] = useState('');\n\n    const subtotal = totalCartPrice;\n    const discountAmount = parseFloat(discount) || 0;\n    const totalAmount = Math.max(0, subtotal - discountAmount);\n\n    useEffect(() => {\n        loadCustomers();\n    }, [selectedBusiness]);\n\n    const loadCustomers = async () => {\n        if (!selectedBusiness) return;\n\n        try {\n            const custs = await customerService.getCustomersByBusiness(selectedBusiness.id);\n            setCustomers(custs);\n        } catch (error) {\n            console.error('Error loading customers:', error);\n        }\n    };\n\n    const handleCompleteSale = async () => {\n        if (globalCart.length === 0) {\n            Alert.alert('Error', 'Cart is empty');\n            return;\n        }\n\n        if (onCredit && !selectedCustomer) {\n            Alert.alert('Error', 'Please select a customer for credit sale');\n            return;\n        }\n\n        if (onCredit && selectedCustomer) {\n            const availableCredit = (selectedCustomer.creditLimit || 0) - (selectedCustomer.currentBalance || 0);\n            if (totalAmount > availableCredit) {\n                Alert.alert(\n                    'Credit Limit Exceeded',\n                    `Customer has ${availableCredit.toFixed(2)} available credit. Sale amount is ${totalAmount.toFixed(2)}`,\n                    [{ text: 'OK' }]\n                );\n                return;\n            }\n        }\n\n        if (!selectedStore || !user) {\n            Alert.alert('Error', 'Missing store or user information');\n            return;\n        }\n\n        setLoading(true);\n\n        try {\n            const saleItems = globalCart.map(item => ({\n                productId: item.id,\n                quantity: item.quantity,\n                unitPrice: item.price,\n                totalPrice: item.price * item.quantity,\n            }));\n\n            const sale = await salesService.createSale(\n                {\n                    storeId: selectedStore.id,\n                    userId: user.id,\n                    customerId: selectedCustomer?.id,\n                    subtotal,\n                    discountAmount,\n                    discountPercentage: subtotal > 0 ? (discountAmount / subtotal) * 100 : 0,\n                    totalAmount,\n                    paymentMethod,\n                    onCredit,\n                },\n                saleItems\n            );\n\n            await salesService.completeSale(sale.id, user.id);\n\n            clearCart();\n\n            Alert.alert(\n                'Success',\n                `Sale completed successfully!\\nTotal: $${totalAmount.toFixed(2)}`,\n                [\n                    {\n                        text: 'OK',\n                        onPress: () => router.replace('/(tabs)/checkout'),\n                    },\n                ]\n            );\n        } catch (error) {\n            console.error('Error completing sale:', error);\n            Alert.alert('Error', 'Failed to complete sale');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const filteredCustomers = searchCustomer\n        ? customers.filter(c => \n            c.name.toLowerCase().includes(searchCustomer.toLowerCase()) ||\n            (c.phone && c.phone.includes(searchCustomer))\n          )\n        : customers;\n\n    return (\n        <SafeAreaView className=\"flex-1 bg-white\">\n            <View className=\"px-4 py-3 border-b border-gray-200\">\n                <View className=\"flex-row items-center justify-between\">\n                    <TouchableOpacity onPress={() => router.back()}>\n                        <Text className=\"text-blue-600 text-base\">Cancel</Text>\n                    </TouchableOpacity>\n                    <Text className=\"text-lg font-semibold\">Complete Sale</Text>\n                    <TouchableOpacity onPress={handleCompleteSale} disabled={loading}>\n                        {loading ? (\n                            <ActivityIndicator size=\"small\" color=\"#3B82F6\" />\n                        ) : (\n                            <Text className=\"text-blue-600 text-base font-semibold\">Complete</Text>\n                        )}\n                    </TouchableOpacity>\n                </View>\n            </View>\n\n            <ScrollView className=\"flex-1 px-4 py-4\">\n                <View className=\"mb-6\">\n                    <Text className=\"text-2xl font-bold mb-2\">Total: ${totalAmount.toFixed(2)}</Text>\n                    <Text className=\"text-sm text-gray-600\">Subtotal: ${subtotal.toFixed(2)}</Text>\n                    {discountAmount > 0 && (\n                        <Text className=\"text-sm text-gray-600\">Discount: -${discountAmount.toFixed(2)}</Text>\n                    )}\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-2\">Discount Amount</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={discount}\n                        onChangeText={setDiscount}\n                        placeholder=\"0.00\"\n                        keyboardType=\"decimal-pad\"\n                    />\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-2\">Payment Method</Text>\n                    <View className=\"flex-row gap-2\">\n                        {['cash', 'card', 'mobile'].map((method) => (\n                            <TouchableOpacity\n                                key={method}\n                                className={`flex-1 py-3 rounded-lg ${\n                                    paymentMethod === method ? 'bg-blue-600' : 'bg-gray-200'\n                                }`}\n                                onPress={() => setPaymentMethod(method as any)}\n                            >\n                                <Text className={`text-center font-semibold capitalize ${\n                                    paymentMethod === method ? 'text-white' : 'text-gray-700'\n                                }`}>\n                                    {method}\n                                </Text>\n                            </TouchableOpacity>\n                        ))}\n                    </View>\n                </View>\n\n                <View className=\"mb-4\">\n                    <TouchableOpacity\n                        className=\"flex-row items-center py-3\"\n                        onPress={() => setOnCredit(!onCredit)}\n                    >\n                        <View className={`w-6 h-6 rounded border-2 mr-3 items-center justify-center ${\n                            onCredit ? 'bg-blue-600 border-blue-600' : 'border-gray-300'\n                        }`}>\n                            {onCredit && <Text className=\"text-white font-bold\">✓</Text>}\n                        </View>\n                        <Text className=\"text-base\">Sell on Credit</Text>\n                    </TouchableOpacity>\n                </View>\n\n                {onCredit && (\n                    <View className=\"mb-6\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-2\">Select Customer</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-2 mb-2\"\n                            value={searchCustomer}\n                            onChangeText={setSearchCustomer}\n                            placeholder=\"Search customers...\"\n                        />\n                        <ScrollView className=\"max-h-48 border border-gray-300 rounded-lg\">\n                            {filteredCustomers.map((customer) => (\n                                <TouchableOpacity\n                                    key={customer.id}\n                                    className={`p-3 border-b border-gray-200 ${\n                                        selectedCustomer?.id === customer.id ? 'bg-blue-50' : ''\n                                    }`}\n                                    onPress={() => setSelectedCustomer(customer)}\n                                >\n                                    <Text className=\"font-medium\">{customer.name}</Text>\n                                    <Text className=\"text-sm text-gray-600\">\n                                        Credit: ${((customer.creditLimit || 0) - (customer.currentBalance || 0)).toFixed(2)} available\n                                    </Text>\n                                </TouchableOpacity>\n                            ))}\n                        </ScrollView>\n                    </View>\n                )}\n\n                <View className=\"mb-6\">\n                    <Text className=\"text-base font-semibold mb-2\">Cart Items ({globalCart.length})</Text>\n                    {globalCart.map((item) => (\n                        <View key={item.id} className=\"flex-row justify-between py-2 border-b border-gray-200\">\n                            <Text className=\"flex-1\">{item.name}</Text>\n                            <Text>{item.quantity} × ${item.price.toFixed(2)}</Text>\n                            <Text className=\"ml-3 font-semibold\">${(item.quantity * item.price).toFixed(2)}</Text>\n                        </View>\n                    ))}\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n}\n","size_bytes":10524},"app/(tabs)/inventory/add-product.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    ScrollView,\n    ActivityIndicator,\n    Alert,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router } from 'expo-router';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { productService } from '@/db/services/productService';\nimport { categoryService } from '@/db/services/categoryService';\nimport { inventoryService } from '@/db/services/inventoryService';\nimport { database } from '@/db/index.web';\n\nexport default function AddProductScreen() {\n    const { selectedBusiness, selectedStore } = useBusiness();\n    const { user } = useAuth();\n    const [loading, setLoading] = useState(false);\n    const [categories, setCategories] = useState<any[]>([]);\n    \n    const [formData, setFormData] = useState({\n        name: '',\n        categoryId: '',\n        cost: '',\n        price: '',\n        barcode: '',\n        description: '',\n        unit: 'pcs',\n        initialQuantity: '',\n        minStock: '',\n        maxStock: '',\n        location: '',\n    });\n\n    useEffect(() => {\n        loadCategories();\n    }, []);\n\n    const loadCategories = async () => {\n        if (!selectedBusiness) return;\n        \n        try {\n            const cats = await categoryService.getCategoriesByBusiness(selectedBusiness.id);\n            setCategories(cats);\n            \n            if (cats.length > 0 && !formData.categoryId) {\n                setFormData(prev => ({ ...prev, categoryId: cats[0].id }));\n            }\n        } catch (error) {\n            console.error('Error loading categories:', error);\n        }\n    };\n\n    const handleSubmit = async () => {\n        if (!formData.name.trim()) {\n            Alert.alert('Error', 'Product name is required');\n            return;\n        }\n\n        if (!formData.categoryId) {\n            Alert.alert('Error', 'Please select a category');\n            return;\n        }\n\n        if (!formData.price || parseFloat(formData.price) <= 0) {\n            Alert.alert('Error', 'Please enter a valid price');\n            return;\n        }\n\n        if (!selectedBusiness || !selectedStore || !user) {\n            Alert.alert('Error', 'Missing business or store information');\n            return;\n        }\n\n        setLoading(true);\n\n        try {\n            const product = await productService.createProduct({\n                businessId: selectedBusiness.id,\n                categoryId: formData.categoryId,\n                name: formData.name,\n                cost: parseFloat(formData.cost) || 0,\n                barcode: formData.barcode,\n                description: formData.description,\n                unit: formData.unit || 'pcs',\n                status: 'active',\n            });\n\n            const inventory = await inventoryService.createInventory({\n                productId: product.id,\n                storeId: selectedStore.id,\n                quantity: 0,\n                minStock: parseFloat(formData.minStock) || 0,\n                maxStock: parseFloat(formData.maxStock) || 100,\n                price: parseFloat(formData.price),\n                wholeSalePrice: 0,\n                weightedAvgCost: parseFloat(formData.cost) || 0,\n                lastPurchasePrice: parseFloat(formData.cost) || 0,\n                location: formData.location,\n            });\n\n            if (formData.initialQuantity && parseFloat(formData.initialQuantity) > 0) {\n                await inventoryService.adjustInventoryWithBatch(\n                    inventory.id,\n                    parseFloat(formData.initialQuantity),\n                    {\n                        userId: user.id,\n                        costPerUnit: parseFloat(formData.cost) || 0,\n                        batchType: 'purchase',\n                        notes: 'Initial stock',\n                    }\n                );\n            }\n\n            Alert.alert('Success', 'Product added successfully!', [\n                {\n                    text: 'OK',\n                    onPress: () => router.back(),\n                },\n            ]);\n        } catch (error) {\n            console.error('Error creating product:', error);\n            Alert.alert('Error', 'Failed to create product');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <SafeAreaView className=\"flex-1 bg-white\">\n            <View className=\"px-4 py-3 border-b border-gray-200\">\n                <View className=\"flex-row items-center justify-between\">\n                    <TouchableOpacity onPress={() => router.back()}>\n                        <Text className=\"text-blue-600 text-base\">Cancel</Text>\n                    </TouchableOpacity>\n                    <Text className=\"text-lg font-semibold\">Add Product</Text>\n                    <TouchableOpacity\n                        onPress={handleSubmit}\n                        disabled={loading}\n                    >\n                        {loading ? (\n                            <ActivityIndicator size=\"small\" color=\"#3B82F6\" />\n                        ) : (\n                            <Text className=\"text-blue-600 text-base font-semibold\">Save</Text>\n                        )}\n                    </TouchableOpacity>\n                </View>\n            </View>\n\n            <ScrollView className=\"flex-1 px-4 py-4\">\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Product Name *</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={formData.name}\n                        onChangeText={(text) => setFormData(prev => ({ ...prev, name: text }))}\n                        placeholder=\"Enter product name\"\n                    />\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Category *</Text>\n                    <View className=\"border border-gray-300 rounded-lg\">\n                        {categories.map((cat) => (\n                            <TouchableOpacity\n                                key={cat.id}\n                                className={`px-3 py-3 border-b border-gray-200 ${\n                                    formData.categoryId === cat.id ? 'bg-blue-50' : ''\n                                }`}\n                                onPress={() => setFormData(prev => ({ ...prev, categoryId: cat.id }))}\n                            >\n                                <Text className={formData.categoryId === cat.id ? 'text-blue-600 font-medium' : ''}>\n                                    {cat.icon} {cat.name}\n                                </Text>\n                            </TouchableOpacity>\n                        ))}\n                    </View>\n                </View>\n\n                <View className=\"flex-row mb-4 gap-3\">\n                    <View className=\"flex-1\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Cost Price</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                            value={formData.cost}\n                            onChangeText={(text) => setFormData(prev => ({ ...prev, cost: text }))}\n                            placeholder=\"0.00\"\n                            keyboardType=\"decimal-pad\"\n                        />\n                    </View>\n                    <View className=\"flex-1\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Selling Price *</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                            value={formData.price}\n                            onChangeText={(text) => setFormData(prev => ({ ...prev, price: text }))}\n                            placeholder=\"0.00\"\n                            keyboardType=\"decimal-pad\"\n                        />\n                    </View>\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Barcode/SKU</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={formData.barcode}\n                        onChangeText={(text) => setFormData(prev => ({ ...prev, barcode: text }))}\n                        placeholder=\"Enter barcode or SKU\"\n                    />\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Unit</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={formData.unit}\n                        onChangeText={(text) => setFormData(prev => ({ ...prev, unit: text }))}\n                        placeholder=\"pcs, kg, liter, etc.\"\n                    />\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Initial Quantity</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={formData.initialQuantity}\n                        onChangeText={(text) => setFormData(prev => ({ ...prev, initialQuantity: text }))}\n                        placeholder=\"0\"\n                        keyboardType=\"numeric\"\n                    />\n                </View>\n\n                <View className=\"flex-row mb-4 gap-3\">\n                    <View className=\"flex-1\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Min Stock</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                            value={formData.minStock}\n                            onChangeText={(text) => setFormData(prev => ({ ...prev, minStock: text }))}\n                            placeholder=\"0\"\n                            keyboardType=\"numeric\"\n                        />\n                    </View>\n                    <View className=\"flex-1\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Max Stock</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                            value={formData.maxStock}\n                            onChangeText={(text) => setFormData(prev => ({ ...prev, maxStock: text }))}\n                            placeholder=\"100\"\n                            keyboardType=\"numeric\"\n                        />\n                    </View>\n                </View>\n\n                <View className=\"mb-4\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Location</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={formData.location}\n                        onChangeText={(text) => setFormData(prev => ({ ...prev, location: text }))}\n                        placeholder=\"Shelf, Aisle, etc.\"\n                    />\n                </View>\n\n                <View className=\"mb-6\">\n                    <Text className=\"text-sm font-medium text-gray-700 mb-1\">Description</Text>\n                    <TextInput\n                        className=\"border border-gray-300 rounded-lg px-3 py-2\"\n                        value={formData.description}\n                        onChangeText={(text) => setFormData(prev => ({ ...prev, description: text }))}\n                        placeholder=\"Product description (optional)\"\n                        multiline\n                        numberOfLines={3}\n                        textAlignVertical=\"top\"\n                    />\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n}\n","size_bytes":12154},"hooks/useCheckoutData.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { inventoryService } from '@/db/services/inventoryService';\nimport { categoryService } from '@/db/services/categoryService';\nimport { customerService } from '@/db/services/customerService';\n\nexport function useCheckoutData() {\n    const { selectedStore, selectedBusiness } = useBusiness();\n    const [products, setProducts] = useState<any[]>([]);\n    const [categories, setCategories] = useState<any[]>([]);\n    const [customers, setCustomers] = useState<any[]>([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadData();\n    }, [selectedStore, selectedBusiness]);\n\n    const loadData = async () => {\n        if (!selectedStore || !selectedBusiness) {\n            setLoading(false);\n            return;\n        }\n\n        try {\n            const [invData, catData, custData] = await Promise.all([\n                inventoryService.getInventoryByStore(selectedStore.id),\n                categoryService.getCategoriesByBusiness(selectedBusiness.id),\n                customerService.getCustomersByBusiness(selectedBusiness.id),\n            ]);\n\n            const productsWithDetails = await Promise.all(\n                invData\n                    .filter(inv => (inv.quantity || 0) > 0) \n                    .map(async (inv) => {\n                        const product = await inv.product.fetch();\n                        const category = await product.category.fetch();\n                        \n                        return {\n                            id: product.id,\n                            inventoryId: inv.id,\n                            name: product.name,\n                            category: category.name,\n                            categoryId: category.id,\n                            categoryIcon: category.icon,\n                            categoryColor: category.color,\n                            price: inv.price || 0,\n                            quantity: inv.quantity || 0,\n                            unit: product.unit || 'pcs',\n                            barcode: product.barcode || '',\n                        };\n                    })\n            );\n\n            setProducts(productsWithDetails);\n            setCategories(catData.map(cat => ({\n                id: cat.id,\n                name: cat.name,\n                icon: cat.icon,\n                color: cat.color,\n            })));\n            setCustomers(custData);\n        } catch (error) {\n            console.error('Error loading checkout data:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const refreshData = () => {\n        setLoading(true);\n        loadData();\n    };\n\n    return {\n        products,\n        categories,\n        customers,\n        loading,\n        refreshData,\n    };\n}\n","size_bytes":2865},"app/(tabs)/inventory/manage-categories.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    ScrollView,\n    Alert,\n    ActivityIndicator,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { router } from 'expo-router';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { categoryService } from '@/db/services/categoryService';\n\nexport default function ManageCategoriesScreen() {\n    const { selectedBusiness } = useBusiness();\n    const [categories, setCategories] = useState<any[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [showAddForm, setShowAddForm] = useState(false);\n    const [editingId, setEditingId] = useState<string | null>(null);\n    const [formData, setFormData] = useState({\n        name: '',\n        icon: '📦',\n        color: '#6B7280',\n    });\n\n    const icons = ['📦', '🍎', '🍔', '👕', '📱', '💊', '🏠', '🎮', '📚', '⚽'];\n    const colors = ['#EF4444', '#F59E0B', '#10B981', '#3B82F6', '#8B5CF6', '#EC4899', '#6B7280'];\n\n    useEffect(() => {\n        loadCategories();\n    }, []);\n\n    const loadCategories = async () => {\n        if (!selectedBusiness) return;\n        \n        try {\n            const cats = await categoryService.getCategoriesByBusiness(selectedBusiness.id);\n            setCategories(cats);\n        } catch (error) {\n            console.error('Error loading categories:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleSubmit = async () => {\n        if (!formData.name.trim()) {\n            Alert.alert('Error', 'Category name is required');\n            return;\n        }\n\n        if (!selectedBusiness) return;\n\n        try {\n            if (editingId) {\n                await categoryService.updateCategory(editingId, formData);\n                Alert.alert('Success', 'Category updated successfully');\n            } else {\n                await categoryService.createCategory({\n                    businessId: selectedBusiness.id,\n                    ...formData,\n                });\n                Alert.alert('Success', 'Category created successfully');\n            }\n            \n            setFormData({ name: '', icon: '📦', color: '#6B7280' });\n            setShowAddForm(false);\n            setEditingId(null);\n            loadCategories();\n        } catch (error) {\n            console.error('Error saving category:', error);\n            Alert.alert('Error', 'Failed to save category');\n        }\n    };\n\n    const handleEdit = (category: any) => {\n        setFormData({\n            name: category.name,\n            icon: category.icon,\n            color: category.color,\n        });\n        setEditingId(category.id);\n        setShowAddForm(true);\n    };\n\n    const handleDelete = (category: any) => {\n        Alert.alert(\n            'Delete Category',\n            `Are you sure you want to delete \"${category.name}\"?`,\n            [\n                { text: 'Cancel', style: 'cancel' },\n                {\n                    text: 'Delete',\n                    style: 'destructive',\n                    onPress: async () => {\n                        try {\n                            await categoryService.deleteCategory(category.id);\n                            loadCategories();\n                        } catch (error) {\n                            Alert.alert('Error', 'Failed to delete category');\n                        }\n                    },\n                },\n            ]\n        );\n    };\n\n    if (loading) {\n        return (\n            <SafeAreaView className=\"flex-1 bg-white items-center justify-center\">\n                <ActivityIndicator size=\"large\" color=\"#3B82F6\" />\n            </SafeAreaView>\n        );\n    }\n\n    return (\n        <SafeAreaView className=\"flex-1 bg-white\">\n            <View className=\"px-4 py-3 border-b border-gray-200\">\n                <View className=\"flex-row items-center justify-between\">\n                    <TouchableOpacity onPress={() => router.back()}>\n                        <Text className=\"text-blue-600 text-base\">Back</Text>\n                    </TouchableOpacity>\n                    <Text className=\"text-lg font-semibold\">Manage Categories</Text>\n                    <TouchableOpacity\n                        onPress={() => {\n                            setShowAddForm(!showAddForm);\n                            setEditingId(null);\n                            setFormData({ name: '', icon: '📦', color: '#6B7280' });\n                        }}\n                    >\n                        <Text className=\"text-blue-600 text-2xl\">{showAddForm ? '×' : '+'}</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n\n            <ScrollView className=\"flex-1 px-4 py-4\">\n                {showAddForm && (\n                    <View className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n                        <Text className=\"text-base font-semibold mb-3\">\n                            {editingId ? 'Edit Category' : 'New Category'}\n                        </Text>\n                        \n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-2 mb-3\"\n                            value={formData.name}\n                            onChangeText={(text) => setFormData(prev => ({ ...prev, name: text }))}\n                            placeholder=\"Category name\"\n                        />\n\n                        <Text className=\"text-sm font-medium text-gray-700 mb-2\">Select Icon</Text>\n                        <View className=\"flex-row flex-wrap gap-2 mb-3\">\n                            {icons.map((icon) => (\n                                <TouchableOpacity\n                                    key={icon}\n                                    className={`w-12 h-12 items-center justify-center rounded-lg ${\n                                        formData.icon === icon ? 'bg-blue-100' : 'bg-gray-200'\n                                    }`}\n                                    onPress={() => setFormData(prev => ({ ...prev, icon }))}\n                                >\n                                    <Text className=\"text-2xl\">{icon}</Text>\n                                </TouchableOpacity>\n                            ))}\n                        </View>\n\n                        <Text className=\"text-sm font-medium text-gray-700 mb-2\">Select Color</Text>\n                        <View className=\"flex-row flex-wrap gap-2 mb-4\">\n                            {colors.map((color) => (\n                                <TouchableOpacity\n                                    key={color}\n                                    className=\"w-12 h-12 rounded-lg\"\n                                    style={{\n                                        backgroundColor: color,\n                                        borderWidth: formData.color === color ? 3 : 0,\n                                        borderColor: '#000',\n                                    }}\n                                    onPress={() => setFormData(prev => ({ ...prev, color }))}\n                                />\n                            ))}\n                        </View>\n\n                        <TouchableOpacity\n                            className=\"bg-blue-600 rounded-lg py-3 items-center\"\n                            onPress={handleSubmit}\n                        >\n                            <Text className=\"text-white font-semibold\">\n                                {editingId ? 'Update' : 'Create'} Category\n                            </Text>\n                        </TouchableOpacity>\n                    </View>\n                )}\n\n                <View>\n                    {categories.map((category) => (\n                        <View\n                            key={category.id}\n                            className=\"flex-row items-center justify-between py-3 border-b border-gray-200\"\n                        >\n                            <View className=\"flex-row items-center flex-1\">\n                                <View\n                                    className=\"w-10 h-10 rounded-lg items-center justify-center mr-3\"\n                                    style={{ backgroundColor: category.color }}\n                                >\n                                    <Text className=\"text-xl\">{category.icon}</Text>\n                                </View>\n                                <Text className=\"text-base font-medium\">{category.name}</Text>\n                            </View>\n                            <View className=\"flex-row gap-3\">\n                                <TouchableOpacity onPress={() => handleEdit(category)}>\n                                    <Text className=\"text-blue-600\">Edit</Text>\n                                </TouchableOpacity>\n                                <TouchableOpacity onPress={() => handleDelete(category)}>\n                                    <Text className=\"text-red-600\">Delete</Text>\n                                </TouchableOpacity>\n                            </View>\n                        </View>\n                    ))}\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n}\n","size_bytes":9257},"components/inventory/AddProductModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    ScrollView,\n    ActivityIndicator,\n    Alert,\n    Modal,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useBusiness } from '@/contexts/BusinessContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { productService } from '@/db/services/productService';\nimport { categoryService } from '@/db/services/categoryService';\nimport { inventoryService } from '@/db/services/inventoryService';\n\ninterface AddProductModalProps {\n    visible: boolean;\n    onClose: () => void;\n    onProductAdded?: () => void;\n}\n\nexport const AddProductModal: React.FC<AddProductModalProps> = ({\n    visible,\n    onClose,\n    onProductAdded,\n}) => {\n    const { selectedBusiness, selectedStore } = useBusiness();\n    const { user } = useAuth();\n    const [loading, setLoading] = useState(false);\n    const [categories, setCategories] = useState<any[]>([]);\n    const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);\n\n    const [formData, setFormData] = useState({\n        name: '',\n        categoryId: '',\n        cost: '',\n        price: '',\n        barcode: '',\n        description: '',\n        unit: 'pcs',\n        initialQuantity: '',\n        minStock: '',\n        maxStock: '',\n        location: '',\n    });\n\n    useEffect(() => {\n        if (visible) {\n            loadCategories();\n        }\n    }, [visible]);\n\n    const loadCategories = async () => {\n        if (!selectedBusiness) return;\n\n        try {\n            const cats = await categoryService.getCategoriesByBusiness(selectedBusiness.id);\n            setCategories(cats);\n\n            if (cats.length > 0 && !formData.categoryId) {\n                setFormData((prev) => ({ ...prev, categoryId: cats[0].id }));\n            }\n        } catch (error) {\n            console.error('Error loading categories:', error);\n        }\n    };\n\n    const handleSubmit = async () => {\n        if (!formData.name.trim()) {\n            Alert.alert('Error', 'Product name is required');\n            return;\n        }\n\n        if (!formData.categoryId) {\n            Alert.alert('Error', 'Please select a category');\n            return;\n        }\n\n        if (!formData.price || parseFloat(formData.price) <= 0) {\n            Alert.alert('Error', 'Please enter a valid price');\n            return;\n        }\n\n        if (!selectedBusiness || !selectedStore || !user) {\n            Alert.alert('Error', 'Missing business or store information');\n            return;\n        }\n\n        setLoading(true);\n\n        try {\n            const product = await productService.createProduct({\n                businessId: selectedBusiness.id,\n                categoryId: formData.categoryId,\n                name: formData.name,\n                cost: parseFloat(formData.cost) || 0,\n                barcode: formData.barcode,\n                description: formData.description,\n                unit: formData.unit || 'pcs',\n                status: 'active',\n            });\n\n            const inventory = await inventoryService.createInventory({\n                productId: product.id,\n                storeId: selectedStore.id,\n                quantity: 0,\n                minStock: parseFloat(formData.minStock) || 0,\n                maxStock: parseFloat(formData.maxStock) || 100,\n                price: parseFloat(formData.price),\n                wholeSalePrice: 0,\n                weightedAvgCost: parseFloat(formData.cost) || 0,\n                lastPurchasePrice: parseFloat(formData.cost) || 0,\n                location: formData.location,\n            });\n\n            if (formData.initialQuantity && parseFloat(formData.initialQuantity) > 0) {\n                await inventoryService.adjustInventoryWithBatch(\n                    inventory.id,\n                    parseFloat(formData.initialQuantity),\n                    {\n                        userId: user.id,\n                        costPerUnit: parseFloat(formData.cost) || 0,\n                        batchType: 'purchase',\n                        notes: 'Initial stock',\n                    }\n                );\n            }\n\n            Alert.alert('Success', 'Product added successfully!');\n            resetForm();\n            onProductAdded?.();\n            onClose();\n        } catch (error) {\n            console.error('Error creating product:', error);\n            Alert.alert('Error', 'Failed to create product');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const resetForm = () => {\n        setFormData({\n            name: '',\n            categoryId: categories.length > 0 ? categories[0].id : '',\n            cost: '',\n            price: '',\n            barcode: '',\n            description: '',\n            unit: 'pcs',\n            initialQuantity: '',\n            minStock: '',\n            maxStock: '',\n            location: '',\n        });\n    };\n\n    const handleClose = () => {\n        resetForm();\n        onClose();\n    };\n\n    const selectedCategory = categories.find((cat) => cat.id === formData.categoryId);\n\n    return (\n        <Modal\n            visible={visible}\n            animationType=\"slide\"\n            presentationStyle=\"pageSheet\"\n            onRequestClose={handleClose}\n        >\n            <SafeAreaView className=\"flex-1 bg-white\">\n                <View className=\"flex-row justify-between items-center px-4 py-4 border-b border-gray-200\">\n                    <Text className=\"text-xl font-bold text-black\">Add New Product</Text>\n                    <TouchableOpacity onPress={handleClose}>\n                        <Ionicons name=\"close\" size={24} color=\"#666\" />\n                    </TouchableOpacity>\n                </View>\n\n                <ScrollView className=\"flex-1 px-4 py-6\" showsVerticalScrollIndicator={false}>\n                    <Text className=\"text-gray-600 text-center mb-6\">\n                        Create a new product in your inventory with all necessary details.\n                    </Text>\n\n                    <View className=\"mb-4\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">\n                            Product Name <Text className=\"text-red-500\">*</Text>\n                        </Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                            value={formData.name}\n                            onChangeText={(text) => setFormData((prev) => ({ ...prev, name: text }))}\n                            placeholder=\"Enter product name\"\n                        />\n                    </View>\n\n                    <View className=\"mb-4\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">\n                            Category <Text className=\"text-red-500\">*</Text>\n                        </Text>\n                        <TouchableOpacity\n                            className=\"border border-gray-300 rounded-lg px-3 py-3 flex-row justify-between items-center\"\n                            onPress={() => setShowCategoryDropdown(!showCategoryDropdown)}\n                        >\n                            <Text className={selectedCategory ? 'text-gray-900' : 'text-gray-400'}>\n                                {selectedCategory ? `${selectedCategory.icon} ${selectedCategory.name}` : 'Select category'}\n                            </Text>\n                            <Ionicons\n                                name={showCategoryDropdown ? 'chevron-up' : 'chevron-down'}\n                                size={20}\n                                color=\"#666\"\n                            />\n                        </TouchableOpacity>\n\n                        {showCategoryDropdown && (\n                            <View className=\"border border-gray-300 rounded-lg mt-2 overflow-hidden\">\n                                <ScrollView style={{ maxHeight: 200 }}>\n                                    {categories.map((cat) => (\n                                        <TouchableOpacity\n                                            key={cat.id}\n                                            className={`px-3 py-3 border-b border-gray-200 ${\n                                                formData.categoryId === cat.id ? 'bg-blue-50' : ''\n                                            }`}\n                                            onPress={() => {\n                                                setFormData((prev) => ({ ...prev, categoryId: cat.id }));\n                                                setShowCategoryDropdown(false);\n                                            }}\n                                        >\n                                            <Text\n                                                className={\n                                                    formData.categoryId === cat.id\n                                                        ? 'text-blue-600 font-medium'\n                                                        : 'text-gray-900'\n                                                }\n                                            >\n                                                {cat.icon} {cat.name}\n                                            </Text>\n                                        </TouchableOpacity>\n                                    ))}\n                                </ScrollView>\n                            </View>\n                        )}\n                    </View>\n\n                    <View className=\"flex-row mb-4 gap-3\">\n                        <View className=\"flex-1\">\n                            <Text className=\"text-sm font-medium text-gray-700 mb-1\">Cost Price</Text>\n                            <TextInput\n                                className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                                value={formData.cost}\n                                onChangeText={(text) => setFormData((prev) => ({ ...prev, cost: text }))}\n                                placeholder=\"0.00\"\n                                keyboardType=\"decimal-pad\"\n                            />\n                        </View>\n                        <View className=\"flex-1\">\n                            <Text className=\"text-sm font-medium text-gray-700 mb-1\">\n                                Selling Price <Text className=\"text-red-500\">*</Text>\n                            </Text>\n                            <TextInput\n                                className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                                value={formData.price}\n                                onChangeText={(text) => setFormData((prev) => ({ ...prev, price: text }))}\n                                placeholder=\"0.00\"\n                                keyboardType=\"decimal-pad\"\n                            />\n                        </View>\n                    </View>\n\n                    <View className=\"mb-4\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Barcode/SKU</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                            value={formData.barcode}\n                            onChangeText={(text) => setFormData((prev) => ({ ...prev, barcode: text }))}\n                            placeholder=\"Enter barcode or SKU\"\n                        />\n                    </View>\n\n                    <View className=\"mb-4\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Unit</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                            value={formData.unit}\n                            onChangeText={(text) => setFormData((prev) => ({ ...prev, unit: text }))}\n                            placeholder=\"pcs, kg, liter, etc.\"\n                        />\n                    </View>\n\n                    <View className=\"mb-4\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Initial Quantity</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                            value={formData.initialQuantity}\n                            onChangeText={(text) =>\n                                setFormData((prev) => ({ ...prev, initialQuantity: text }))\n                            }\n                            placeholder=\"0\"\n                            keyboardType=\"numeric\"\n                        />\n                    </View>\n\n                    <View className=\"flex-row mb-4 gap-3\">\n                        <View className=\"flex-1\">\n                            <Text className=\"text-sm font-medium text-gray-700 mb-1\">Min Stock</Text>\n                            <TextInput\n                                className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                                value={formData.minStock}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, minStock: text }))\n                                }\n                                placeholder=\"0\"\n                                keyboardType=\"numeric\"\n                            />\n                        </View>\n                        <View className=\"flex-1\">\n                            <Text className=\"text-sm font-medium text-gray-700 mb-1\">Max Stock</Text>\n                            <TextInput\n                                className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                                value={formData.maxStock}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, maxStock: text }))\n                                }\n                                placeholder=\"100\"\n                                keyboardType=\"numeric\"\n                            />\n                        </View>\n                    </View>\n\n                    <View className=\"mb-4\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Location</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                            value={formData.location}\n                            onChangeText={(text) => setFormData((prev) => ({ ...prev, location: text }))}\n                            placeholder=\"Shelf, Aisle, etc.\"\n                        />\n                    </View>\n\n                    <View className=\"mb-6\">\n                        <Text className=\"text-sm font-medium text-gray-700 mb-1\">Description</Text>\n                        <TextInput\n                            className=\"border border-gray-300 rounded-lg px-3 py-3\"\n                            value={formData.description}\n                            onChangeText={(text) =>\n                                setFormData((prev) => ({ ...prev, description: text }))\n                            }\n                            placeholder=\"Product description (optional)\"\n                            multiline\n                            numberOfLines={3}\n                            textAlignVertical=\"top\"\n                        />\n                    </View>\n                </ScrollView>\n\n                <View className=\"flex-row px-4 py-4 space-x-3 border-t border-gray-200\">\n                    <TouchableOpacity\n                        className=\"flex-1 bg-gray-200 rounded-xl py-4\"\n                        onPress={handleClose}\n                        disabled={loading}\n                    >\n                        <Text className=\"text-center font-semibold text-gray-700\">Cancel</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        className={`flex-1 rounded-xl py-4 ${\n                            formData.name && formData.categoryId && formData.price\n                                ? 'bg-black'\n                                : 'bg-gray-300'\n                        }`}\n                        onPress={handleSubmit}\n                        disabled={\n                            !formData.name || !formData.categoryId || !formData.price || loading\n                        }\n                    >\n                        {loading ? (\n                            <ActivityIndicator size=\"small\" color=\"#FFFFFF\" />\n                        ) : (\n                            <Text\n                                className={`text-center font-semibold ${\n                                    formData.name && formData.categoryId && formData.price\n                                        ? 'text-white'\n                                        : 'text-gray-500'\n                                }`}\n                            >\n                                Add Product\n                            </Text>\n                        )}\n                    </TouchableOpacity>\n                </View>\n            </SafeAreaView>\n        </Modal>\n    );\n};\n","size_bytes":17230},"components/inventory/modal/productModal.tsx":{"content":"import { Category } from '@/db';\nimport { CategoryData, CategoryItem, InventoryItemData, ProductData } from '@/types';\nimport { Ionicons } from '@expo/vector-icons';\nimport React, { useState } from 'react';\nimport {\n    ActivityIndicator,\n    Alert,\n    Modal,\n    ScrollView,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport FormInput from '../FormInput';\n\ninterface AddProductModalProps {\n    visible: boolean;\n    onClose: () => void;\n    onProductAdded?: () => void;\n    categories: CategoryItem[];\n    addCategory: (newCategoryData: CategoryData) => Promise<Category | undefined>;\n    loadingCategories: boolean;\n    refreshCategories: () => Promise<void>;\n    addProduct: (\n        newPoduct: ProductData,\n        newInventoryProductData: InventoryItemData,\n    ) => Promise<void>;\n}\n\nexport const ProductModal: React.FC<AddProductModalProps> = ({\n    visible,\n    onClose,\n    addCategory,\n    loadingCategories,\n    refreshCategories,\n    onProductAdded,\n    addProduct,\n    categories,\n}) => {\n    const [loading, setLoading] = useState(false);\n    const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);\n    const [showCreateCategory, setShowCreateCategory] = useState(false);\n    const [newCategoryData, setNewCategoryData] = useState({\n        name: '',\n        icon: '📦',\n        color: '#6B7280',\n    });\n\n    const [formData, setFormData] = useState({\n        name: '',\n        categoryId: '',\n        cost: '',\n        price: '',\n        wholeSalePrice: '',\n        barcode: '',\n        description: '',\n        unit: '',\n        quantity: '',\n        quantityPerUnit: '',\n        minStock: '',\n        maxStock: '',\n        location: '',\n    });\n\n    const handleCreateCategory = async () => {\n        try {\n            const newCategory = await addCategory(newCategoryData);\n            await refreshCategories();\n            if (!newCategory) {\n                Alert.alert('Error', 'no category created');\n                return;\n            }\n\n            setFormData((prev) => ({ ...prev, categoryId: newCategory.id }));\n            setShowCreateCategory(false);\n            setShowCategoryDropdown(false);\n            setNewCategoryData({ name: '', icon: '📦', color: '#6B7280' });\n            Alert.alert('Success', 'Category created successfully!');\n        } catch (error) {\n            console.error('Error creating category:', error);\n            Alert.alert('Error', 'Failed to create category');\n        }\n    };\n\n    const showCreateCategoryForm = () => {\n        console.log('Show categories', categories);\n\n        if (categories.length > 0 && !formData.categoryId) {\n            setFormData((prev) => ({ ...prev, categoryId: categories[0].id }));\n        }\n        refreshCategories();\n        setShowCategoryDropdown(!showCategoryDropdown);\n    };\n\n    const handleSubmit = async () => {\n        if (!formData.name.trim()) {\n            Alert.alert('Error', 'Product name is required');\n            return;\n        }\n\n        if (!formData.categoryId) {\n            Alert.alert('Error', 'Please select a category');\n            return;\n        }\n\n        if (!formData.price || parseFloat(formData.price) <= 0) {\n            Alert.alert('Error', 'Please enter a valid price');\n            return;\n        }\n\n        setLoading(true);\n\n        try {\n            const newPoduct: ProductData = {\n                name: formData.name,\n                categoryId: formData.categoryId,\n                cost: formData.cost,\n                barcode: formData.barcode,\n                description: formData.description,\n                unit: formData.unit || 'pcs',\n                minStock: parseFloat(formData.minStock) || 0,\n                maxStock: parseFloat(formData.maxStock) || 100,\n                price: parseFloat(formData.price),\n                location: formData.location,\n                initialQuantity: parseFloat(formData.quantity) || 0,\n            };\n\n            const newInventoryProductData: InventoryItemData = {\n                quantity: parseFloat(formData.quantity) || 0,\n                price: parseFloat(formData.price),\n                minStock: parseFloat(formData.minStock) || 0,\n                maxStock: parseFloat(formData.maxStock) || 100,\n                wholeSalePrice: 0,\n                weightedAvgCost: parseFloat(formData.cost) || 0,\n                lastPurchasePrice: parseFloat(formData.cost) || 0,\n                location: formData.location,\n            };\n            await addProduct(newPoduct, newInventoryProductData);\n\n            Alert.alert('Success', 'Product added successfully!');\n            resetForm();\n            onProductAdded?.();\n            onClose();\n        } catch (error) {\n            console.error('Error creating product:', error);\n            Alert.alert('Error', 'Failed to create product');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const resetForm = () => {\n        setFormData({\n            name: '',\n            categoryId: categories.length > 0 ? categories[0].id : '',\n            cost: '',\n            price: '',\n            wholeSalePrice: '',\n            barcode: '',\n            description: '',\n            unit: 'pcs',\n            quantity: '',\n            quantityPerUnit: '',\n            minStock: '',\n            maxStock: '',\n            location: '',\n        });\n    };\n\n    const handleClose = () => {\n        resetForm();\n        onClose();\n    };\n\n    const selectedCategory = categories.find((cat) => cat.id === formData.categoryId);\n\n    return (\n        <Modal\n            visible={visible}\n            animationType='slide'\n            presentationStyle='pageSheet'\n            onRequestClose={handleClose}>\n            <SafeAreaView className='flex-1 bg-white'>\n                <View className='flex-row justify-between items-center px-4 py-4 border-b border-gray-200'>\n                    <Text className='text-xl font-bold text-black'>Add New Product</Text>\n                    <TouchableOpacity onPress={handleClose}>\n                        <Ionicons name='close' size={24} color='#666' />\n                    </TouchableOpacity>\n                </View>\n\n                <ScrollView className='flex-1 px-4 py-6' showsVerticalScrollIndicator={false}>\n                    <Text className='text-gray-600 text-center mb-6'>\n                        Create a new product in your inventory with all necessary details.\n                    </Text>\n\n                    <View className='mb-4'>\n                        <FormInput\n                            label='Product Name'\n                            required={true}\n                            value={formData.name}\n                            onChangeText={(text) =>\n                                setFormData((prev) => ({ ...prev, name: text }))\n                            }\n                            placeholder='Enter product name'\n                        />\n                    </View>\n\n                    <View className='mb-4'>\n                        <Text className='text-sm font-medium text-gray-700 mb-1'>\n                            Category <Text className='text-red-500'>*</Text>\n                        </Text>\n                        <TouchableOpacity\n                            className='bg-gray-100 rounded-lg  text-gray-700 text-baserounded-lg px-3 py-3 flex-row justify-between items-center'\n                            // onPress={() => setShowCategoryDropdown(!showCategoryDropdown)}>\n                            onPress={showCreateCategoryForm}>\n                            <Text className={selectedCategory ? 'text-gray-900' : 'text-gray-400'}>\n                                {selectedCategory\n                                    ? `${selectedCategory.icon} ${selectedCategory.name}`\n                                    : 'Select category'}\n                            </Text>\n                            <Ionicons\n                                name={showCategoryDropdown ? 'chevron-up' : 'chevron-down'}\n                                size={20}\n                                color='#666'\n                            />\n                        </TouchableOpacity>\n\n                        {showCategoryDropdown && (\n                            <View className='border border-gray-300 rounded-lg mt-2 overflow-hidden'>\n                                <ScrollView style={{ maxHeight: 200 }}>\n                                    {categories.map((cat) => (\n                                        <TouchableOpacity\n                                            key={cat.id}\n                                            className={`px-3 py-3 border-b border-gray-200 ${\n                                                formData.categoryId === cat.id ? 'bg-blue-50' : ''\n                                            }`}\n                                            onPress={() => {\n                                                setFormData((prev) => ({\n                                                    ...prev,\n                                                    categoryId: cat.id,\n                                                }));\n                                                setShowCategoryDropdown(false);\n                                            }}>\n                                            <Text\n                                                className={\n                                                    formData.categoryId === cat.id\n                                                        ? 'text-blue-600 font-medium'\n                                                        : 'text-gray-900'\n                                                }>\n                                                {cat.icon} {cat.name}\n                                            </Text>\n                                        </TouchableOpacity>\n                                    ))}\n                                    <TouchableOpacity\n                                        className='px-3 py-3 bg-gray-50 border-t border-gray-300'\n                                        onPress={() => {\n                                            setShowCreateCategory(true);\n                                            setShowCategoryDropdown(false);\n                                        }}>\n                                        <Text className='text-blue-600 font-medium'>\n                                            <Ionicons name='add-circle' size={16} color='#2563EB' />{' '}\n                                            Create New Category\n                                        </Text>\n                                    </TouchableOpacity>\n                                </ScrollView>\n                            </View>\n                        )}\n\n                        {showCreateCategory && (\n                            <View className='border border-gray-300 rounded-lg mt-2 p-3 bg-gray-50'>\n                                <View className='flex-row justify-between items-center mb-3'>\n                                    <Text className='font-semibold text-gray-900'>\n                                        Create New Category\n                                    </Text>\n                                    <TouchableOpacity onPress={() => setShowCreateCategory(false)}>\n                                        <Ionicons name='close' size={20} color='#666' />\n                                    </TouchableOpacity>\n                                </View>\n\n                                <View className='mb-3'>\n                                    <Text className='text-sm font-medium text-gray-700 mb-1'>\n                                        Name *\n                                    </Text>\n                                    <TextInput\n                                        className='border border-gray-300 rounded-lg px-3 py-2 bg-white'\n                                        value={newCategoryData.name}\n                                        onChangeText={(text) =>\n                                            setNewCategoryData((prev) => ({ ...prev, name: text }))\n                                        }\n                                        placeholder='Enter category name'\n                                    />\n                                </View>\n\n                                <View className='flex-row gap-3 mb-3'>\n                                    <View className='flex-1'>\n                                        <Text className='text-sm font-medium text-gray-700 mb-1'>\n                                            Icon\n                                        </Text>\n                                        <TextInput\n                                            className='border border-gray-300 rounded-lg px-3 py-2 bg-white'\n                                            value={newCategoryData.icon}\n                                            onChangeText={(text) =>\n                                                setNewCategoryData((prev) => ({\n                                                    ...prev,\n                                                    icon: text,\n                                                }))\n                                            }\n                                            placeholder='📦'\n                                        />\n                                    </View>\n                                    <View className='flex-1'>\n                                        <Text className='text-sm font-medium text-gray-700 mb-1'>\n                                            Color\n                                        </Text>\n                                        <TextInput\n                                            className='border border-gray-300 rounded-lg px-3 py-2 bg-white'\n                                            value={newCategoryData.color}\n                                            onChangeText={(text) =>\n                                                setNewCategoryData((prev) => ({\n                                                    ...prev,\n                                                    color: text,\n                                                }))\n                                            }\n                                            placeholder='#6B7280'\n                                        />\n                                    </View>\n                                </View>\n\n                                <View className='flex-row gap-2'>\n                                    <TouchableOpacity\n                                        className='flex-1 bg-gray-200 rounded-lg py-2'\n                                        onPress={() => {\n                                            setShowCreateCategory(false);\n                                            setNewCategoryData({\n                                                name: '',\n                                                icon: '📦',\n                                                color: '#6B7280',\n                                            });\n                                        }}>\n                                        <Text className='text-center font-medium text-gray-700'>\n                                            Cancel\n                                        </Text>\n                                    </TouchableOpacity>\n                                    <TouchableOpacity\n                                        className={`flex-1 rounded-lg py-2 ${\n                                            newCategoryData.name.trim()\n                                                ? 'bg-blue-600'\n                                                : 'bg-gray-300'\n                                        }`}\n                                        onPress={handleCreateCategory}\n                                        disabled={!newCategoryData.name.trim()}>\n                                        <Text\n                                            className={`text-center font-medium ${\n                                                newCategoryData.name.trim()\n                                                    ? 'text-white'\n                                                    : 'text-gray-500'\n                                            }`}>\n                                            Create\n                                        </Text>\n                                    </TouchableOpacity>\n                                </View>\n                            </View>\n                        )}\n                    </View>\n\n                    <View className='flex-row mb-4 gap-3'>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Cost Price'\n                                placeholder='0.00'\n                                keyboardType='decimal-pad'\n                                value={formData.cost}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, cost: text }))\n                                }\n                            />\n                        </View>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Wholesale Price'\n                                placeholder='0.00'\n                                keyboardType='decimal-pad'\n                                value={formData.wholeSalePrice}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, wholeSalePrice: text }))\n                                }\n                            />\n                        </View>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='retail Price'\n                                required={true}\n                                placeholder='0.00'\n                                keyboardType='decimal-pad'\n                                value={formData.price}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, price: text }))\n                                }\n                            />\n                        </View>\n                    </View>\n                    <View className='flex-row mb-4 gap-3'>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Barcode/SKU'\n                                placeholder='Enter barcode or SKU'\n                                value={formData.barcode}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, barcode: text }))\n                                }\n                            />\n                        </View>\n\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Unit'\n                                value={formData.unit}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, unit: text }))\n                                }\n                                placeholder='pcs, kg, liter, etc.'\n                            />\n                        </View>\n                    </View>\n\n                    <View className='flex-row mb-4 gap-3'>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Quatity per Unit'\n                                value={formData.quantityPerUnit}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, quantityPerUnit: text }))\n                                }\n                                placeholder='eg 500ml, 6pcs, 1 dozen etc.'\n                            />\n                        </View>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Inventory Quantity'\n                                value={formData.quantity}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, quantity: text }))\n                                }\n                                placeholder='0'\n                                keyboardType='numeric'\n                            />\n                        </View>\n                    </View>\n                    <View className='flex-row mb-4 gap-3'>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Min Stock alert'\n                                value={formData.minStock}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, minStock: text }))\n                                }\n                                placeholder='0'\n                                keyboardType='numeric'\n                            />\n                        </View>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Max Stock alert'\n                                value={formData.maxStock}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, maxStock: text }))\n                                }\n                                placeholder='100'\n                                keyboardType='numeric'\n                            />\n                        </View>\n                    </View>\n\n                    <View className='mb-4'>\n                        <FormInput\n                            label='Location'\n                            value={formData.location}\n                            onChangeText={(text) =>\n                                setFormData((prev) => ({ ...prev, location: text }))\n                            }\n                            placeholder='Shelf, Aisle, etc.'\n                        />\n                    </View>\n\n                    <View className='mb-8'>\n                        <FormInput\n                            label='Description (optional)'\n                            value={formData.description}\n                            onChangeText={(text) =>\n                                setFormData((prev) => ({ ...prev, description: text }))\n                            }\n                            placeholder='Product description (optional)'\n                            multiline\n                            numberOfLines={3}\n                            textAlignVertical='top'\n                        />\n                    </View>\n                </ScrollView>\n\n                <View className='flex-row px-4 py-4 space-x-3 border-t border-gray-200'>\n                    <TouchableOpacity\n                        className='flex-1 bg-gray-200 rounded-xl py-4 mx-2'\n                        onPress={handleClose}\n                        disabled={loading}>\n                        <Text className='text-center font-semibold text-gray-700'>Cancel</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        className={`flex-1 rounded-xl py-4 ${\n                            formData.name && formData.categoryId && formData.price\n                                ? 'bg-black'\n                                : 'bg-gray-300'\n                        }`}\n                        onPress={handleSubmit}\n                        disabled={\n                            !formData.name || !formData.categoryId || !formData.price || loading\n                        }>\n                        {loading ? (\n                            <ActivityIndicator size='small' color='#FFFFFF' />\n                        ) : (\n                            <Text\n                                className={`text-center font-semibold ${\n                                    formData.name && formData.categoryId && formData.price\n                                        ? 'text-white'\n                                        : 'text-gray-500'\n                                }`}>\n                                Add Product\n                            </Text>\n                        )}\n                    </TouchableOpacity>\n                </View>\n            </SafeAreaView>\n        </Modal>\n    );\n};\n","size_bytes":24656},"db/services/sessionsService.ts":{"content":"import { Q } from '@nozbe/watermelondb';\nimport Session from '../models/sessions';\n\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { database, sessionCollection } from '..';\n\nexport const storedSessionId$ = new BehaviorSubject<string | null>(null);\n\nasync function initFromStorage() {\n    try {\n        // Find the first active session in the database\n        const activeSessions = await sessionCollection\n            .query(Q.where('is_active', true), Q.sortBy('created_at', Q.desc))\n            .fetch();\n\n        if (activeSessions.length > 0) {\n            // Use the most recent active session\n            const session = activeSessions[0];\n            storedSessionId$.next(session.id);\n        } else {\n            storedSessionId$.next(null);\n        }\n    } catch (e) {\n        console.log('error init storage ', e);\n        throw e;\n    }\n}\n\ninitFromStorage();\n\nexport const activeSession$: Observable<Session | null> = storedSessionId$.pipe(\n    switchMap((id) => {\n        if (!id) return of(null);\n        return sessionCollection.findAndObserve(id).pipe(map((s) => (s && s.isActive ? s : null)));\n    }),\n    distinctUntilChanged((a, b) => a?.id === b?.id),\n    shareReplay(1),\n);\n\nexport const isAuthenticated$: Observable<boolean> = activeSession$.pipe(\n    map((s) => !!s?.isActive),\n    distinctUntilChanged(),\n    shareReplay(1),\n);\nexport async function getSession(sessionId: string): Promise<Session | null> {\n    try {\n        return await sessionCollection.find(sessionId);\n    } catch {\n        return null;\n    }\n}\n\nexport async function createSession(userId: string): Promise<Session | null> {\n    try {\n        await deactivateUserSessions(userId);\n        const session = await database.write(async () => {\n            return await sessionCollection.create((s) => {\n                s.sessionId = `sess_${Date.now()}_${Math.random().toString(36).slice(2)}`;\n                s.userId = userId;\n                s.isActive = true;\n            });\n        });\n        storedSessionId$.next(session.id);\n        return session;\n    } catch {\n        return null;\n    }\n}\n\nexport async function activateSession(sessionId: string): Promise<void> {\n    const session = await getSession(sessionId);\n    if (!session) return;\n    await database.write(async () => {\n        await session.update((s) => {\n            s.isActive = true;\n        });\n    });\n    storedSessionId$.next(sessionId);\n}\n\nexport async function deactivateUserSessions(userId: string): Promise<void> {\n    const sessions = await sessionCollection\n        .query(Q.where('user_id', userId), Q.where('is_active', true))\n        .fetch();\n\n    if (sessions.length === 0) return;\n    await database.write(async () => {\n        for (const s of sessions) {\n            await s.update((row) => {\n                row.isActive = false;\n            });\n        }\n    });\n}\n\nexport async function endCurrentSession(): Promise<void> {\n    const id = storedSessionId$.value;\n    if (!id) return;\n    const session = await getSession(id);\n    if (session) {\n        await database.write(async () => {\n            await session.update((s) => {\n                s.isActive = false;\n            });\n        });\n    }\n    storedSessionId$.next(null);\n}\n","size_bytes":3323},"components/inventory/modal/EditProductModal.tsx":{"content":"import { Category } from '@/db';\nimport { CategoryData, CategoryItem, InventoryViewItem } from '@/types';\nimport { Ionicons } from '@expo/vector-icons';\nimport React, { useEffect, useState } from 'react';\nimport {\n    ActivityIndicator,\n    Alert,\n    Modal,\n    ScrollView,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport FormInput from '../FormInput';\n\ninterface EditProductModalProps {\n    visible: boolean;\n    onClose: () => void;\n    onProductUpdated?: () => void;\n    item: InventoryViewItem | null;\n    categories: CategoryItem[];\n    addCategory: (newCategoryData: CategoryData) => Promise<Category | undefined>;\n    loadingCategories: boolean;\n    refreshCategories: () => Promise<void>;\n    updateProduct: (\n        productId: string,\n        updates: Partial<{\n            name: string;\n            categoryId: string;\n            cost: number;\n            barcode: string;\n            description: string;\n            unit: string;\n            status: string;\n        }>,\n    ) => Promise<void>;\n    updateInventory: (\n        inventoryId: string,\n        updates: {\n            price?: number;\n            wholeSalePrice?: number;\n            minStock?: number;\n            maxStock?: number;\n            location?: string;\n        },\n    ) => Promise<void>;\n}\n\ninterface FormData {\n    name: string;\n    categoryId: string;\n    cost: string;\n    price: string;\n    wholeSalePrice: string;\n    barcode: string;\n    description: string;\n    unit: string;\n    quantity: string;\n    quantityPerUnit: string;\n    minStock: string;\n    maxStock: string;\n    location: string;\n}\n\nexport const EditProductModal: React.FC<EditProductModalProps> = ({\n    visible,\n    onClose,\n    addCategory,\n    loadingCategories,\n    refreshCategories,\n    onProductUpdated,\n    updateProduct,\n    updateInventory,\n    categories,\n    item,\n}) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [showCategoryDropdown, setShowCategoryDropdown] = useState<boolean>(false);\n    const [showCreateCategory, setShowCreateCategory] = useState<boolean>(false);\n    const [newCategoryData, setNewCategoryData] = useState<CategoryData>({\n        name: '',\n        icon: '📦',\n        color: '#6B7280',\n    });\n\n    const [formData, setFormData] = useState<FormData>({\n        name: '',\n        categoryId: '',\n        cost: '',\n        price: '',\n        wholeSalePrice: '',\n        barcode: '',\n        description: '',\n        unit: '',\n        quantity: '',\n        quantityPerUnit: '',\n        minStock: '',\n        maxStock: '',\n        location: '',\n    });\n\n    useEffect(() => {\n        if (item && visible) {\n            setFormData({\n                name: item.name || '',\n                categoryId: item.categoryId || '',\n                cost: item.cost?.toString() || '',\n                price: item.price?.toString() || '',\n                wholeSalePrice: '',\n                barcode: item.barcode || '',\n                description: '',\n                unit: item.unit || 'pcs',\n                quantity: item.quantity?.toString() || '',\n                quantityPerUnit: '',\n                minStock: item.minStock?.toString() || '',\n                maxStock: item.maxStock?.toString() || '',\n                location: item.location || '',\n            });\n        }\n    }, [item, visible]);\n\n    const handleCreateCategory = async (): Promise<void> => {\n        try {\n            const newCategory = await addCategory(newCategoryData);\n            await refreshCategories();\n            if (!newCategory) {\n                Alert.alert('Error', 'No category created');\n                return;\n            }\n\n            setFormData((prev) => ({ ...prev, categoryId: newCategory.id }));\n            setShowCreateCategory(false);\n            setShowCategoryDropdown(false);\n            setNewCategoryData({ name: '', icon: '📦', color: '#6B7280' });\n            Alert.alert('Success', 'Category created successfully!');\n        } catch (error) {\n            console.error('Error creating category:', error);\n            Alert.alert('Error', 'Failed to create category');\n        }\n    };\n\n    const showCreateCategoryForm = (): void => {\n        if (categories.length > 0 && !formData.categoryId) {\n            setFormData((prev) => ({ ...prev, categoryId: categories[0].id }));\n        }\n        refreshCategories();\n        setShowCategoryDropdown(!showCategoryDropdown);\n    };\n\n    const handleSubmit = async (): Promise<void> => {\n        if (!item) {\n            Alert.alert('Error', 'No item selected');\n            return;\n        }\n\n        if (!formData.name.trim()) {\n            Alert.alert('Error', 'Product name is required');\n            return;\n        }\n\n        if (!formData.categoryId) {\n            Alert.alert('Error', 'Please select a category');\n            return;\n        }\n\n        if (!formData.price || parseFloat(formData.price) <= 0) {\n            Alert.alert('Error', 'Please enter a valid price');\n            return;\n        }\n\n        setLoading(true);\n\n        try {\n            const productUpdates: Partial<{\n                name: string;\n                categoryId: string;\n                cost: number;\n                barcode: string;\n                description: string;\n                unit: string;\n                status: string;\n            }> = {\n                name: formData.name,\n                categoryId: formData.categoryId,\n                barcode: formData.barcode,\n                description: formData.description,\n                unit: formData.unit || 'pcs',\n            };\n\n            if (formData.cost) {\n                productUpdates.cost = parseFloat(formData.cost);\n            }\n\n            await updateProduct(item.productId, productUpdates);\n\n            const parsedMinStock = parseFloat(formData.minStock);\n            const parsedMaxStock = parseFloat(formData.maxStock);\n            const parsedWholeSalePrice = parseFloat(formData.wholeSalePrice);\n\n            const inventoryUpdates: {\n                price?: number;\n                wholeSalePrice?: number;\n                minStock?: number;\n                maxStock?: number;\n                location?: string;\n            } = {\n                price: parseFloat(formData.price),\n                minStock: Number.isFinite(parsedMinStock) ? parsedMinStock : 0,\n                maxStock: Number.isFinite(parsedMaxStock) ? parsedMaxStock : 100,\n                location: formData.location,\n            };\n\n            if (formData.wholeSalePrice !== '' && Number.isFinite(parsedWholeSalePrice)) {\n                inventoryUpdates.wholeSalePrice = parsedWholeSalePrice;\n            }\n\n            await updateInventory(item.id, inventoryUpdates);\n\n            Alert.alert('Success', 'Product updated successfully!');\n            onProductUpdated?.();\n            onClose();\n        } catch (error) {\n            console.error('Error updating product:', error);\n            Alert.alert('Error', 'Failed to update product');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleClose = (): void => {\n        onClose();\n    };\n\n    const selectedCategory = categories.find((cat) => cat.id === formData.categoryId);\n\n    return (\n        <Modal\n            visible={visible}\n            animationType='slide'\n            presentationStyle='pageSheet'\n            onRequestClose={handleClose}\n        >\n            <SafeAreaView className='flex-1 bg-white'>\n                <View className='flex-row justify-between items-center px-4 py-4 border-b border-gray-200'>\n                    <Text className='text-xl font-bold text-black'>Edit Product</Text>\n                    <TouchableOpacity onPress={handleClose}>\n                        <Ionicons name='close' size={24} color='#666' />\n                    </TouchableOpacity>\n                </View>\n\n                <ScrollView className='flex-1 px-4 py-6' showsVerticalScrollIndicator={false}>\n                    <Text className='text-gray-600 text-center mb-6'>\n                        Update product details and inventory information.\n                    </Text>\n\n                    <View className='mb-4'>\n                        <FormInput\n                            label='Product Name'\n                            required={true}\n                            value={formData.name}\n                            onChangeText={(text: string) =>\n                                setFormData((prev) => ({ ...prev, name: text }))\n                            }\n                            placeholder='Enter product name'\n                        />\n                    </View>\n\n                    <View className='mb-4'>\n                        <Text className='text-sm font-medium text-gray-700 mb-1'>\n                            Category <Text className='text-red-500'>*</Text>\n                        </Text>\n                        <TouchableOpacity\n                            className='bg-gray-100 rounded-lg text-gray-700 text-base rounded-lg px-3 py-3 flex-row justify-between items-center'\n                            onPress={showCreateCategoryForm}\n                        >\n                            <Text className={selectedCategory ? 'text-gray-900' : 'text-gray-400'}>\n                                {selectedCategory\n                                    ? `${selectedCategory.icon} ${selectedCategory.name}`\n                                    : 'Select category'}\n                            </Text>\n                            <Ionicons\n                                name={showCategoryDropdown ? 'chevron-up' : 'chevron-down'}\n                                size={20}\n                                color='#666'\n                            />\n                        </TouchableOpacity>\n\n                        {showCategoryDropdown && (\n                            <View className='border border-gray-300 rounded-lg mt-2 overflow-hidden'>\n                                <ScrollView style={{ maxHeight: 200 }}>\n                                    {categories.map((cat) => (\n                                        <TouchableOpacity\n                                            key={cat.id}\n                                            className={`px-3 py-3 border-b border-gray-200 ${\n                                                formData.categoryId === cat.id ? 'bg-blue-50' : ''\n                                            }`}\n                                            onPress={() => {\n                                                setFormData((prev) => ({\n                                                    ...prev,\n                                                    categoryId: cat.id,\n                                                }));\n                                                setShowCategoryDropdown(false);\n                                            }}\n                                        >\n                                            <Text\n                                                className={\n                                                    formData.categoryId === cat.id\n                                                        ? 'text-blue-600 font-medium'\n                                                        : 'text-gray-900'\n                                                }\n                                            >\n                                                {cat.icon} {cat.name}\n                                            </Text>\n                                        </TouchableOpacity>\n                                    ))}\n                                    <TouchableOpacity\n                                        className='px-3 py-3 bg-gray-50 border-t border-gray-300'\n                                        onPress={() => {\n                                            setShowCreateCategory(true);\n                                            setShowCategoryDropdown(false);\n                                        }}\n                                    >\n                                        <Text className='text-blue-600 font-medium'>\n                                            <Ionicons name='add-circle' size={16} color='#2563EB' />{' '}\n                                            Create New Category\n                                        </Text>\n                                    </TouchableOpacity>\n                                </ScrollView>\n                            </View>\n                        )}\n\n                        {showCreateCategory && (\n                            <View className='border border-gray-300 rounded-lg mt-2 p-3 bg-gray-50'>\n                                <View className='flex-row justify-between items-center mb-3'>\n                                    <Text className='font-semibold text-gray-900'>\n                                        Create New Category\n                                    </Text>\n                                    <TouchableOpacity onPress={() => setShowCreateCategory(false)}>\n                                        <Ionicons name='close' size={20} color='#666' />\n                                    </TouchableOpacity>\n                                </View>\n\n                                <View className='mb-3'>\n                                    <Text className='text-sm font-medium text-gray-700 mb-1'>\n                                        Name *\n                                    </Text>\n                                    <TextInput\n                                        className='border border-gray-300 rounded-lg px-3 py-2 bg-white'\n                                        value={newCategoryData.name}\n                                        onChangeText={(text: string) =>\n                                            setNewCategoryData((prev) => ({ ...prev, name: text }))\n                                        }\n                                        placeholder='Enter category name'\n                                    />\n                                </View>\n\n                                <View className='flex-row gap-3 mb-3'>\n                                    <View className='flex-1'>\n                                        <Text className='text-sm font-medium text-gray-700 mb-1'>\n                                            Icon\n                                        </Text>\n                                        <TextInput\n                                            className='border border-gray-300 rounded-lg px-3 py-2 bg-white'\n                                            value={newCategoryData.icon}\n                                            onChangeText={(text: string) =>\n                                                setNewCategoryData((prev) => ({\n                                                    ...prev,\n                                                    icon: text,\n                                                }))\n                                            }\n                                            placeholder='📦'\n                                        />\n                                    </View>\n                                    <View className='flex-1'>\n                                        <Text className='text-sm font-medium text-gray-700 mb-1'>\n                                            Color\n                                        </Text>\n                                        <TextInput\n                                            className='border border-gray-300 rounded-lg px-3 py-2 bg-white'\n                                            value={newCategoryData.color}\n                                            onChangeText={(text: string) =>\n                                                setNewCategoryData((prev) => ({\n                                                    ...prev,\n                                                    color: text,\n                                                }))\n                                            }\n                                            placeholder='#6B7280'\n                                        />\n                                    </View>\n                                </View>\n\n                                <View className='flex-row gap-2'>\n                                    <TouchableOpacity\n                                        className='flex-1 bg-gray-200 rounded-lg py-2'\n                                        onPress={() => {\n                                            setShowCreateCategory(false);\n                                            setNewCategoryData({\n                                                name: '',\n                                                icon: '📦',\n                                                color: '#6B7280',\n                                            });\n                                        }}\n                                    >\n                                        <Text className='text-center font-medium text-gray-700'>\n                                            Cancel\n                                        </Text>\n                                    </TouchableOpacity>\n                                    <TouchableOpacity\n                                        className={`flex-1 rounded-lg py-2 ${\n                                            newCategoryData.name.trim()\n                                                ? 'bg-blue-600'\n                                                : 'bg-gray-300'\n                                        }`}\n                                        onPress={handleCreateCategory}\n                                        disabled={!newCategoryData.name.trim()}\n                                    >\n                                        <Text\n                                            className={`text-center font-medium ${\n                                                newCategoryData.name.trim()\n                                                    ? 'text-white'\n                                                    : 'text-gray-500'\n                                            }`}\n                                        >\n                                            Create\n                                        </Text>\n                                    </TouchableOpacity>\n                                </View>\n                            </View>\n                        )}\n                    </View>\n\n                    <View className='flex-row mb-4 gap-3'>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Cost Price'\n                                placeholder='0.00'\n                                keyboardType='decimal-pad'\n                                value={formData.cost}\n                                onChangeText={(text: string) =>\n                                    setFormData((prev) => ({ ...prev, cost: text }))\n                                }\n                            />\n                        </View>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Wholesale Price'\n                                placeholder='0.00'\n                                keyboardType='decimal-pad'\n                                value={formData.wholeSalePrice}\n                                onChangeText={(text: string) =>\n                                    setFormData((prev) => ({ ...prev, wholeSalePrice: text }))\n                                }\n                            />\n                        </View>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Retail Price'\n                                required={true}\n                                placeholder='0.00'\n                                keyboardType='decimal-pad'\n                                value={formData.price}\n                                onChangeText={(text: string) =>\n                                    setFormData((prev) => ({ ...prev, price: text }))\n                                }\n                            />\n                        </View>\n                    </View>\n\n                    <View className='flex-row mb-4 gap-3'>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Barcode/SKU'\n                                placeholder='Enter barcode or SKU'\n                                value={formData.barcode}\n                                onChangeText={(text: string) =>\n                                    setFormData((prev) => ({ ...prev, barcode: text }))\n                                }\n                            />\n                        </View>\n\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Unit'\n                                value={formData.unit}\n                                onChangeText={(text: string) =>\n                                    setFormData((prev) => ({ ...prev, unit: text }))\n                                }\n                                placeholder='pcs, kg, liter, etc.'\n                            />\n                        </View>\n                    </View>\n                    <View className='flex-row mb-4 gap-3'>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Quatity per Unit'\n                                value={formData.quantityPerUnit}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, quantityPerUnit: text }))\n                                }\n                                placeholder='eg 500ml, 6pcs, 1 dozen etc.'\n                            />\n                        </View>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Inventory Quantity'\n                                value={formData.quantity}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, quantity: text }))\n                                }\n                                placeholder='0'\n                                keyboardType='numeric'\n                            />\n                        </View>\n                    </View>\n\n                    <View className='flex-row mb-4 gap-3'>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Min Stock Alert'\n                                value={formData.minStock}\n                                onChangeText={(text: string) =>\n                                    setFormData((prev) => ({ ...prev, minStock: text }))\n                                }\n                                placeholder='0'\n                                keyboardType='numeric'\n                            />\n                        </View>\n                        <View className='flex-1'>\n                            <FormInput\n                                label='Max Stock Alert'\n                                value={formData.maxStock}\n                                onChangeText={(text: string) =>\n                                    setFormData((prev) => ({ ...prev, maxStock: text }))\n                                }\n                                placeholder='100'\n                                keyboardType='numeric'\n                            />\n                        </View>\n                    </View>\n\n                    <View className='mb-4'>\n                        <FormInput\n                            label='Location'\n                            value={formData.location}\n                            onChangeText={(text: string) =>\n                                setFormData((prev) => ({ ...prev, location: text }))\n                            }\n                            placeholder='Shelf, Aisle, etc.'\n                        />\n                    </View>\n\n                    <View className='mb-8'>\n                        <FormInput\n                            label='Description (optional)'\n                            value={formData.description}\n                            onChangeText={(text: string) =>\n                                setFormData((prev) => ({ ...prev, description: text }))\n                            }\n                            placeholder='Product description (optional)'\n                            multiline\n                            numberOfLines={3}\n                            textAlignVertical='top'\n                        />\n                    </View>\n                </ScrollView>\n\n                <View className='flex-row px-4 py-4 space-x-3 border-t border-gray-200'>\n                    <TouchableOpacity\n                        className='flex-1 bg-gray-200 rounded-xl py-4 mx-2'\n                        onPress={handleClose}\n                        disabled={loading}\n                    >\n                        <Text className='text-center font-semibold text-gray-700'>Cancel</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        className={`flex-1 rounded-xl py-4 mx-2 ${\n                            formData.name && formData.categoryId && formData.price\n                                ? 'bg-black'\n                                : 'bg-gray-300'\n                        }`}\n                        onPress={handleSubmit}\n                        disabled={\n                            loading || !formData.name || !formData.categoryId || !formData.price\n                        }\n                    >\n                        {loading ? (\n                            <ActivityIndicator color='white' />\n                        ) : (\n                            <Text\n                                className={`text-center font-semibold ${\n                                    formData.name && formData.categoryId && formData.price\n                                        ? 'text-white'\n                                        : 'text-gray-500'\n                                }`}\n                            >\n                                Update Product\n                            </Text>\n                        )}\n                    </TouchableOpacity>\n                </View>\n            </SafeAreaView>\n        </Modal>\n    );\n};\n","size_bytes":26668}},"version":2}